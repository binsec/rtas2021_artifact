// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: libcall.proto

#include "libcall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memory_pol_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memory_t_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_atoi_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_atoi_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_bsearch_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_bsearch_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ctype_b_loc_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ctype_b_loc_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fgetc_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fgetc_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fread_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fread_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_free_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_free_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fscanf_elem_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fscanf_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fscanf_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fstat_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fstat_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fxstat64_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fxstat64_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_gethostname_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_gethostname_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmainargs_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmainargs_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmodulehandle_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmodulehandle_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getprocaddress_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getprocaddress_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_lseek_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_lseek_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_malloc_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_malloc_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memcmp_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memcmp_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memcpy_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memcpy_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memset_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memset_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mmap_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mmap_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_open_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_open_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_printf_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_printf_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_qsort_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_qsort_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_read_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_read_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_realloc_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_realloc_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strchr_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strchr_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strcmp_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strcmp_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strcpy_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strcpy_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncmp_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncmp_t_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncpy_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncpy_t_libcall_2eproto;
namespace libcall_types {
class libcall_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<libcall_pol> _instance;
  const ::libcall_types::strcpy_pol* strcpy_;
  const ::libcall_types::printf_pol* printf_;
  const ::libcall_types::atoi_pol* atoi_;
  const ::libcall_types::malloc_pol* malloc_;
  const ::libcall_types::getmodulehandle_pol* getmodulehandle_;
  const ::libcall_types::getprocaddress_pol* getprocaddress_;
  const ::libcall_types::getmainargs_pol* getmainargs_;
  const ::libcall_types::gethostname_pol* gethostname_;
  const ::libcall_types::free_pol* free_;
  const ::libcall_types::memcpy_pol* memcpy_;
  const ::libcall_types::memset_pol* memset_;
  const ::libcall_types::fgetc_pol* fgetc_;
  const ::libcall_types::read_pol* read_;
  const ::libcall_types::strchr_pol* strchr_;
  const ::libcall_types::exit_pol* exit_;
  const ::libcall_types::strcmp_pol* strcmp_;
  const ::libcall_types::ctype_b_loc_pol* ctype_b_loc_;
  const ::libcall_types::fscanf_pol* fscanf_;
  const ::libcall_types::strncpy_pol* strncpy_;
  const ::libcall_types::fstat_pol* fstat_;
  const ::libcall_types::realloc_pol* realloc_;
  const ::libcall_types::mmap_pol* mmap_;
  const ::libcall_types::qsort_pol* qsort_;
  const ::libcall_types::bsearch_pol* bsearch_;
  const ::libcall_types::open_pol* open_stub_;
  const ::libcall_types::lseek_pol* lseek_;
  const ::libcall_types::fread_pol* fread_;
  const ::libcall_types::strncmp_pol* strncmp_;
  const ::libcall_types::memcmp_pol* memcmp_;
  const ::libcall_types::fxstat64_pol* fxstat64_;
  const ::libcall_types::generic_pol* generic_;
} _libcall_pol_default_instance_;
class libcall_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<libcall_t> _instance;
  const ::libcall_types::strcpy_t* strcpy_;
  const ::libcall_types::printf_t* printf_;
  const ::libcall_types::atoi_t* atoi_;
  const ::libcall_types::malloc_t* malloc_;
  const ::libcall_types::getmodulehandle_t* getmodulehandle_;
  const ::libcall_types::getprocaddress_t* getprocaddress_;
  const ::libcall_types::getmainargs_t* getmainargs_;
  const ::libcall_types::gethostname_t* gethostname_;
  const ::libcall_types::free_t* free_;
  const ::libcall_types::memcpy_t* memcpy_;
  const ::libcall_types::memset_t* memset_;
  const ::libcall_types::fgetc_t* fgetc_;
  const ::libcall_types::generic_t* generic_;
  const ::libcall_types::read_t* read_;
  const ::libcall_types::strchr_t* strchr_;
  const ::libcall_types::exit_t* exit_;
  const ::libcall_types::strcmp_t* strcmp_;
  const ::libcall_types::ctype_b_loc_t* ctype_b_loc_;
  const ::libcall_types::fscanf_t* fscanf_;
  const ::libcall_types::strncpy_t* strncpy_;
  const ::libcall_types::fstat_t* fstat_;
  const ::libcall_types::realloc_t* realloc_;
  const ::libcall_types::mmap_t* mmap_;
  const ::libcall_types::qsort_t* qsort_;
  const ::libcall_types::bsearch_t* bsearch_;
  const ::libcall_types::open_t* open_stub_;
  const ::libcall_types::lseek_t* lseek_;
  const ::libcall_types::fread_t* fread_;
  const ::libcall_types::strncmp_t* strncmp_;
  const ::libcall_types::memcmp_t* memcmp_;
  const ::libcall_types::fxstat64_t* fxstat64_;
} _libcall_t_default_instance_;
class generic_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<generic_pol> _instance;
} _generic_pol_default_instance_;
class ctype_b_loc_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ctype_b_loc_pol> _instance;
} _ctype_b_loc_pol_default_instance_;
class exit_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<exit_pol> _instance;
} _exit_pol_default_instance_;
class fscanf_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fscanf_pol> _instance;
} _fscanf_pol_default_instance_;
class read_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_pol> _instance;
} _read_pol_default_instance_;
class fread_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fread_pol> _instance;
} _fread_pol_default_instance_;
class strcmp_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strcmp_pol> _instance;
} _strcmp_pol_default_instance_;
class strncmp_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strncmp_pol> _instance;
} _strncmp_pol_default_instance_;
class memcmp_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<memcmp_pol> _instance;
} _memcmp_pol_default_instance_;
class strchr_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strchr_pol> _instance;
} _strchr_pol_default_instance_;
class strncpy_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strncpy_pol> _instance;
} _strncpy_pol_default_instance_;
class fstat_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fstat_pol> _instance;
} _fstat_pol_default_instance_;
class fxstat64_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fxstat64_pol> _instance;
} _fxstat64_pol_default_instance_;
class realloc_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<realloc_pol> _instance;
} _realloc_pol_default_instance_;
class mmap_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mmap_pol> _instance;
} _mmap_pol_default_instance_;
class qsort_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<qsort_pol> _instance;
} _qsort_pol_default_instance_;
class bsearch_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bsearch_pol> _instance;
} _bsearch_pol_default_instance_;
class open_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<open_pol> _instance;
} _open_pol_default_instance_;
class strcpy_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strcpy_pol> _instance;
} _strcpy_pol_default_instance_;
class printf_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<printf_pol> _instance;
} _printf_pol_default_instance_;
class atoi_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<atoi_pol> _instance;
} _atoi_pol_default_instance_;
class malloc_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<malloc_pol> _instance;
} _malloc_pol_default_instance_;
class getmodulehandle_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getmodulehandle_pol> _instance;
} _getmodulehandle_pol_default_instance_;
class getprocaddress_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getprocaddress_pol> _instance;
} _getprocaddress_pol_default_instance_;
class getmainargs_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getmainargs_pol> _instance;
} _getmainargs_pol_default_instance_;
class gethostname_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gethostname_pol> _instance;
} _gethostname_pol_default_instance_;
class free_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<free_pol> _instance;
} _free_pol_default_instance_;
class memcpy_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<memcpy_pol> _instance;
} _memcpy_pol_default_instance_;
class memset_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<memset_pol> _instance;
} _memset_pol_default_instance_;
class fgetc_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fgetc_pol> _instance;
} _fgetc_pol_default_instance_;
class lseek_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lseek_pol> _instance;
} _lseek_pol_default_instance_;
class exit_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<exit_t> _instance;
} _exit_t_default_instance_;
class generic_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<generic_t> _instance;
} _generic_t_default_instance_;
class fscanf_elem_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fscanf_elem_t> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_dec_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
} _fscanf_elem_t_default_instance_;
class fscanf_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fscanf_t> _instance;
} _fscanf_t_default_instance_;
class ctype_b_loc_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ctype_b_loc_t> _instance;
} _ctype_b_loc_t_default_instance_;
class read_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<read_t> _instance;
} _read_t_default_instance_;
class fread_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fread_t> _instance;
} _fread_t_default_instance_;
class strchr_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strchr_t> _instance;
} _strchr_t_default_instance_;
class strncpy_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strncpy_t> _instance;
} _strncpy_t_default_instance_;
class fstat_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fstat_t> _instance;
} _fstat_t_default_instance_;
class fxstat64_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fxstat64_t> _instance;
} _fxstat64_t_default_instance_;
class realloc_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<realloc_t> _instance;
} _realloc_t_default_instance_;
class mmap_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<mmap_t> _instance;
} _mmap_t_default_instance_;
class qsort_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<qsort_t> _instance;
} _qsort_t_default_instance_;
class bsearch_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bsearch_t> _instance;
} _bsearch_t_default_instance_;
class open_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<open_t> _instance;
} _open_t_default_instance_;
class strcpy_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strcpy_t> _instance;
} _strcpy_t_default_instance_;
class strcmp_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strcmp_t> _instance;
} _strcmp_t_default_instance_;
class strncmp_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<strncmp_t> _instance;
} _strncmp_t_default_instance_;
class memcmp_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<memcmp_t> _instance;
} _memcmp_t_default_instance_;
class printf_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<printf_t> _instance;
} _printf_t_default_instance_;
class atoi_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<atoi_t> _instance;
} _atoi_t_default_instance_;
class malloc_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<malloc_t> _instance;
} _malloc_t_default_instance_;
class getmodulehandle_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getmodulehandle_t> _instance;
} _getmodulehandle_t_default_instance_;
class getprocaddress_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getprocaddress_t> _instance;
} _getprocaddress_t_default_instance_;
class getmainargs_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<getmainargs_t> _instance;
} _getmainargs_t_default_instance_;
class gethostname_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<gethostname_t> _instance;
} _gethostname_t_default_instance_;
class free_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<free_t> _instance;
} _free_t_default_instance_;
class memcpy_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<memcpy_t> _instance;
} _memcpy_t_default_instance_;
class memset_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<memset_t> _instance;
} _memset_t_default_instance_;
class fgetc_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fgetc_t> _instance;
} _fgetc_t_default_instance_;
class lseek_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lseek_t> _instance;
} _lseek_t_default_instance_;
}  // namespace libcall_types
static void InitDefaultsscc_info_atoi_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_atoi_pol_default_instance_;
    new (ptr) ::libcall_types::atoi_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::atoi_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_atoi_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_atoi_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_atoi_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_atoi_t_default_instance_;
    new (ptr) ::libcall_types::atoi_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::atoi_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_atoi_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_atoi_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_bsearch_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_bsearch_pol_default_instance_;
    new (ptr) ::libcall_types::bsearch_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::bsearch_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_bsearch_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_bsearch_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_bsearch_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_bsearch_t_default_instance_;
    new (ptr) ::libcall_types::bsearch_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::bsearch_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_bsearch_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_bsearch_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_ctype_b_loc_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_ctype_b_loc_pol_default_instance_;
    new (ptr) ::libcall_types::ctype_b_loc_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::ctype_b_loc_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ctype_b_loc_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ctype_b_loc_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_ctype_b_loc_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_ctype_b_loc_t_default_instance_;
    new (ptr) ::libcall_types::ctype_b_loc_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::ctype_b_loc_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ctype_b_loc_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_ctype_b_loc_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_exit_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_exit_pol_default_instance_;
    new (ptr) ::libcall_types::exit_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::exit_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_exit_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_exit_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_exit_t_default_instance_;
    new (ptr) ::libcall_types::exit_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::exit_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_exit_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_exit_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fgetc_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fgetc_pol_default_instance_;
    new (ptr) ::libcall_types::fgetc_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fgetc_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fgetc_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_fgetc_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fgetc_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fgetc_t_default_instance_;
    new (ptr) ::libcall_types::fgetc_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fgetc_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fgetc_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_fgetc_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fread_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fread_pol_default_instance_;
    new (ptr) ::libcall_types::fread_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fread_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fread_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_fread_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_fread_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fread_t_default_instance_;
    new (ptr) ::libcall_types::fread_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fread_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fread_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_fread_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_free_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_free_pol_default_instance_;
    new (ptr) ::libcall_types::free_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::free_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_free_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_free_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_free_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_free_t_default_instance_;
    new (ptr) ::libcall_types::free_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::free_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_free_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_free_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fscanf_elem_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fscanf_elem_t_default_instance_;
    new (ptr) ::libcall_types::fscanf_elem_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fscanf_elem_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fscanf_elem_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_fscanf_elem_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fscanf_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fscanf_pol_default_instance_;
    new (ptr) ::libcall_types::fscanf_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fscanf_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fscanf_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_fscanf_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fscanf_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fscanf_t_default_instance_;
    new (ptr) ::libcall_types::fscanf_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fscanf_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fscanf_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_fscanf_t_libcall_2eproto}, {
      &scc_info_fscanf_elem_t_libcall_2eproto.base,}};

static void InitDefaultsscc_info_fstat_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fstat_pol_default_instance_;
    new (ptr) ::libcall_types::fstat_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fstat_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fstat_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_fstat_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fstat_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fstat_t_default_instance_;
    new (ptr) ::libcall_types::fstat_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fstat_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fstat_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_fstat_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_fxstat64_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fxstat64_pol_default_instance_;
    new (ptr) ::libcall_types::fxstat64_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fxstat64_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_fxstat64_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_fxstat64_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_fxstat64_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_fxstat64_t_default_instance_;
    new (ptr) ::libcall_types::fxstat64_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::fxstat64_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fxstat64_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_fxstat64_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_generic_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_generic_pol_default_instance_;
    new (ptr) ::libcall_types::generic_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::generic_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_generic_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_generic_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_generic_t_default_instance_;
    new (ptr) ::libcall_types::generic_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::generic_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_generic_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_gethostname_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_gethostname_pol_default_instance_;
    new (ptr) ::libcall_types::gethostname_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::gethostname_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_gethostname_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_gethostname_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_gethostname_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_gethostname_t_default_instance_;
    new (ptr) ::libcall_types::gethostname_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::gethostname_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_gethostname_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_gethostname_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_getmainargs_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_getmainargs_pol_default_instance_;
    new (ptr) ::libcall_types::getmainargs_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::getmainargs_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmainargs_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_getmainargs_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_getmainargs_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_getmainargs_t_default_instance_;
    new (ptr) ::libcall_types::getmainargs_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::getmainargs_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmainargs_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_getmainargs_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_getmodulehandle_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_getmodulehandle_pol_default_instance_;
    new (ptr) ::libcall_types::getmodulehandle_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::getmodulehandle_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmodulehandle_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_getmodulehandle_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_getmodulehandle_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_getmodulehandle_t_default_instance_;
    new (ptr) ::libcall_types::getmodulehandle_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::getmodulehandle_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getmodulehandle_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_getmodulehandle_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_getprocaddress_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_getprocaddress_pol_default_instance_;
    new (ptr) ::libcall_types::getprocaddress_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::getprocaddress_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getprocaddress_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_getprocaddress_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_getprocaddress_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_getprocaddress_t_default_instance_;
    new (ptr) ::libcall_types::getprocaddress_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::getprocaddress_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_getprocaddress_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_getprocaddress_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_libcall_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_libcall_pol_default_instance_;
    new (ptr) ::libcall_types::libcall_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::libcall_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_libcall_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, InitDefaultsscc_info_libcall_pol_libcall_2eproto}, {
      &scc_info_strcpy_pol_libcall_2eproto.base,
      &scc_info_printf_pol_libcall_2eproto.base,
      &scc_info_atoi_pol_libcall_2eproto.base,
      &scc_info_malloc_pol_libcall_2eproto.base,
      &scc_info_getmodulehandle_pol_libcall_2eproto.base,
      &scc_info_getprocaddress_pol_libcall_2eproto.base,
      &scc_info_getmainargs_pol_libcall_2eproto.base,
      &scc_info_gethostname_pol_libcall_2eproto.base,
      &scc_info_free_pol_libcall_2eproto.base,
      &scc_info_memcpy_pol_libcall_2eproto.base,
      &scc_info_memset_pol_libcall_2eproto.base,
      &scc_info_fgetc_pol_libcall_2eproto.base,
      &scc_info_read_pol_libcall_2eproto.base,
      &scc_info_strchr_pol_libcall_2eproto.base,
      &scc_info_exit_pol_libcall_2eproto.base,
      &scc_info_strcmp_pol_libcall_2eproto.base,
      &scc_info_ctype_b_loc_pol_libcall_2eproto.base,
      &scc_info_fscanf_pol_libcall_2eproto.base,
      &scc_info_strncpy_pol_libcall_2eproto.base,
      &scc_info_fstat_pol_libcall_2eproto.base,
      &scc_info_realloc_pol_libcall_2eproto.base,
      &scc_info_mmap_pol_libcall_2eproto.base,
      &scc_info_qsort_pol_libcall_2eproto.base,
      &scc_info_bsearch_pol_libcall_2eproto.base,
      &scc_info_open_pol_libcall_2eproto.base,
      &scc_info_lseek_pol_libcall_2eproto.base,
      &scc_info_fread_pol_libcall_2eproto.base,
      &scc_info_strncmp_pol_libcall_2eproto.base,
      &scc_info_memcmp_pol_libcall_2eproto.base,
      &scc_info_fxstat64_pol_libcall_2eproto.base,
      &scc_info_generic_pol_libcall_2eproto.base,}};

static void InitDefaultsscc_info_libcall_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_libcall_t_default_instance_;
    new (ptr) ::libcall_types::libcall_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::libcall_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_libcall_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, InitDefaultsscc_info_libcall_t_libcall_2eproto}, {
      &scc_info_strcpy_t_libcall_2eproto.base,
      &scc_info_printf_t_libcall_2eproto.base,
      &scc_info_atoi_t_libcall_2eproto.base,
      &scc_info_malloc_t_libcall_2eproto.base,
      &scc_info_getmodulehandle_t_libcall_2eproto.base,
      &scc_info_getprocaddress_t_libcall_2eproto.base,
      &scc_info_getmainargs_t_libcall_2eproto.base,
      &scc_info_gethostname_t_libcall_2eproto.base,
      &scc_info_free_t_libcall_2eproto.base,
      &scc_info_memcpy_t_libcall_2eproto.base,
      &scc_info_memset_t_libcall_2eproto.base,
      &scc_info_fgetc_t_libcall_2eproto.base,
      &scc_info_generic_t_libcall_2eproto.base,
      &scc_info_read_t_libcall_2eproto.base,
      &scc_info_strchr_t_libcall_2eproto.base,
      &scc_info_exit_t_libcall_2eproto.base,
      &scc_info_strcmp_t_libcall_2eproto.base,
      &scc_info_ctype_b_loc_t_libcall_2eproto.base,
      &scc_info_fscanf_t_libcall_2eproto.base,
      &scc_info_strncpy_t_libcall_2eproto.base,
      &scc_info_fstat_t_libcall_2eproto.base,
      &scc_info_realloc_t_libcall_2eproto.base,
      &scc_info_mmap_t_libcall_2eproto.base,
      &scc_info_qsort_t_libcall_2eproto.base,
      &scc_info_bsearch_t_libcall_2eproto.base,
      &scc_info_open_t_libcall_2eproto.base,
      &scc_info_lseek_t_libcall_2eproto.base,
      &scc_info_fread_t_libcall_2eproto.base,
      &scc_info_strncmp_t_libcall_2eproto.base,
      &scc_info_memcmp_t_libcall_2eproto.base,
      &scc_info_fxstat64_t_libcall_2eproto.base,}};

static void InitDefaultsscc_info_lseek_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_lseek_pol_default_instance_;
    new (ptr) ::libcall_types::lseek_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::lseek_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_lseek_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_lseek_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_lseek_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_lseek_t_default_instance_;
    new (ptr) ::libcall_types::lseek_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::lseek_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_lseek_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_lseek_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_malloc_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_malloc_pol_default_instance_;
    new (ptr) ::libcall_types::malloc_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::malloc_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_malloc_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_malloc_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_malloc_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_malloc_t_default_instance_;
    new (ptr) ::libcall_types::malloc_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::malloc_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_malloc_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_malloc_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_memcmp_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_memcmp_pol_default_instance_;
    new (ptr) ::libcall_types::memcmp_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::memcmp_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memcmp_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_memcmp_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_memcmp_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_memcmp_t_default_instance_;
    new (ptr) ::libcall_types::memcmp_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::memcmp_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memcmp_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_memcmp_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_memcpy_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_memcpy_pol_default_instance_;
    new (ptr) ::libcall_types::memcpy_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::memcpy_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memcpy_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_memcpy_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_memcpy_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_memcpy_t_default_instance_;
    new (ptr) ::libcall_types::memcpy_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::memcpy_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memcpy_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_memcpy_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_memset_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_memset_pol_default_instance_;
    new (ptr) ::libcall_types::memset_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::memset_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memset_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_memset_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_memset_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_memset_t_default_instance_;
    new (ptr) ::libcall_types::memset_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::memset_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_memset_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_memset_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_mmap_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_mmap_pol_default_instance_;
    new (ptr) ::libcall_types::mmap_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::mmap_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mmap_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_mmap_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_mmap_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_mmap_t_default_instance_;
    new (ptr) ::libcall_types::mmap_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::mmap_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_mmap_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_mmap_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_open_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_open_pol_default_instance_;
    new (ptr) ::libcall_types::open_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::open_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_open_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_open_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_open_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_open_t_default_instance_;
    new (ptr) ::libcall_types::open_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::open_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_open_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_open_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_printf_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_printf_pol_default_instance_;
    new (ptr) ::libcall_types::printf_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::printf_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_printf_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_printf_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_printf_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_printf_t_default_instance_;
    new (ptr) ::libcall_types::printf_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::printf_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_printf_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_printf_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_qsort_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_qsort_pol_default_instance_;
    new (ptr) ::libcall_types::qsort_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::qsort_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_qsort_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_qsort_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_qsort_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_qsort_t_default_instance_;
    new (ptr) ::libcall_types::qsort_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::qsort_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_qsort_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_qsort_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_read_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_read_pol_default_instance_;
    new (ptr) ::libcall_types::read_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::read_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_read_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_read_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_read_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_read_t_default_instance_;
    new (ptr) ::libcall_types::read_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::read_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_read_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_read_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_realloc_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_realloc_pol_default_instance_;
    new (ptr) ::libcall_types::realloc_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::realloc_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_realloc_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_realloc_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_realloc_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_realloc_t_default_instance_;
    new (ptr) ::libcall_types::realloc_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::realloc_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_realloc_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_realloc_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_strchr_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strchr_pol_default_instance_;
    new (ptr) ::libcall_types::strchr_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strchr_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strchr_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_strchr_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_strchr_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strchr_t_default_instance_;
    new (ptr) ::libcall_types::strchr_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strchr_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strchr_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_strchr_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_strcmp_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strcmp_pol_default_instance_;
    new (ptr) ::libcall_types::strcmp_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strcmp_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strcmp_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_strcmp_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_strcmp_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strcmp_t_default_instance_;
    new (ptr) ::libcall_types::strcmp_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strcmp_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strcmp_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_strcmp_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_strcpy_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strcpy_pol_default_instance_;
    new (ptr) ::libcall_types::strcpy_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strcpy_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strcpy_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_strcpy_pol_libcall_2eproto}, {
      &scc_info_memory_pol_common_2eproto.base,}};

static void InitDefaultsscc_info_strcpy_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strcpy_t_default_instance_;
    new (ptr) ::libcall_types::strcpy_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strcpy_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_strcpy_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_strcpy_t_libcall_2eproto}, {
      &scc_info_memory_t_common_2eproto.base,}};

static void InitDefaultsscc_info_strncmp_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strncmp_pol_default_instance_;
    new (ptr) ::libcall_types::strncmp_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strncmp_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncmp_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_strncmp_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_strncmp_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strncmp_t_default_instance_;
    new (ptr) ::libcall_types::strncmp_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strncmp_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncmp_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_strncmp_t_libcall_2eproto}, {}};

static void InitDefaultsscc_info_strncpy_pol_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strncpy_pol_default_instance_;
    new (ptr) ::libcall_types::strncpy_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strncpy_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncpy_pol_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_strncpy_pol_libcall_2eproto}, {}};

static void InitDefaultsscc_info_strncpy_t_libcall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::libcall_types::_strncpy_t_default_instance_;
    new (ptr) ::libcall_types::strncpy_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::libcall_types::strncpy_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_strncpy_t_libcall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_strncpy_t_libcall_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_libcall_2eproto[65];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_libcall_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_libcall_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_libcall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, ident_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, action_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, restrict_addresses_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, strcpy_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, printf_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, atoi_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, malloc_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, getmodulehandle_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, getprocaddress_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, getmainargs_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, gethostname_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, free_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, memcpy_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, memset_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, fgetc_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, read_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, strchr_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, exit_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, strcmp_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, ctype_b_loc_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, fscanf_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, strncpy_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, fstat_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, realloc_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, mmap_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, qsort_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, bsearch_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, open_stub_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, lseek_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, fread_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, strncmp_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, memcmp_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, fxstat64_),
  offsetof(::libcall_types::libcall_polDefaultTypeInternal, generic_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_pol, libcall_cnt_),
  0,
  2,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, func_addr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, func_name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, is_traced_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, ident_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, strcpy_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, printf_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, atoi_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, malloc_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, getmodulehandle_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, getprocaddress_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, getmainargs_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, gethostname_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, free_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, memcpy_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, memset_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, fgetc_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, generic_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, read_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, strchr_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, exit_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, strcmp_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, ctype_b_loc_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, fscanf_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, strncpy_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, fstat_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, realloc_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, mmap_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, qsort_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, bsearch_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, open_stub_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, lseek_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, fread_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, strncmp_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, memcmp_),
  offsetof(::libcall_types::libcall_tDefaultTypeInternal, fxstat64_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::libcall_t, libcall_cnt_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::libcall_types::generic_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::generic_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::generic_pol, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_pol, table_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_pol, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::exit_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::exit_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_pol, stream_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_pol, elems_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_pol, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_pol, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_pol, buf_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_pol, count_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_pol, ret_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, ptr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, nmemb_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, stream_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_pol, ret_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_pol, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_pol, dst_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_pol, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_pol, s1_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_pol, s2_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_pol, n_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_pol, s1_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_pol, s2_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_pol, n_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_pol, sc_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_pol, c_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_pol, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_pol, dst_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_pol, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_pol, n_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_pol, ptr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_pol, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, addr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, length_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, prot_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, flags_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, offset_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_pol, ret_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_pol, base_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_pol, nmemb_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_pol, compare_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, key_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, base_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, nmemb_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, compare_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_pol, ret_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_pol, pathname_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_pol, flags_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_pol, mode_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_pol, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_pol, dst_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_pol, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_pol, format_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_pol, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_pol, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_pol, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_pol, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_pol, module_name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_pol, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_pol, hmodule_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_pol, proc_name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_pol, ret_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, argc_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, argv_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, env_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, dowildcard_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, startinfo_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_pol, ret_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_pol, name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_pol, namelen_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_pol, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::free_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::free_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::free_pol, ptr_),
  0,
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_pol, dest_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_pol, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_pol, s_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_pol, c_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_pol, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_pol, stream_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_pol, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_pol, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_pol, offset_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_pol, whence_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_pol, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::exit_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::exit_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::generic_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::generic_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::generic_t, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_elem_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_elem_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_elem_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_elem_t, type_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_elem_t, addr_),
  offsetof(::libcall_types::fscanf_elem_tDefaultTypeInternal, value_dec_),
  offsetof(::libcall_types::fscanf_elem_tDefaultTypeInternal, value_string_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_elem_t, fscanf_cnt_),
  1,
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_t, stream_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_t, elems_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fscanf_t, ret_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_t, table_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::ctype_b_loc_t, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_t, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_t, buf_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_t, count_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::read_t, ret_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, ptr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, nmemb_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, stream_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fread_t, ret_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_t, s_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_t, c_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_t, size_max_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strchr_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_t, dst_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_t, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_t, n_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncpy_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_t, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_t, buf_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fstat_t, ret_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_t, vers_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_t, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_t, buf_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fxstat64_t, ret_),
  1,
  2,
  0,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_t, ptr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::realloc_t, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, addr_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, length_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, prot_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, flags_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, offset_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::mmap_t, ret_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_t, base_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_t, nmemb_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::qsort_t, compare_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, key_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, base_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, nmemb_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, compare_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::bsearch_t, ret_),
  0,
  1,
  3,
  4,
  5,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_t, pathname_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_t, flags_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_t, mode_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::open_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_t, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_t, dst_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcpy_t, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, s1_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, s2_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, size_max_s1_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, size_max_s2_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strcmp_t, ret_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_t, s1_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_t, s2_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_t, n_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::strncmp_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_t, s1_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_t, s2_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_t, n_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcmp_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_t, format_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::printf_t, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_t, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::atoi_t, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::malloc_t, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_t, module_name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmodulehandle_t, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_t, hmodule_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_t, proc_name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getprocaddress_t, ret_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, argc_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, argv_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, env_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, dowildcard_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, startinfo_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::getmainargs_t, ret_),
  0,
  1,
  2,
  4,
  3,
  5,
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_t, name_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_t, namelen_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::gethostname_t, ret_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::libcall_types::free_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::free_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::free_t, ptr_),
  0,
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_t, dest_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_t, src_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memcpy_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_t, s_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_t, c_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_t, size_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::memset_t, ret_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_t, stream_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::fgetc_t, ret_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_t, fd_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_t, offset_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_t, whence_),
  PROTOBUF_FIELD_OFFSET(::libcall_types::lseek_t, ret_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 41, sizeof(::libcall_types::libcall_pol)},
  { 76, 117, sizeof(::libcall_types::libcall_t)},
  { 152, 158, sizeof(::libcall_types::generic_pol)},
  { 159, 166, sizeof(::libcall_types::ctype_b_loc_pol)},
  { 168, 173, sizeof(::libcall_types::exit_pol)},
  { 173, 181, sizeof(::libcall_types::fscanf_pol)},
  { 184, 193, sizeof(::libcall_types::read_pol)},
  { 197, 207, sizeof(::libcall_types::fread_pol)},
  { 212, 220, sizeof(::libcall_types::strcmp_pol)},
  { 223, 232, sizeof(::libcall_types::strncmp_pol)},
  { 236, 245, sizeof(::libcall_types::memcmp_pol)},
  { 249, 257, sizeof(::libcall_types::strchr_pol)},
  { 260, 269, sizeof(::libcall_types::strncpy_pol)},
  { 273, 278, sizeof(::libcall_types::fstat_pol)},
  { 278, 283, sizeof(::libcall_types::fxstat64_pol)},
  { 283, 291, sizeof(::libcall_types::realloc_pol)},
  { 294, 306, sizeof(::libcall_types::mmap_pol)},
  { 313, 322, sizeof(::libcall_types::qsort_pol)},
  { 326, 337, sizeof(::libcall_types::bsearch_pol)},
  { 343, 352, sizeof(::libcall_types::open_pol)},
  { 356, 364, sizeof(::libcall_types::strcpy_pol)},
  { 367, 374, sizeof(::libcall_types::printf_pol)},
  { 376, 383, sizeof(::libcall_types::atoi_pol)},
  { 385, 392, sizeof(::libcall_types::malloc_pol)},
  { 394, 401, sizeof(::libcall_types::getmodulehandle_pol)},
  { 403, 411, sizeof(::libcall_types::getprocaddress_pol)},
  { 414, 425, sizeof(::libcall_types::getmainargs_pol)},
  { 431, 439, sizeof(::libcall_types::gethostname_pol)},
  { 442, 448, sizeof(::libcall_types::free_pol)},
  { 449, 458, sizeof(::libcall_types::memcpy_pol)},
  { 462, 471, sizeof(::libcall_types::memset_pol)},
  { 475, 482, sizeof(::libcall_types::fgetc_pol)},
  { 484, 493, sizeof(::libcall_types::lseek_pol)},
  { 497, 502, sizeof(::libcall_types::exit_t)},
  { 502, 508, sizeof(::libcall_types::generic_t)},
  { 509, 519, sizeof(::libcall_types::fscanf_elem_t)},
  { 523, 531, sizeof(::libcall_types::fscanf_t)},
  { 534, 541, sizeof(::libcall_types::ctype_b_loc_t)},
  { 543, 552, sizeof(::libcall_types::read_t)},
  { 556, 566, sizeof(::libcall_types::fread_t)},
  { 571, 580, sizeof(::libcall_types::strchr_t)},
  { 584, 593, sizeof(::libcall_types::strncpy_t)},
  { 597, 605, sizeof(::libcall_types::fstat_t)},
  { 608, 617, sizeof(::libcall_types::fxstat64_t)},
  { 621, 629, sizeof(::libcall_types::realloc_t)},
  { 632, 644, sizeof(::libcall_types::mmap_t)},
  { 651, 660, sizeof(::libcall_types::qsort_t)},
  { 664, 675, sizeof(::libcall_types::bsearch_t)},
  { 681, 690, sizeof(::libcall_types::open_t)},
  { 694, 702, sizeof(::libcall_types::strcpy_t)},
  { 705, 715, sizeof(::libcall_types::strcmp_t)},
  { 720, 729, sizeof(::libcall_types::strncmp_t)},
  { 733, 742, sizeof(::libcall_types::memcmp_t)},
  { 746, 753, sizeof(::libcall_types::printf_t)},
  { 755, 762, sizeof(::libcall_types::atoi_t)},
  { 764, 771, sizeof(::libcall_types::malloc_t)},
  { 773, 780, sizeof(::libcall_types::getmodulehandle_t)},
  { 782, 790, sizeof(::libcall_types::getprocaddress_t)},
  { 793, 804, sizeof(::libcall_types::getmainargs_t)},
  { 810, 818, sizeof(::libcall_types::gethostname_t)},
  { 821, 827, sizeof(::libcall_types::free_t)},
  { 828, 837, sizeof(::libcall_types::memcpy_t)},
  { 841, 850, sizeof(::libcall_types::memset_t)},
  { 854, 861, sizeof(::libcall_types::fgetc_t)},
  { 863, 872, sizeof(::libcall_types::lseek_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_libcall_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_libcall_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_generic_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_ctype_b_loc_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_exit_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fscanf_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_read_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fread_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strcmp_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strncmp_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_memcmp_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strchr_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strncpy_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fstat_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fxstat64_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_realloc_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_mmap_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_qsort_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_bsearch_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_open_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strcpy_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_printf_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_atoi_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_malloc_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_getmodulehandle_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_getprocaddress_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_getmainargs_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_gethostname_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_free_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_memcpy_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_memset_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fgetc_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_lseek_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_exit_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_generic_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fscanf_elem_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fscanf_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_ctype_b_loc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_read_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fread_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strchr_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strncpy_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fstat_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fxstat64_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_realloc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_mmap_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_qsort_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_bsearch_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_open_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strcpy_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strcmp_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_strncmp_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_memcmp_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_printf_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_atoi_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_malloc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_getmodulehandle_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_getprocaddress_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_getmainargs_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_gethostname_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_free_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_memcpy_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_memset_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_fgetc_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::libcall_types::_lseek_t_default_instance_),
};

const char descriptor_table_protodef_libcall_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rlibcall.proto\022\rlibcall_types\032\014common.p"
  "roto\"\312\014\n\013libcall_pol\022\014\n\004name\030\001 \002(\t\0220\n\005id"
  "ent\030\002 \001(\0162\030.libcall_types.lib_ident:\007GEN"
  "ERIC\022,\n\006action\030\003 \001(\0162\026.common.tracing_ac"
  "tion:\004SKIP\022\032\n\022restrict_addresses\030\004 \003(\004\022+"
  "\n\006strcpy\030\005 \001(\0132\031.libcall_types.strcpy_po"
  "lH\000\022+\n\006printf\030\006 \001(\0132\031.libcall_types.prin"
  "tf_polH\000\022\'\n\004atoi\030\007 \001(\0132\027.libcall_types.a"
  "toi_polH\000\022+\n\006malloc\030\010 \001(\0132\031.libcall_type"
  "s.malloc_polH\000\022=\n\017getmodulehandle\030\t \001(\0132"
  "\".libcall_types.getmodulehandle_polH\000\022;\n"
  "\016getprocaddress\030\n \001(\0132!.libcall_types.ge"
  "tprocaddress_polH\000\0225\n\013getmainargs\030\013 \001(\0132"
  "\036.libcall_types.getmainargs_polH\000\0225\n\013get"
  "hostname\030\014 \001(\0132\036.libcall_types.gethostna"
  "me_polH\000\022\'\n\004free\030\r \001(\0132\027.libcall_types.f"
  "ree_polH\000\022+\n\006memcpy\030\016 \001(\0132\031.libcall_type"
  "s.memcpy_polH\000\022+\n\006memset\030\017 \001(\0132\031.libcall"
  "_types.memset_polH\000\022)\n\005fgetc\030\020 \001(\0132\030.lib"
  "call_types.fgetc_polH\000\022\'\n\004read\030\021 \001(\0132\027.l"
  "ibcall_types.read_polH\000\022+\n\006strchr\030\022 \001(\0132"
  "\031.libcall_types.strchr_polH\000\022\'\n\004exit\030\023 \001"
  "(\0132\027.libcall_types.exit_polH\000\022+\n\006strcmp\030"
  "\024 \001(\0132\031.libcall_types.strcmp_polH\000\0225\n\013ct"
  "ype_b_loc\030\026 \001(\0132\036.libcall_types.ctype_b_"
  "loc_polH\000\022+\n\006fscanf\030\027 \001(\0132\031.libcall_type"
  "s.fscanf_polH\000\022-\n\007strncpy\030\030 \001(\0132\032.libcal"
  "l_types.strncpy_polH\000\022)\n\005fstat\030\031 \001(\0132\030.l"
  "ibcall_types.fstat_polH\000\022-\n\007realloc\030\032 \001("
  "\0132\032.libcall_types.realloc_polH\000\022\'\n\004mmap\030"
  "\033 \001(\0132\027.libcall_types.mmap_polH\000\022)\n\005qsor"
  "t\030\034 \001(\0132\030.libcall_types.qsort_polH\000\022-\n\007b"
  "search\030\035 \001(\0132\032.libcall_types.bsearch_pol"
  "H\000\022,\n\topen_stub\030\036 \001(\0132\027.libcall_types.op"
  "en_polH\000\022)\n\005lseek\030\037 \001(\0132\030.libcall_types."
  "lseek_polH\000\022)\n\005fread\030  \001(\0132\030.libcall_typ"
  "es.fread_polH\000\022-\n\007strncmp\030! \001(\0132\032.libcal"
  "l_types.strncmp_polH\000\022+\n\006memcmp\030\" \001(\0132\031."
  "libcall_types.memcmp_polH\000\022/\n\010fxstat64\030#"
  " \001(\0132\033.libcall_types.fxstat64_polH\000\022-\n\007g"
  "eneric\0302 \001(\0132\032.libcall_types.generic_pol"
  "H\000B\r\n\013libcall_cnt\"\342\013\n\tlibcall_t\022\021\n\tfunc_"
  "addr\030\001 \002(\004\022\021\n\tfunc_name\030\002 \002(\t\022\021\n\tis_trac"
  "ed\030\003 \002(\010\022\'\n\005ident\030\004 \002(\0162\030.libcall_types."
  "lib_ident\022)\n\006strcpy\030\005 \001(\0132\027.libcall_type"
  "s.strcpy_tH\000\022)\n\006printf\030\006 \001(\0132\027.libcall_t"
  "ypes.printf_tH\000\022%\n\004atoi\030\007 \001(\0132\025.libcall_"
  "types.atoi_tH\000\022)\n\006malloc\030\010 \001(\0132\027.libcall"
  "_types.malloc_tH\000\022;\n\017getmodulehandle\030\t \001"
  "(\0132 .libcall_types.getmodulehandle_tH\000\0229"
  "\n\016getprocaddress\030\n \001(\0132\037.libcall_types.g"
  "etprocaddress_tH\000\0223\n\013getmainargs\030\013 \001(\0132\034"
  ".libcall_types.getmainargs_tH\000\0223\n\013gethos"
  "tname\030\014 \001(\0132\034.libcall_types.gethostname_"
  "tH\000\022%\n\004free\030\r \001(\0132\025.libcall_types.free_t"
  "H\000\022)\n\006memcpy\030\016 \001(\0132\027.libcall_types.memcp"
  "y_tH\000\022)\n\006memset\030\017 \001(\0132\027.libcall_types.me"
  "mset_tH\000\022\'\n\005fgetc\030\020 \001(\0132\026.libcall_types."
  "fgetc_tH\000\022+\n\007generic\030\021 \001(\0132\030.libcall_typ"
  "es.generic_tH\000\022%\n\004read\030\022 \001(\0132\025.libcall_t"
  "ypes.read_tH\000\022)\n\006strchr\030\023 \001(\0132\027.libcall_"
  "types.strchr_tH\000\022%\n\004exit\030\024 \001(\0132\025.libcall"
  "_types.exit_tH\000\022)\n\006strcmp\030\025 \001(\0132\027.libcal"
  "l_types.strcmp_tH\000\0223\n\013ctype_b_loc\030\027 \001(\0132"
  "\034.libcall_types.ctype_b_loc_tH\000\022)\n\006fscan"
  "f\030\030 \001(\0132\027.libcall_types.fscanf_tH\000\022+\n\007st"
  "rncpy\030\031 \001(\0132\030.libcall_types.strncpy_tH\000\022"
  "\'\n\005fstat\030\032 \001(\0132\026.libcall_types.fstat_tH\000"
  "\022+\n\007realloc\030\033 \001(\0132\030.libcall_types.reallo"
  "c_tH\000\022%\n\004mmap\030\034 \001(\0132\025.libcall_types.mmap"
  "_tH\000\022\'\n\005qsort\030\035 \001(\0132\026.libcall_types.qsor"
  "t_tH\000\022+\n\007bsearch\030\036 \001(\0132\030.libcall_types.b"
  "search_tH\000\022*\n\topen_stub\030\037 \001(\0132\025.libcall_"
  "types.open_tH\000\022\'\n\005lseek\030  \001(\0132\026.libcall_"
  "types.lseek_tH\000\022\'\n\005fread\030! \001(\0132\026.libcall"
  "_types.fread_tH\000\022+\n\007strncmp\030\" \001(\0132\030.libc"
  "all_types.strncmp_tH\000\022)\n\006memcmp\030# \001(\0132\027."
  "libcall_types.memcmp_tH\000\022-\n\010fxstat64\030$ \001"
  "(\0132\031.libcall_types.fxstat64_tH\000B\r\n\013libca"
  "ll_cnt\"*\n\013generic_pol\022\033\n\003ret\030\001 \002(\0162\016.com"
  "mon.action\"Q\n\017ctype_b_loc_pol\022!\n\005table\030\001"
  " \002(\0132\022.common.memory_pol\022\033\n\003ret\030\002 \002(\0162\016."
  "common.action\"\n\n\010exit_pol\"h\n\nfscanf_pol\022"
  "\036\n\006stream\030\001 \002(\0162\016.common.action\022\035\n\005elems"
  "\030\002 \002(\0162\016.common.action\022\033\n\003ret\030\003 \002(\0162\016.co"
  "mmon.action\"\203\001\n\010read_pol\022\032\n\002fd\030\001 \002(\0162\016.c"
  "ommon.action\022\037\n\003buf\030\002 \002(\0132\022.common.memor"
  "y_pol\022\035\n\005count\030\003 \002(\0162\016.common.action\022\033\n\003"
  "ret\030\004 \002(\0162\016.common.action\"\246\001\n\tfread_pol\022"
  "\037\n\003ptr\030\001 \002(\0132\022.common.memory_pol\022\034\n\004size"
  "\030\002 \002(\0162\016.common.action\022\035\n\005nmemb\030\003 \002(\0162\016."
  "common.action\022\036\n\006stream\030\004 \002(\0162\016.common.a"
  "ction\022\033\n\003ret\030\005 \002(\0162\016.common.action\"k\n\nst"
  "rcmp_pol\022\037\n\003src\030\001 \002(\0132\022.common.memory_po"
  "l\022\037\n\003dst\030\002 \002(\0132\022.common.memory_pol\022\033\n\003re"
  "t\030\003 \002(\0162\016.common.action\"}\n\013strncmp_pol\022\032"
  "\n\002s1\030\001 \002(\0162\016.common.action\022\032\n\002s2\030\002 \002(\0162\016"
  ".common.action\022\031\n\001n\030\003 \002(\0162\016.common.actio"
  "n\022\033\n\003ret\030\004 \002(\0162\016.common.action\"|\n\nmemcmp"
  "_pol\022\032\n\002s1\030\001 \002(\0162\016.common.action\022\032\n\002s2\030\002"
  " \002(\0162\016.common.action\022\031\n\001n\030\003 \002(\0162\016.common"
  ".action\022\033\n\003ret\030\004 \002(\0162\016.common.action\"h\n\n"
  "strchr_pol\022\036\n\002sc\030\001 \002(\0132\022.common.memory_p"
  "ol\022\035\n\001c\030\002 \002(\0132\022.common.memory_pol\022\033\n\003ret"
  "\030\003 \002(\0162\016.common.action\"\177\n\013strncpy_pol\022\033\n"
  "\003dst\030\001 \002(\0162\016.common.action\022\033\n\003src\030\002 \002(\0162"
  "\016.common.action\022\031\n\001n\030\003 \002(\0162\016.common.acti"
  "on\022\033\n\003ret\030\004 \002(\0162\016.common.action\"\013\n\tfstat"
  "_pol\"\016\n\014fxstat64_pol\"e\n\013realloc_pol\022\033\n\003p"
  "tr\030\001 \002(\0162\016.common.action\022\034\n\004size\030\002 \002(\0162\016"
  ".common.action\022\033\n\003ret\030\003 \002(\0162\016.common.act"
  "ion\"\342\001\n\010mmap_pol\022\034\n\004addr\030\001 \002(\0162\016.common."
  "action\022\036\n\006length\030\002 \002(\0162\016.common.action\022\034"
  "\n\004prot\030\003 \002(\0162\016.common.action\022\035\n\005flags\030\004 "
  "\002(\0162\016.common.action\022\032\n\002fd\030\005 \002(\0162\016.common"
  ".action\022\036\n\006offset\030\006 \002(\0162\016.common.action\022"
  "\037\n\003ret\030\007 \002(\0132\022.common.memory_pol\"\213\001\n\tqso"
  "rt_pol\022 \n\004base\030\001 \002(\0132\022.common.memory_pol"
  "\022\035\n\005nmemb\030\002 \002(\0162\016.common.action\022\034\n\004size\030"
  "\003 \002(\0162\016.common.action\022\037\n\007compare\030\004 \002(\0162\016"
  ".common.action\"\317\001\n\013bsearch_pol\022\037\n\003key\030\001 "
  "\002(\0132\022.common.memory_pol\022 \n\004base\030\002 \002(\0132\022."
  "common.memory_pol\022\035\n\005nmemb\030\003 \002(\0162\016.commo"
  "n.action\022\034\n\004size\030\004 \002(\0162\016.common.action\022\037"
  "\n\007compare\030\005 \002(\0162\016.common.action\022\037\n\003ret\030\006"
  " \002(\0132\022.common.memory_pol\"\212\001\n\010open_pol\022$\n"
  "\010pathname\030\001 \002(\0132\022.common.memory_pol\022\035\n\005f"
  "lags\030\002 \002(\0162\016.common.action\022\034\n\004mode\030\003 \002(\016"
  "2\016.common.action\022\033\n\003ret\030\004 \002(\0162\016.common.a"
  "ction\"k\n\nstrcpy_pol\022\037\n\003src\030\001 \002(\0132\022.commo"
  "n.memory_pol\022\037\n\003dst\030\002 \002(\0132\022.common.memor"
  "y_pol\022\033\n\003ret\030\003 \002(\0162\016.common.action\"M\n\npr"
  "intf_pol\022\"\n\006format\030\001 \002(\0132\022.common.memory"
  "_pol\022\033\n\003ret\030\002 \002(\0162\016.common.action\"H\n\010ato"
  "i_pol\022\037\n\003src\030\001 \002(\0132\022.common.memory_pol\022\033"
  "\n\003ret\030\003 \002(\0162\016.common.action\"G\n\nmalloc_po"
  "l\022\034\n\004size\030\001 \002(\0162\016.common.action\022\033\n\003ret\030\002"
  " \002(\0162\016.common.action\"[\n\023getmodulehandle_"
  "pol\022\'\n\013module_name\030\001 \002(\0132\022.common.memory"
  "_pol\022\033\n\003ret\030\002 \002(\0162\016.common.action\"y\n\022get"
  "procaddress_pol\022\037\n\007hmodule\030\001 \002(\0162\016.commo"
  "n.action\022%\n\tproc_name\030\002 \002(\0132\022.common.mem"
  "ory_pol\022\033\n\003ret\030\003 \002(\0162\016.common.action\"\336\001\n"
  "\017getmainargs_pol\022 \n\004argc\030\001 \002(\0132\022.common."
  "memory_pol\022 \n\004argv\030\002 \002(\0132\022.common.memory"
  "_pol\022\037\n\003env\030\003 \002(\0132\022.common.memory_pol\022\"\n"
  "\ndowildcard\030\004 \002(\0162\016.common.action\022%\n\tsta"
  "rtinfo\030\005 \002(\0132\022.common.memory_pol\022\033\n\003ret\030"
  "\006 \002(\0162\016.common.action\"q\n\017gethostname_pol"
  "\022 \n\004name\030\001 \002(\0132\022.common.memory_pol\022\037\n\007na"
  "melen\030\002 \002(\0162\016.common.action\022\033\n\003ret\030\003 \002(\016"
  "2\016.common.action\"\'\n\010free_pol\022\033\n\003ptr\030\001 \002("
  "\0162\016.common.action\"\212\001\n\nmemcpy_pol\022 \n\004dest"
  "\030\001 \002(\0132\022.common.memory_pol\022\037\n\003src\030\002 \002(\0132"
  "\022.common.memory_pol\022\034\n\004size\030\003 \002(\0162\016.comm"
  "on.action\022\033\n\003ret\030\004 \002(\0162\016.common.action\"\201"
  "\001\n\nmemset_pol\022\035\n\001s\030\001 \002(\0132\022.common.memory"
  "_pol\022\031\n\001c\030\002 \002(\0162\016.common.action\022\034\n\004size\030"
  "\003 \002(\0162\016.common.action\022\033\n\003ret\030\004 \002(\0162\016.com"
  "mon.action\"H\n\tfgetc_pol\022\036\n\006stream\030\001 \002(\0162"
  "\016.common.action\022\033\n\003ret\030\002 \002(\0162\016.common.ac"
  "tion\"\204\001\n\tlseek_pol\022\032\n\002fd\030\001 \002(\0162\016.common."
  "action\022\036\n\006offset\030\002 \002(\0162\016.common.action\022\036"
  "\n\006whence\030\003 \002(\0162\016.common.action\022\033\n\003ret\030\004 "
  "\002(\0162\016.common.action\"\010\n\006exit_t\"\030\n\tgeneric"
  "_t\022\013\n\003ret\030\001 \002(\004\"\202\001\n\rfscanf_elem_t\022(\n\004typ"
  "e\030\001 \002(\0162\032.libcall_types.fscanf_enum\022\014\n\004a"
  "ddr\030\002 \002(\004\022\023\n\tvalue_dec\030\003 \001(\004H\000\022\026\n\014value_"
  "string\030\004 \001(\tH\000B\014\n\nfscanf_cnt\"T\n\010fscanf_t"
  "\022\016\n\006stream\030\001 \002(\004\022+\n\005elems\030\002 \003(\0132\034.libcal"
  "l_types.fscanf_elem_t\022\013\n\003ret\030\003 \002(\004\"=\n\rct"
  "ype_b_loc_t\022\037\n\005table\030\001 \002(\0132\020.common.memo"
  "ry_t\022\013\n\003ret\030\002 \002(\004\"O\n\006read_t\022\n\n\002fd\030\001 \002(\004\022"
  "\035\n\003buf\030\002 \002(\0132\020.common.memory_t\022\r\n\005count\030"
  "\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"b\n\007fread_t\022\035\n\003ptr\030\001 \002"
  "(\0132\020.common.memory_t\022\014\n\004size\030\002 \002(\004\022\r\n\005nm"
  "emb\030\003 \002(\004\022\016\n\006stream\030\004 \002(\004\022\013\n\003ret\030\005 \002(\004\"\?"
  "\n\010strchr_t\022\t\n\001s\030\001 \002(\004\022\t\n\001c\030\002 \002(\004\022\020\n\010size"
  "_max\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"=\n\tstrncpy_t\022\013\n\003"
  "dst\030\001 \002(\004\022\013\n\003src\030\002 \002(\004\022\t\n\001n\030\003 \002(\004\022\013\n\003ret"
  "\030\004 \002(\004\"A\n\007fstat_t\022\n\n\002fd\030\001 \002(\004\022\035\n\003buf\030\002 \002"
  "(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002(\004\"R\n\nfxs"
  "tat64_t\022\014\n\004vers\030\001 \002(\004\022\n\n\002fd\030\002 \002(\004\022\035\n\003buf"
  "\030\003 \002(\0132\020.common.memory_t\022\013\n\003ret\030\004 \002(\004\"3\n"
  "\trealloc_t\022\013\n\003ptr\030\001 \002(\004\022\014\n\004size\030\002 \002(\004\022\013\n"
  "\003ret\030\003 \002(\004\"~\n\006mmap_t\022\014\n\004addr\030\001 \002(\004\022\016\n\006le"
  "ngth\030\002 \002(\004\022\014\n\004prot\030\003 \002(\004\022\r\n\005flags\030\004 \002(\004\022"
  "\n\n\002fd\030\005 \002(\004\022\016\n\006offset\030\006 \002(\004\022\035\n\003ret\030\007 \002(\013"
  "2\020.common.memory_t\"W\n\007qsort_t\022\036\n\004base\030\001 "
  "\002(\0132\020.common.memory_t\022\r\n\005nmemb\030\002 \002(\004\022\014\n\004"
  "size\030\003 \002(\004\022\017\n\007compare\030\004 \002(\004\"\227\001\n\tbsearch_"
  "t\022\035\n\003key\030\001 \002(\0132\020.common.memory_t\022\036\n\004base"
  "\030\002 \002(\0132\020.common.memory_t\022\r\n\005nmemb\030\003 \002(\004\022"
  "\014\n\004size\030\004 \002(\004\022\017\n\007compare\030\005 \002(\004\022\035\n\003ret\030\006 "
  "\002(\0132\020.common.memory_t\"V\n\006open_t\022\"\n\010pathn"
  "ame\030\001 \002(\0132\020.common.memory_t\022\r\n\005flags\030\003 \002"
  "(\004\022\014\n\004mode\030\004 \002(\004\022\013\n\003ret\030\005 \002(\004\"U\n\010strcpy_"
  "t\022\035\n\003src\030\001 \002(\0132\020.common.memory_t\022\035\n\003dst\030"
  "\002 \002(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002(\004\"Y\n\010"
  "strcmp_t\022\n\n\002s1\030\001 \002(\004\022\n\n\002s2\030\002 \002(\004\022\023\n\013size"
  "_max_s1\030\003 \002(\004\022\023\n\013size_max_s2\030\004 \002(\004\022\013\n\003re"
  "t\030\005 \002(\004\";\n\tstrncmp_t\022\n\n\002s1\030\001 \002(\004\022\n\n\002s2\030\002"
  " \002(\004\022\t\n\001n\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\":\n\010memcmp_t"
  "\022\n\n\002s1\030\001 \002(\004\022\n\n\002s2\030\002 \002(\004\022\t\n\001n\030\003 \002(\004\022\013\n\003r"
  "et\030\004 \002(\004\"9\n\010printf_t\022 \n\006format\030\001 \002(\0132\020.c"
  "ommon.memory_t\022\013\n\003ret\030\002 \002(\004\"4\n\006atoi_t\022\035\n"
  "\003src\030\001 \002(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002("
  "\004\"%\n\010malloc_t\022\014\n\004size\030\001 \002(\004\022\013\n\003ret\030\002 \002(\004"
  "\"G\n\021getmodulehandle_t\022%\n\013module_name\030\001 \002"
  "(\0132\020.common.memory_t\022\013\n\003ret\030\002 \002(\004\"U\n\020get"
  "procaddress_t\022\017\n\007hmodule\030\001 \002(\004\022#\n\tproc_n"
  "ame\030\002 \002(\0132\020.common.memory_t\022\013\n\003ret\030\003 \002(\004"
  "\"\264\001\n\rgetmainargs_t\022\036\n\004argc\030\001 \002(\0132\020.commo"
  "n.memory_t\022\036\n\004argv\030\002 \002(\0132\020.common.memory"
  "_t\022\035\n\003env\030\003 \002(\0132\020.common.memory_t\022\022\n\ndow"
  "ildcard\030\004 \002(\004\022#\n\tstartinfo\030\005 \002(\0132\020.commo"
  "n.memory_t\022\013\n\003ret\030\006 \002(\004\"M\n\rgethostname_t"
  "\022\036\n\004name\030\001 \002(\0132\020.common.memory_t\022\017\n\007name"
  "len\030\002 \002(\004\022\013\n\003ret\030\003 \002(\004\"\025\n\006free_t\022\013\n\003ptr\030"
  "\001 \002(\004\"d\n\010memcpy_t\022\036\n\004dest\030\001 \002(\0132\020.common"
  ".memory_t\022\035\n\003src\030\002 \002(\0132\020.common.memory_t"
  "\022\014\n\004size\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"M\n\010memset_t\022"
  "\033\n\001s\030\001 \002(\0132\020.common.memory_t\022\t\n\001c\030\002 \002(\004\022"
  "\014\n\004size\030\003 \002(\004\022\013\n\003ret\030\004 \002(\004\"&\n\007fgetc_t\022\016\n"
  "\006stream\030\001 \002(\004\022\013\n\003ret\030\002 \002(\004\"B\n\007lseek_t\022\n\n"
  "\002fd\030\001 \002(\004\022\016\n\006offset\030\002 \002(\004\022\016\n\006whence\030\003 \002("
  "\004\022\013\n\003ret\030\004 \002(\004*\265\003\n\tlib_ident\022\013\n\007INVALID\020"
  "\000\022\n\n\006PRINTF\020\001\022\n\n\006STRCPY\020\002\022\010\n\004ATOI\020\003\022\n\n\006M"
  "ALLOC\020\004\022\010\n\004FREE\020\005\022\n\n\006MEMCPY\020\006\022\n\n\006MEMSET\020"
  "\007\022\t\n\005FGETC\020\010\022\010\n\004READ\020\t\022\n\n\006STRCHR\020\n\022\010\n\004EX"
  "IT\020\013\022\n\n\006STRCMP\020\014\022\017\n\013CTYPE_B_LOC\020\r\022\n\n\006FSC"
  "ANF\020\016\022\013\n\007STRRCHR\020\017\022\013\n\007STRNCPY\020\020\022\t\n\005FSTAT"
  "\020\021\022\013\n\007REALLOC\020\022\022\010\n\004MMAP\020\023\022\t\n\005QSORT\020\024\022\013\n\007"
  "BSEARCH\020\025\022\r\n\tOPEN_STUB\020\026\022\t\n\005LSEEK\020\027\022\t\n\005F"
  "READ\020\030\022\013\n\007STRNCMP\020\031\022\n\n\006MEMCMP\020\032\022\014\n\010FXSTA"
  "T64\020\033\022\023\n\017GETMODULEHANDLE\020d\022\022\n\016GETPROCADD"
  "RESS\020e\022\017\n\013GETMAINARGS\020f\022\017\n\013GETHOSTNAME\020g"
  "\022\014\n\007GENERIC\020\377\001*\210\001\n\013fscanf_enum\022\005\n\001d\020\000\022\006\n"
  "\002dd\020\001\022\005\n\001i\020\002\022\005\n\001o\020\003\022\005\n\001u\020\004\022\005\n\001x\020\005\022\006\n\002xx\020"
  "\006\022\005\n\001f\020\007\022\005\n\001e\020\010\022\005\n\001g\020\t\022\006\n\002ee\020\n\022\005\n\001a\020\013\022\005\n"
  "\001s\020\014\022\005\n\001c\020\r\022\006\n\002sb\020\016\022\005\n\001p\020\017\022\005\n\001n\020\020"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_libcall_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_libcall_2eproto_sccs[65] = {
  &scc_info_atoi_pol_libcall_2eproto.base,
  &scc_info_atoi_t_libcall_2eproto.base,
  &scc_info_bsearch_pol_libcall_2eproto.base,
  &scc_info_bsearch_t_libcall_2eproto.base,
  &scc_info_ctype_b_loc_pol_libcall_2eproto.base,
  &scc_info_ctype_b_loc_t_libcall_2eproto.base,
  &scc_info_exit_pol_libcall_2eproto.base,
  &scc_info_exit_t_libcall_2eproto.base,
  &scc_info_fgetc_pol_libcall_2eproto.base,
  &scc_info_fgetc_t_libcall_2eproto.base,
  &scc_info_fread_pol_libcall_2eproto.base,
  &scc_info_fread_t_libcall_2eproto.base,
  &scc_info_free_pol_libcall_2eproto.base,
  &scc_info_free_t_libcall_2eproto.base,
  &scc_info_fscanf_elem_t_libcall_2eproto.base,
  &scc_info_fscanf_pol_libcall_2eproto.base,
  &scc_info_fscanf_t_libcall_2eproto.base,
  &scc_info_fstat_pol_libcall_2eproto.base,
  &scc_info_fstat_t_libcall_2eproto.base,
  &scc_info_fxstat64_pol_libcall_2eproto.base,
  &scc_info_fxstat64_t_libcall_2eproto.base,
  &scc_info_generic_pol_libcall_2eproto.base,
  &scc_info_generic_t_libcall_2eproto.base,
  &scc_info_gethostname_pol_libcall_2eproto.base,
  &scc_info_gethostname_t_libcall_2eproto.base,
  &scc_info_getmainargs_pol_libcall_2eproto.base,
  &scc_info_getmainargs_t_libcall_2eproto.base,
  &scc_info_getmodulehandle_pol_libcall_2eproto.base,
  &scc_info_getmodulehandle_t_libcall_2eproto.base,
  &scc_info_getprocaddress_pol_libcall_2eproto.base,
  &scc_info_getprocaddress_t_libcall_2eproto.base,
  &scc_info_libcall_pol_libcall_2eproto.base,
  &scc_info_libcall_t_libcall_2eproto.base,
  &scc_info_lseek_pol_libcall_2eproto.base,
  &scc_info_lseek_t_libcall_2eproto.base,
  &scc_info_malloc_pol_libcall_2eproto.base,
  &scc_info_malloc_t_libcall_2eproto.base,
  &scc_info_memcmp_pol_libcall_2eproto.base,
  &scc_info_memcmp_t_libcall_2eproto.base,
  &scc_info_memcpy_pol_libcall_2eproto.base,
  &scc_info_memcpy_t_libcall_2eproto.base,
  &scc_info_memset_pol_libcall_2eproto.base,
  &scc_info_memset_t_libcall_2eproto.base,
  &scc_info_mmap_pol_libcall_2eproto.base,
  &scc_info_mmap_t_libcall_2eproto.base,
  &scc_info_open_pol_libcall_2eproto.base,
  &scc_info_open_t_libcall_2eproto.base,
  &scc_info_printf_pol_libcall_2eproto.base,
  &scc_info_printf_t_libcall_2eproto.base,
  &scc_info_qsort_pol_libcall_2eproto.base,
  &scc_info_qsort_t_libcall_2eproto.base,
  &scc_info_read_pol_libcall_2eproto.base,
  &scc_info_read_t_libcall_2eproto.base,
  &scc_info_realloc_pol_libcall_2eproto.base,
  &scc_info_realloc_t_libcall_2eproto.base,
  &scc_info_strchr_pol_libcall_2eproto.base,
  &scc_info_strchr_t_libcall_2eproto.base,
  &scc_info_strcmp_pol_libcall_2eproto.base,
  &scc_info_strcmp_t_libcall_2eproto.base,
  &scc_info_strcpy_pol_libcall_2eproto.base,
  &scc_info_strcpy_t_libcall_2eproto.base,
  &scc_info_strncmp_pol_libcall_2eproto.base,
  &scc_info_strncmp_t_libcall_2eproto.base,
  &scc_info_strncpy_pol_libcall_2eproto.base,
  &scc_info_strncpy_t_libcall_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_libcall_2eproto_once;
static bool descriptor_table_libcall_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_libcall_2eproto = {
  &descriptor_table_libcall_2eproto_initialized, descriptor_table_protodef_libcall_2eproto, "libcall.proto", 9633,
  &descriptor_table_libcall_2eproto_once, descriptor_table_libcall_2eproto_sccs, descriptor_table_libcall_2eproto_deps, 65, 1,
  schemas, file_default_instances, TableStruct_libcall_2eproto::offsets,
  file_level_metadata_libcall_2eproto, 65, file_level_enum_descriptors_libcall_2eproto, file_level_service_descriptors_libcall_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_libcall_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_libcall_2eproto), true);
namespace libcall_types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* lib_ident_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_libcall_2eproto);
  return file_level_enum_descriptors_libcall_2eproto[0];
}
bool lib_ident_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 100:
    case 101:
    case 102:
    case 103:
    case 255:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* fscanf_enum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_libcall_2eproto);
  return file_level_enum_descriptors_libcall_2eproto[1];
}
bool fscanf_enum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void libcall_pol::InitAsDefaultInstance() {
  ::libcall_types::_libcall_pol_default_instance_.strcpy_ = const_cast< ::libcall_types::strcpy_pol*>(
      ::libcall_types::strcpy_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.printf_ = const_cast< ::libcall_types::printf_pol*>(
      ::libcall_types::printf_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.atoi_ = const_cast< ::libcall_types::atoi_pol*>(
      ::libcall_types::atoi_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.malloc_ = const_cast< ::libcall_types::malloc_pol*>(
      ::libcall_types::malloc_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.getmodulehandle_ = const_cast< ::libcall_types::getmodulehandle_pol*>(
      ::libcall_types::getmodulehandle_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.getprocaddress_ = const_cast< ::libcall_types::getprocaddress_pol*>(
      ::libcall_types::getprocaddress_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.getmainargs_ = const_cast< ::libcall_types::getmainargs_pol*>(
      ::libcall_types::getmainargs_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.gethostname_ = const_cast< ::libcall_types::gethostname_pol*>(
      ::libcall_types::gethostname_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.free_ = const_cast< ::libcall_types::free_pol*>(
      ::libcall_types::free_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.memcpy_ = const_cast< ::libcall_types::memcpy_pol*>(
      ::libcall_types::memcpy_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.memset_ = const_cast< ::libcall_types::memset_pol*>(
      ::libcall_types::memset_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.fgetc_ = const_cast< ::libcall_types::fgetc_pol*>(
      ::libcall_types::fgetc_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.read_ = const_cast< ::libcall_types::read_pol*>(
      ::libcall_types::read_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.strchr_ = const_cast< ::libcall_types::strchr_pol*>(
      ::libcall_types::strchr_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.exit_ = const_cast< ::libcall_types::exit_pol*>(
      ::libcall_types::exit_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.strcmp_ = const_cast< ::libcall_types::strcmp_pol*>(
      ::libcall_types::strcmp_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.ctype_b_loc_ = const_cast< ::libcall_types::ctype_b_loc_pol*>(
      ::libcall_types::ctype_b_loc_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.fscanf_ = const_cast< ::libcall_types::fscanf_pol*>(
      ::libcall_types::fscanf_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.strncpy_ = const_cast< ::libcall_types::strncpy_pol*>(
      ::libcall_types::strncpy_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.fstat_ = const_cast< ::libcall_types::fstat_pol*>(
      ::libcall_types::fstat_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.realloc_ = const_cast< ::libcall_types::realloc_pol*>(
      ::libcall_types::realloc_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.mmap_ = const_cast< ::libcall_types::mmap_pol*>(
      ::libcall_types::mmap_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.qsort_ = const_cast< ::libcall_types::qsort_pol*>(
      ::libcall_types::qsort_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.bsearch_ = const_cast< ::libcall_types::bsearch_pol*>(
      ::libcall_types::bsearch_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.open_stub_ = const_cast< ::libcall_types::open_pol*>(
      ::libcall_types::open_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.lseek_ = const_cast< ::libcall_types::lseek_pol*>(
      ::libcall_types::lseek_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.fread_ = const_cast< ::libcall_types::fread_pol*>(
      ::libcall_types::fread_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.strncmp_ = const_cast< ::libcall_types::strncmp_pol*>(
      ::libcall_types::strncmp_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.memcmp_ = const_cast< ::libcall_types::memcmp_pol*>(
      ::libcall_types::memcmp_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.fxstat64_ = const_cast< ::libcall_types::fxstat64_pol*>(
      ::libcall_types::fxstat64_pol::internal_default_instance());
  ::libcall_types::_libcall_pol_default_instance_.generic_ = const_cast< ::libcall_types::generic_pol*>(
      ::libcall_types::generic_pol::internal_default_instance());
}
class libcall_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<libcall_pol>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::libcall_types::strcpy_pol& strcpy(const libcall_pol* msg);
  static const ::libcall_types::printf_pol& printf(const libcall_pol* msg);
  static const ::libcall_types::atoi_pol& atoi(const libcall_pol* msg);
  static const ::libcall_types::malloc_pol& malloc(const libcall_pol* msg);
  static const ::libcall_types::getmodulehandle_pol& getmodulehandle(const libcall_pol* msg);
  static const ::libcall_types::getprocaddress_pol& getprocaddress(const libcall_pol* msg);
  static const ::libcall_types::getmainargs_pol& getmainargs(const libcall_pol* msg);
  static const ::libcall_types::gethostname_pol& gethostname(const libcall_pol* msg);
  static const ::libcall_types::free_pol& free(const libcall_pol* msg);
  static const ::libcall_types::memcpy_pol& memcpy(const libcall_pol* msg);
  static const ::libcall_types::memset_pol& memset(const libcall_pol* msg);
  static const ::libcall_types::fgetc_pol& fgetc(const libcall_pol* msg);
  static const ::libcall_types::read_pol& read(const libcall_pol* msg);
  static const ::libcall_types::strchr_pol& strchr(const libcall_pol* msg);
  static const ::libcall_types::exit_pol& exit(const libcall_pol* msg);
  static const ::libcall_types::strcmp_pol& strcmp(const libcall_pol* msg);
  static const ::libcall_types::ctype_b_loc_pol& ctype_b_loc(const libcall_pol* msg);
  static const ::libcall_types::fscanf_pol& fscanf(const libcall_pol* msg);
  static const ::libcall_types::strncpy_pol& strncpy(const libcall_pol* msg);
  static const ::libcall_types::fstat_pol& fstat(const libcall_pol* msg);
  static const ::libcall_types::realloc_pol& realloc(const libcall_pol* msg);
  static const ::libcall_types::mmap_pol& mmap(const libcall_pol* msg);
  static const ::libcall_types::qsort_pol& qsort(const libcall_pol* msg);
  static const ::libcall_types::bsearch_pol& bsearch(const libcall_pol* msg);
  static const ::libcall_types::open_pol& open_stub(const libcall_pol* msg);
  static const ::libcall_types::lseek_pol& lseek(const libcall_pol* msg);
  static const ::libcall_types::fread_pol& fread(const libcall_pol* msg);
  static const ::libcall_types::strncmp_pol& strncmp(const libcall_pol* msg);
  static const ::libcall_types::memcmp_pol& memcmp(const libcall_pol* msg);
  static const ::libcall_types::fxstat64_pol& fxstat64(const libcall_pol* msg);
  static const ::libcall_types::generic_pol& generic(const libcall_pol* msg);
};

const ::libcall_types::strcpy_pol&
libcall_pol::_Internal::strcpy(const libcall_pol* msg) {
  return *msg->libcall_cnt_.strcpy_;
}
const ::libcall_types::printf_pol&
libcall_pol::_Internal::printf(const libcall_pol* msg) {
  return *msg->libcall_cnt_.printf_;
}
const ::libcall_types::atoi_pol&
libcall_pol::_Internal::atoi(const libcall_pol* msg) {
  return *msg->libcall_cnt_.atoi_;
}
const ::libcall_types::malloc_pol&
libcall_pol::_Internal::malloc(const libcall_pol* msg) {
  return *msg->libcall_cnt_.malloc_;
}
const ::libcall_types::getmodulehandle_pol&
libcall_pol::_Internal::getmodulehandle(const libcall_pol* msg) {
  return *msg->libcall_cnt_.getmodulehandle_;
}
const ::libcall_types::getprocaddress_pol&
libcall_pol::_Internal::getprocaddress(const libcall_pol* msg) {
  return *msg->libcall_cnt_.getprocaddress_;
}
const ::libcall_types::getmainargs_pol&
libcall_pol::_Internal::getmainargs(const libcall_pol* msg) {
  return *msg->libcall_cnt_.getmainargs_;
}
const ::libcall_types::gethostname_pol&
libcall_pol::_Internal::gethostname(const libcall_pol* msg) {
  return *msg->libcall_cnt_.gethostname_;
}
const ::libcall_types::free_pol&
libcall_pol::_Internal::free(const libcall_pol* msg) {
  return *msg->libcall_cnt_.free_;
}
const ::libcall_types::memcpy_pol&
libcall_pol::_Internal::memcpy(const libcall_pol* msg) {
  return *msg->libcall_cnt_.memcpy_;
}
const ::libcall_types::memset_pol&
libcall_pol::_Internal::memset(const libcall_pol* msg) {
  return *msg->libcall_cnt_.memset_;
}
const ::libcall_types::fgetc_pol&
libcall_pol::_Internal::fgetc(const libcall_pol* msg) {
  return *msg->libcall_cnt_.fgetc_;
}
const ::libcall_types::read_pol&
libcall_pol::_Internal::read(const libcall_pol* msg) {
  return *msg->libcall_cnt_.read_;
}
const ::libcall_types::strchr_pol&
libcall_pol::_Internal::strchr(const libcall_pol* msg) {
  return *msg->libcall_cnt_.strchr_;
}
const ::libcall_types::exit_pol&
libcall_pol::_Internal::exit(const libcall_pol* msg) {
  return *msg->libcall_cnt_.exit_;
}
const ::libcall_types::strcmp_pol&
libcall_pol::_Internal::strcmp(const libcall_pol* msg) {
  return *msg->libcall_cnt_.strcmp_;
}
const ::libcall_types::ctype_b_loc_pol&
libcall_pol::_Internal::ctype_b_loc(const libcall_pol* msg) {
  return *msg->libcall_cnt_.ctype_b_loc_;
}
const ::libcall_types::fscanf_pol&
libcall_pol::_Internal::fscanf(const libcall_pol* msg) {
  return *msg->libcall_cnt_.fscanf_;
}
const ::libcall_types::strncpy_pol&
libcall_pol::_Internal::strncpy(const libcall_pol* msg) {
  return *msg->libcall_cnt_.strncpy_;
}
const ::libcall_types::fstat_pol&
libcall_pol::_Internal::fstat(const libcall_pol* msg) {
  return *msg->libcall_cnt_.fstat_;
}
const ::libcall_types::realloc_pol&
libcall_pol::_Internal::realloc(const libcall_pol* msg) {
  return *msg->libcall_cnt_.realloc_;
}
const ::libcall_types::mmap_pol&
libcall_pol::_Internal::mmap(const libcall_pol* msg) {
  return *msg->libcall_cnt_.mmap_;
}
const ::libcall_types::qsort_pol&
libcall_pol::_Internal::qsort(const libcall_pol* msg) {
  return *msg->libcall_cnt_.qsort_;
}
const ::libcall_types::bsearch_pol&
libcall_pol::_Internal::bsearch(const libcall_pol* msg) {
  return *msg->libcall_cnt_.bsearch_;
}
const ::libcall_types::open_pol&
libcall_pol::_Internal::open_stub(const libcall_pol* msg) {
  return *msg->libcall_cnt_.open_stub_;
}
const ::libcall_types::lseek_pol&
libcall_pol::_Internal::lseek(const libcall_pol* msg) {
  return *msg->libcall_cnt_.lseek_;
}
const ::libcall_types::fread_pol&
libcall_pol::_Internal::fread(const libcall_pol* msg) {
  return *msg->libcall_cnt_.fread_;
}
const ::libcall_types::strncmp_pol&
libcall_pol::_Internal::strncmp(const libcall_pol* msg) {
  return *msg->libcall_cnt_.strncmp_;
}
const ::libcall_types::memcmp_pol&
libcall_pol::_Internal::memcmp(const libcall_pol* msg) {
  return *msg->libcall_cnt_.memcmp_;
}
const ::libcall_types::fxstat64_pol&
libcall_pol::_Internal::fxstat64(const libcall_pol* msg) {
  return *msg->libcall_cnt_.fxstat64_;
}
const ::libcall_types::generic_pol&
libcall_pol::_Internal::generic(const libcall_pol* msg) {
  return *msg->libcall_cnt_.generic_;
}
void libcall_pol::set_allocated_strcpy(::libcall_types::strcpy_pol* strcpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strcpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strcpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strcpy, submessage_arena);
    }
    set_has_strcpy();
    libcall_cnt_.strcpy_ = strcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strcpy)
}
void libcall_pol::set_allocated_printf(::libcall_types::printf_pol* printf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (printf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      printf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printf, submessage_arena);
    }
    set_has_printf();
    libcall_cnt_.printf_ = printf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.printf)
}
void libcall_pol::set_allocated_atoi(::libcall_types::atoi_pol* atoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (atoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      atoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atoi, submessage_arena);
    }
    set_has_atoi();
    libcall_cnt_.atoi_ = atoi;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.atoi)
}
void libcall_pol::set_allocated_malloc(::libcall_types::malloc_pol* malloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (malloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      malloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, malloc, submessage_arena);
    }
    set_has_malloc();
    libcall_cnt_.malloc_ = malloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.malloc)
}
void libcall_pol::set_allocated_getmodulehandle(::libcall_types::getmodulehandle_pol* getmodulehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (getmodulehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getmodulehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmodulehandle, submessage_arena);
    }
    set_has_getmodulehandle();
    libcall_cnt_.getmodulehandle_ = getmodulehandle;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.getmodulehandle)
}
void libcall_pol::set_allocated_getprocaddress(::libcall_types::getprocaddress_pol* getprocaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (getprocaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getprocaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getprocaddress, submessage_arena);
    }
    set_has_getprocaddress();
    libcall_cnt_.getprocaddress_ = getprocaddress;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.getprocaddress)
}
void libcall_pol::set_allocated_getmainargs(::libcall_types::getmainargs_pol* getmainargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (getmainargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getmainargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmainargs, submessage_arena);
    }
    set_has_getmainargs();
    libcall_cnt_.getmainargs_ = getmainargs;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.getmainargs)
}
void libcall_pol::set_allocated_gethostname(::libcall_types::gethostname_pol* gethostname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (gethostname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gethostname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethostname, submessage_arena);
    }
    set_has_gethostname();
    libcall_cnt_.gethostname_ = gethostname;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.gethostname)
}
void libcall_pol::set_allocated_free(::libcall_types::free_pol* free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, free, submessage_arena);
    }
    set_has_free();
    libcall_cnt_.free_ = free;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.free)
}
void libcall_pol::set_allocated_memcpy(::libcall_types::memcpy_pol* memcpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (memcpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memcpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memcpy, submessage_arena);
    }
    set_has_memcpy();
    libcall_cnt_.memcpy_ = memcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.memcpy)
}
void libcall_pol::set_allocated_memset(::libcall_types::memset_pol* memset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (memset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memset, submessage_arena);
    }
    set_has_memset();
    libcall_cnt_.memset_ = memset;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.memset)
}
void libcall_pol::set_allocated_fgetc(::libcall_types::fgetc_pol* fgetc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fgetc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fgetc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fgetc, submessage_arena);
    }
    set_has_fgetc();
    libcall_cnt_.fgetc_ = fgetc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fgetc)
}
void libcall_pol::set_allocated_read(::libcall_types::read_pol* read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    set_has_read();
    libcall_cnt_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.read)
}
void libcall_pol::set_allocated_strchr(::libcall_types::strchr_pol* strchr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strchr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strchr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strchr, submessage_arena);
    }
    set_has_strchr();
    libcall_cnt_.strchr_ = strchr;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strchr)
}
void libcall_pol::set_allocated_exit(::libcall_types::exit_pol* exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exit, submessage_arena);
    }
    set_has_exit();
    libcall_cnt_.exit_ = exit;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.exit)
}
void libcall_pol::set_allocated_strcmp(::libcall_types::strcmp_pol* strcmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strcmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strcmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strcmp, submessage_arena);
    }
    set_has_strcmp();
    libcall_cnt_.strcmp_ = strcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strcmp)
}
void libcall_pol::set_allocated_ctype_b_loc(::libcall_types::ctype_b_loc_pol* ctype_b_loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (ctype_b_loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctype_b_loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctype_b_loc, submessage_arena);
    }
    set_has_ctype_b_loc();
    libcall_cnt_.ctype_b_loc_ = ctype_b_loc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.ctype_b_loc)
}
void libcall_pol::set_allocated_fscanf(::libcall_types::fscanf_pol* fscanf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fscanf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fscanf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fscanf, submessage_arena);
    }
    set_has_fscanf();
    libcall_cnt_.fscanf_ = fscanf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fscanf)
}
void libcall_pol::set_allocated_strncpy(::libcall_types::strncpy_pol* strncpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strncpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strncpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strncpy, submessage_arena);
    }
    set_has_strncpy();
    libcall_cnt_.strncpy_ = strncpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strncpy)
}
void libcall_pol::set_allocated_fstat(::libcall_types::fstat_pol* fstat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fstat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fstat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fstat, submessage_arena);
    }
    set_has_fstat();
    libcall_cnt_.fstat_ = fstat;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fstat)
}
void libcall_pol::set_allocated_realloc(::libcall_types::realloc_pol* realloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (realloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      realloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realloc, submessage_arena);
    }
    set_has_realloc();
    libcall_cnt_.realloc_ = realloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.realloc)
}
void libcall_pol::set_allocated_mmap(::libcall_types::mmap_pol* mmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (mmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mmap, submessage_arena);
    }
    set_has_mmap();
    libcall_cnt_.mmap_ = mmap;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.mmap)
}
void libcall_pol::set_allocated_qsort(::libcall_types::qsort_pol* qsort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (qsort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qsort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qsort, submessage_arena);
    }
    set_has_qsort();
    libcall_cnt_.qsort_ = qsort;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.qsort)
}
void libcall_pol::set_allocated_bsearch(::libcall_types::bsearch_pol* bsearch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (bsearch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bsearch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsearch, submessage_arena);
    }
    set_has_bsearch();
    libcall_cnt_.bsearch_ = bsearch;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.bsearch)
}
void libcall_pol::set_allocated_open_stub(::libcall_types::open_pol* open_stub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (open_stub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_stub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_stub, submessage_arena);
    }
    set_has_open_stub();
    libcall_cnt_.open_stub_ = open_stub;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.open_stub)
}
void libcall_pol::set_allocated_lseek(::libcall_types::lseek_pol* lseek) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (lseek) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lseek = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lseek, submessage_arena);
    }
    set_has_lseek();
    libcall_cnt_.lseek_ = lseek;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.lseek)
}
void libcall_pol::set_allocated_fread(::libcall_types::fread_pol* fread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fread, submessage_arena);
    }
    set_has_fread();
    libcall_cnt_.fread_ = fread;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fread)
}
void libcall_pol::set_allocated_strncmp(::libcall_types::strncmp_pol* strncmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strncmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strncmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strncmp, submessage_arena);
    }
    set_has_strncmp();
    libcall_cnt_.strncmp_ = strncmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.strncmp)
}
void libcall_pol::set_allocated_memcmp(::libcall_types::memcmp_pol* memcmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (memcmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memcmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memcmp, submessage_arena);
    }
    set_has_memcmp();
    libcall_cnt_.memcmp_ = memcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.memcmp)
}
void libcall_pol::set_allocated_fxstat64(::libcall_types::fxstat64_pol* fxstat64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fxstat64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fxstat64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fxstat64, submessage_arena);
    }
    set_has_fxstat64();
    libcall_cnt_.fxstat64_ = fxstat64;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.fxstat64)
}
void libcall_pol::set_allocated_generic(::libcall_types::generic_pol* generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic, submessage_arena);
    }
    set_has_generic();
    libcall_cnt_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_pol.generic)
}
libcall_pol::libcall_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.libcall_pol)
}
libcall_pol::libcall_pol(const libcall_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      restrict_addresses_(from.restrict_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&action_, &from.action_,
    static_cast<size_t>(reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&action_)) + sizeof(ident_));
  clear_has_libcall_cnt();
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_pol::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_pol::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_pol::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_pol::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_pol::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_pol::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_pol::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_pol::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_pol::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_pol::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_pol::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_pol::MergeFrom(from.fgetc());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_pol::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_pol::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_pol::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_pol::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_pol::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_pol::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_pol::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_pol::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_pol::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_pol::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_pol::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_pol::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_pol::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_pol::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_pol::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_pol::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_pol::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_pol::MergeFrom(from.fxstat64());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_pol::MergeFrom(from.generic());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:libcall_types.libcall_pol)
}

void libcall_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_libcall_pol_libcall_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  action_ = 0;
  ident_ = 255;
  clear_has_libcall_cnt();
}

libcall_pol::~libcall_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.libcall_pol)
  SharedDtor();
}

void libcall_pol::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_libcall_cnt()) {
    clear_libcall_cnt();
  }
}

void libcall_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const libcall_pol& libcall_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_libcall_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void libcall_pol::clear_libcall_cnt() {
// @@protoc_insertion_point(one_of_clear_start:libcall_types.libcall_pol)
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      delete libcall_cnt_.strcpy_;
      break;
    }
    case kPrintf: {
      delete libcall_cnt_.printf_;
      break;
    }
    case kAtoi: {
      delete libcall_cnt_.atoi_;
      break;
    }
    case kMalloc: {
      delete libcall_cnt_.malloc_;
      break;
    }
    case kGetmodulehandle: {
      delete libcall_cnt_.getmodulehandle_;
      break;
    }
    case kGetprocaddress: {
      delete libcall_cnt_.getprocaddress_;
      break;
    }
    case kGetmainargs: {
      delete libcall_cnt_.getmainargs_;
      break;
    }
    case kGethostname: {
      delete libcall_cnt_.gethostname_;
      break;
    }
    case kFree: {
      delete libcall_cnt_.free_;
      break;
    }
    case kMemcpy: {
      delete libcall_cnt_.memcpy_;
      break;
    }
    case kMemset: {
      delete libcall_cnt_.memset_;
      break;
    }
    case kFgetc: {
      delete libcall_cnt_.fgetc_;
      break;
    }
    case kRead: {
      delete libcall_cnt_.read_;
      break;
    }
    case kStrchr: {
      delete libcall_cnt_.strchr_;
      break;
    }
    case kExit: {
      delete libcall_cnt_.exit_;
      break;
    }
    case kStrcmp: {
      delete libcall_cnt_.strcmp_;
      break;
    }
    case kCtypeBLoc: {
      delete libcall_cnt_.ctype_b_loc_;
      break;
    }
    case kFscanf: {
      delete libcall_cnt_.fscanf_;
      break;
    }
    case kStrncpy: {
      delete libcall_cnt_.strncpy_;
      break;
    }
    case kFstat: {
      delete libcall_cnt_.fstat_;
      break;
    }
    case kRealloc: {
      delete libcall_cnt_.realloc_;
      break;
    }
    case kMmap: {
      delete libcall_cnt_.mmap_;
      break;
    }
    case kQsort: {
      delete libcall_cnt_.qsort_;
      break;
    }
    case kBsearch: {
      delete libcall_cnt_.bsearch_;
      break;
    }
    case kOpenStub: {
      delete libcall_cnt_.open_stub_;
      break;
    }
    case kLseek: {
      delete libcall_cnt_.lseek_;
      break;
    }
    case kFread: {
      delete libcall_cnt_.fread_;
      break;
    }
    case kStrncmp: {
      delete libcall_cnt_.strncmp_;
      break;
    }
    case kMemcmp: {
      delete libcall_cnt_.memcmp_;
      break;
    }
    case kFxstat64: {
      delete libcall_cnt_.fxstat64_;
      break;
    }
    case kGeneric: {
      delete libcall_cnt_.generic_;
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIBCALL_CNT_NOT_SET;
}


void libcall_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.libcall_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restrict_addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    action_ = 0;
    ident_ = 255;
  }
  clear_libcall_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* libcall_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "libcall_types.libcall_pol.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::libcall_types::lib_ident_IsValid(val))) {
            set_ident(static_cast<::libcall_types::lib_ident>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.tracing_action action = 3 [default = SKIP];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::tracing_action_IsValid(val))) {
            set_action(static_cast<::common::tracing_action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint64 restrict_addresses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_restrict_addresses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_restrict_addresses(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strcpy_pol strcpy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_strcpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.printf_pol printf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_printf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.atoi_pol atoi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_atoi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.malloc_pol malloc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_malloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.getmodulehandle_pol getmodulehandle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_getmodulehandle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.getprocaddress_pol getprocaddress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_getprocaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.getmainargs_pol getmainargs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_getmainargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.gethostname_pol gethostname = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_gethostname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.free_pol free = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.memcpy_pol memcpy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_memcpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.memset_pol memset = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_memset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fgetc_pol fgetc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_fgetc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.read_pol read = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strchr_pol strchr = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_strchr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.exit_pol exit = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strcmp_pol strcmp = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_strcmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.ctype_b_loc_pol ctype_b_loc = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_ctype_b_loc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fscanf_pol fscanf = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_fscanf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strncpy_pol strncpy = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_strncpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fstat_pol fstat = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_fstat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.realloc_pol realloc = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_realloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.mmap_pol mmap = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_mmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.qsort_pol qsort = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_qsort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.bsearch_pol bsearch = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_bsearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.open_pol open_stub = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_open_stub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.lseek_pol lseek = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_lseek(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fread_pol fread = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_fread(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strncmp_pol strncmp = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_strncmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.memcmp_pol memcmp = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_memcmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fxstat64_pol fxstat64 = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_fxstat64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.generic_pol generic = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_generic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool libcall_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.libcall_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "libcall_types.libcall_pol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::libcall_types::lib_ident_IsValid(value)) {
            set_ident(static_cast< ::libcall_types::lib_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.tracing_action action = 3 [default = SKIP];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::tracing_action_IsValid(value)) {
            set_action(static_cast< ::common::tracing_action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 restrict_addresses = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_restrict_addresses())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_restrict_addresses())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcpy_pol strcpy = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.printf_pol printf = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.atoi_pol atoi = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_atoi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.malloc_pol malloc = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_malloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmodulehandle_pol getmodulehandle = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_getmodulehandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getprocaddress_pol getprocaddress = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_getprocaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmainargs_pol getmainargs = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_getmainargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.gethostname_pol gethostname = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gethostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.free_pol free = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcpy_pol memcpy = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memset_pol memset = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fgetc_pol fgetc = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fgetc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.read_pol read = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strchr_pol strchr = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strchr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.exit_pol exit = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcmp_pol strcmp = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.ctype_b_loc_pol ctype_b_loc = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ctype_b_loc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fscanf_pol fscanf = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fscanf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncpy_pol strncpy = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strncpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fstat_pol fstat = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.realloc_pol realloc = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_realloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.mmap_pol mmap = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.qsort_pol qsort = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_qsort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.bsearch_pol bsearch = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bsearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.open_pol open_stub = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_open_stub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.lseek_pol lseek = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lseek()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fread_pol fread = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncmp_pol strncmp = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strncmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcmp_pol memcmp = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fxstat64_pol fxstat64 = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fxstat64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.generic_pol generic = 50;
      case 50: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (402 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.libcall_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.libcall_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void libcall_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.libcall_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_pol.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ident(), output);
  }

  // optional .common.tracing_action action = 3 [default = SKIP];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // repeated uint64 restrict_addresses = 4;
  for (int i = 0, n = this->restrict_addresses_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      4, this->restrict_addresses(i), output);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::strcpy(this), output);
      break;
    case kPrintf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::printf(this), output);
      break;
    case kAtoi:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::atoi(this), output);
      break;
    case kMalloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, _Internal::malloc(this), output);
      break;
    case kGetmodulehandle:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, _Internal::getmodulehandle(this), output);
      break;
    case kGetprocaddress:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, _Internal::getprocaddress(this), output);
      break;
    case kGetmainargs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, _Internal::getmainargs(this), output);
      break;
    case kGethostname:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, _Internal::gethostname(this), output);
      break;
    case kFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, _Internal::free(this), output);
      break;
    case kMemcpy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, _Internal::memcpy(this), output);
      break;
    case kMemset:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, _Internal::memset(this), output);
      break;
    case kFgetc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, _Internal::fgetc(this), output);
      break;
    case kRead:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, _Internal::read(this), output);
      break;
    case kStrchr:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, _Internal::strchr(this), output);
      break;
    case kExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, _Internal::exit(this), output);
      break;
    case kStrcmp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, _Internal::strcmp(this), output);
      break;
    case kCtypeBLoc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        22, _Internal::ctype_b_loc(this), output);
      break;
    case kFscanf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, _Internal::fscanf(this), output);
      break;
    case kStrncpy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, _Internal::strncpy(this), output);
      break;
    case kFstat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, _Internal::fstat(this), output);
      break;
    case kRealloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, _Internal::realloc(this), output);
      break;
    case kMmap:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, _Internal::mmap(this), output);
      break;
    case kQsort:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, _Internal::qsort(this), output);
      break;
    case kBsearch:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, _Internal::bsearch(this), output);
      break;
    case kOpenStub:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, _Internal::open_stub(this), output);
      break;
    case kLseek:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, _Internal::lseek(this), output);
      break;
    case kFread:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, _Internal::fread(this), output);
      break;
    case kStrncmp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, _Internal::strncmp(this), output);
      break;
    case kMemcmp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, _Internal::memcmp(this), output);
      break;
    case kFxstat64:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, _Internal::fxstat64(this), output);
      break;
    case kGeneric:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        50, _Internal::generic(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.libcall_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* libcall_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.libcall_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_pol.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ident(), target);
  }

  // optional .common.tracing_action action = 3 [default = SKIP];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // repeated uint64 restrict_addresses = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->restrict_addresses_, target);

  switch (libcall_cnt_case()) {
    case kStrcpy:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::strcpy(this), target);
      break;
    case kPrintf:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::printf(this), target);
      break;
    case kAtoi:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::atoi(this), target);
      break;
    case kMalloc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, _Internal::malloc(this), target);
      break;
    case kGetmodulehandle:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, _Internal::getmodulehandle(this), target);
      break;
    case kGetprocaddress:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, _Internal::getprocaddress(this), target);
      break;
    case kGetmainargs:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, _Internal::getmainargs(this), target);
      break;
    case kGethostname:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, _Internal::gethostname(this), target);
      break;
    case kFree:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, _Internal::free(this), target);
      break;
    case kMemcpy:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, _Internal::memcpy(this), target);
      break;
    case kMemset:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, _Internal::memset(this), target);
      break;
    case kFgetc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, _Internal::fgetc(this), target);
      break;
    case kRead:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, _Internal::read(this), target);
      break;
    case kStrchr:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, _Internal::strchr(this), target);
      break;
    case kExit:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, _Internal::exit(this), target);
      break;
    case kStrcmp:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, _Internal::strcmp(this), target);
      break;
    case kCtypeBLoc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          22, _Internal::ctype_b_loc(this), target);
      break;
    case kFscanf:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          23, _Internal::fscanf(this), target);
      break;
    case kStrncpy:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          24, _Internal::strncpy(this), target);
      break;
    case kFstat:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          25, _Internal::fstat(this), target);
      break;
    case kRealloc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          26, _Internal::realloc(this), target);
      break;
    case kMmap:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          27, _Internal::mmap(this), target);
      break;
    case kQsort:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          28, _Internal::qsort(this), target);
      break;
    case kBsearch:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          29, _Internal::bsearch(this), target);
      break;
    case kOpenStub:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          30, _Internal::open_stub(this), target);
      break;
    case kLseek:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          31, _Internal::lseek(this), target);
      break;
    case kFread:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          32, _Internal::fread(this), target);
      break;
    case kStrncmp:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          33, _Internal::strncmp(this), target);
      break;
    case kMemcmp:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          34, _Internal::memcmp(this), target);
      break;
    case kFxstat64:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          35, _Internal::fxstat64(this), target);
      break;
    case kGeneric:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          50, _Internal::generic(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.libcall_pol)
  return target;
}

size_t libcall_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.libcall_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 restrict_addresses = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->restrict_addresses_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->restrict_addresses_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional .common.tracing_action action = 3 [default = SKIP];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .libcall_types.lib_ident ident = 2 [default = GENERIC];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());
    }

  }
  switch (libcall_cnt_case()) {
    // optional .libcall_types.strcpy_pol strcpy = 5;
    case kStrcpy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strcpy_);
      break;
    }
    // optional .libcall_types.printf_pol printf = 6;
    case kPrintf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.printf_);
      break;
    }
    // optional .libcall_types.atoi_pol atoi = 7;
    case kAtoi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.atoi_);
      break;
    }
    // optional .libcall_types.malloc_pol malloc = 8;
    case kMalloc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.malloc_);
      break;
    }
    // optional .libcall_types.getmodulehandle_pol getmodulehandle = 9;
    case kGetmodulehandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.getmodulehandle_);
      break;
    }
    // optional .libcall_types.getprocaddress_pol getprocaddress = 10;
    case kGetprocaddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.getprocaddress_);
      break;
    }
    // optional .libcall_types.getmainargs_pol getmainargs = 11;
    case kGetmainargs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.getmainargs_);
      break;
    }
    // optional .libcall_types.gethostname_pol gethostname = 12;
    case kGethostname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.gethostname_);
      break;
    }
    // optional .libcall_types.free_pol free = 13;
    case kFree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.free_);
      break;
    }
    // optional .libcall_types.memcpy_pol memcpy = 14;
    case kMemcpy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.memcpy_);
      break;
    }
    // optional .libcall_types.memset_pol memset = 15;
    case kMemset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.memset_);
      break;
    }
    // optional .libcall_types.fgetc_pol fgetc = 16;
    case kFgetc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fgetc_);
      break;
    }
    // optional .libcall_types.read_pol read = 17;
    case kRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.read_);
      break;
    }
    // optional .libcall_types.strchr_pol strchr = 18;
    case kStrchr: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strchr_);
      break;
    }
    // optional .libcall_types.exit_pol exit = 19;
    case kExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.exit_);
      break;
    }
    // optional .libcall_types.strcmp_pol strcmp = 20;
    case kStrcmp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strcmp_);
      break;
    }
    // optional .libcall_types.ctype_b_loc_pol ctype_b_loc = 22;
    case kCtypeBLoc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.ctype_b_loc_);
      break;
    }
    // optional .libcall_types.fscanf_pol fscanf = 23;
    case kFscanf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fscanf_);
      break;
    }
    // optional .libcall_types.strncpy_pol strncpy = 24;
    case kStrncpy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strncpy_);
      break;
    }
    // optional .libcall_types.fstat_pol fstat = 25;
    case kFstat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fstat_);
      break;
    }
    // optional .libcall_types.realloc_pol realloc = 26;
    case kRealloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.realloc_);
      break;
    }
    // optional .libcall_types.mmap_pol mmap = 27;
    case kMmap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.mmap_);
      break;
    }
    // optional .libcall_types.qsort_pol qsort = 28;
    case kQsort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.qsort_);
      break;
    }
    // optional .libcall_types.bsearch_pol bsearch = 29;
    case kBsearch: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.bsearch_);
      break;
    }
    // optional .libcall_types.open_pol open_stub = 30;
    case kOpenStub: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.open_stub_);
      break;
    }
    // optional .libcall_types.lseek_pol lseek = 31;
    case kLseek: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.lseek_);
      break;
    }
    // optional .libcall_types.fread_pol fread = 32;
    case kFread: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fread_);
      break;
    }
    // optional .libcall_types.strncmp_pol strncmp = 33;
    case kStrncmp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strncmp_);
      break;
    }
    // optional .libcall_types.memcmp_pol memcmp = 34;
    case kMemcmp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.memcmp_);
      break;
    }
    // optional .libcall_types.fxstat64_pol fxstat64 = 35;
    case kFxstat64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fxstat64_);
      break;
    }
    // optional .libcall_types.generic_pol generic = 50;
    case kGeneric: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.generic_);
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void libcall_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.libcall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const libcall_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<libcall_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.libcall_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.libcall_pol)
    MergeFrom(*source);
  }
}

void libcall_pol::MergeFrom(const libcall_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.libcall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restrict_addresses_.MergeFrom(from.restrict_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000004u) {
      ident_ = from.ident_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_pol::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_pol::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_pol::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_pol::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_pol::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_pol::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_pol::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_pol::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_pol::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_pol::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_pol::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_pol::MergeFrom(from.fgetc());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_pol::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_pol::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_pol::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_pol::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_pol::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_pol::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_pol::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_pol::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_pol::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_pol::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_pol::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_pol::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_pol::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_pol::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_pol::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_pol::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_pol::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_pol::MergeFrom(from.fxstat64());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_pol::MergeFrom(from.generic());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
}

void libcall_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.libcall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void libcall_pol::CopyFrom(const libcall_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.libcall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool libcall_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      if (has_strcpy()) {
        if (!this->strcpy().IsInitialized()) return false;
      }
      break;
    }
    case kPrintf: {
      if (has_printf()) {
        if (!this->printf().IsInitialized()) return false;
      }
      break;
    }
    case kAtoi: {
      if (has_atoi()) {
        if (!this->atoi().IsInitialized()) return false;
      }
      break;
    }
    case kMalloc: {
      if (has_malloc()) {
        if (!this->malloc().IsInitialized()) return false;
      }
      break;
    }
    case kGetmodulehandle: {
      if (has_getmodulehandle()) {
        if (!this->getmodulehandle().IsInitialized()) return false;
      }
      break;
    }
    case kGetprocaddress: {
      if (has_getprocaddress()) {
        if (!this->getprocaddress().IsInitialized()) return false;
      }
      break;
    }
    case kGetmainargs: {
      if (has_getmainargs()) {
        if (!this->getmainargs().IsInitialized()) return false;
      }
      break;
    }
    case kGethostname: {
      if (has_gethostname()) {
        if (!this->gethostname().IsInitialized()) return false;
      }
      break;
    }
    case kFree: {
      if (has_free()) {
        if (!this->free().IsInitialized()) return false;
      }
      break;
    }
    case kMemcpy: {
      if (has_memcpy()) {
        if (!this->memcpy().IsInitialized()) return false;
      }
      break;
    }
    case kMemset: {
      if (has_memset()) {
        if (!this->memset().IsInitialized()) return false;
      }
      break;
    }
    case kFgetc: {
      if (has_fgetc()) {
        if (!this->fgetc().IsInitialized()) return false;
      }
      break;
    }
    case kRead: {
      if (has_read()) {
        if (!this->read().IsInitialized()) return false;
      }
      break;
    }
    case kStrchr: {
      if (has_strchr()) {
        if (!this->strchr().IsInitialized()) return false;
      }
      break;
    }
    case kExit: {
      break;
    }
    case kStrcmp: {
      if (has_strcmp()) {
        if (!this->strcmp().IsInitialized()) return false;
      }
      break;
    }
    case kCtypeBLoc: {
      if (has_ctype_b_loc()) {
        if (!this->ctype_b_loc().IsInitialized()) return false;
      }
      break;
    }
    case kFscanf: {
      if (has_fscanf()) {
        if (!this->fscanf().IsInitialized()) return false;
      }
      break;
    }
    case kStrncpy: {
      if (has_strncpy()) {
        if (!this->strncpy().IsInitialized()) return false;
      }
      break;
    }
    case kFstat: {
      break;
    }
    case kRealloc: {
      if (has_realloc()) {
        if (!this->realloc().IsInitialized()) return false;
      }
      break;
    }
    case kMmap: {
      if (has_mmap()) {
        if (!this->mmap().IsInitialized()) return false;
      }
      break;
    }
    case kQsort: {
      if (has_qsort()) {
        if (!this->qsort().IsInitialized()) return false;
      }
      break;
    }
    case kBsearch: {
      if (has_bsearch()) {
        if (!this->bsearch().IsInitialized()) return false;
      }
      break;
    }
    case kOpenStub: {
      if (has_open_stub()) {
        if (!this->open_stub().IsInitialized()) return false;
      }
      break;
    }
    case kLseek: {
      if (has_lseek()) {
        if (!this->lseek().IsInitialized()) return false;
      }
      break;
    }
    case kFread: {
      if (has_fread()) {
        if (!this->fread().IsInitialized()) return false;
      }
      break;
    }
    case kStrncmp: {
      if (has_strncmp()) {
        if (!this->strncmp().IsInitialized()) return false;
      }
      break;
    }
    case kMemcmp: {
      if (has_memcmp()) {
        if (!this->memcmp().IsInitialized()) return false;
      }
      break;
    }
    case kFxstat64: {
      break;
    }
    case kGeneric: {
      if (has_generic()) {
        if (!this->generic().IsInitialized()) return false;
      }
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void libcall_pol::InternalSwap(libcall_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restrict_addresses_.InternalSwap(&other->restrict_addresses_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(action_, other->action_);
  swap(ident_, other->ident_);
  swap(libcall_cnt_, other->libcall_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata libcall_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void libcall_t::InitAsDefaultInstance() {
  ::libcall_types::_libcall_t_default_instance_.strcpy_ = const_cast< ::libcall_types::strcpy_t*>(
      ::libcall_types::strcpy_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.printf_ = const_cast< ::libcall_types::printf_t*>(
      ::libcall_types::printf_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.atoi_ = const_cast< ::libcall_types::atoi_t*>(
      ::libcall_types::atoi_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.malloc_ = const_cast< ::libcall_types::malloc_t*>(
      ::libcall_types::malloc_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.getmodulehandle_ = const_cast< ::libcall_types::getmodulehandle_t*>(
      ::libcall_types::getmodulehandle_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.getprocaddress_ = const_cast< ::libcall_types::getprocaddress_t*>(
      ::libcall_types::getprocaddress_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.getmainargs_ = const_cast< ::libcall_types::getmainargs_t*>(
      ::libcall_types::getmainargs_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.gethostname_ = const_cast< ::libcall_types::gethostname_t*>(
      ::libcall_types::gethostname_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.free_ = const_cast< ::libcall_types::free_t*>(
      ::libcall_types::free_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.memcpy_ = const_cast< ::libcall_types::memcpy_t*>(
      ::libcall_types::memcpy_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.memset_ = const_cast< ::libcall_types::memset_t*>(
      ::libcall_types::memset_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.fgetc_ = const_cast< ::libcall_types::fgetc_t*>(
      ::libcall_types::fgetc_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.generic_ = const_cast< ::libcall_types::generic_t*>(
      ::libcall_types::generic_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.read_ = const_cast< ::libcall_types::read_t*>(
      ::libcall_types::read_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.strchr_ = const_cast< ::libcall_types::strchr_t*>(
      ::libcall_types::strchr_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.exit_ = const_cast< ::libcall_types::exit_t*>(
      ::libcall_types::exit_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.strcmp_ = const_cast< ::libcall_types::strcmp_t*>(
      ::libcall_types::strcmp_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.ctype_b_loc_ = const_cast< ::libcall_types::ctype_b_loc_t*>(
      ::libcall_types::ctype_b_loc_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.fscanf_ = const_cast< ::libcall_types::fscanf_t*>(
      ::libcall_types::fscanf_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.strncpy_ = const_cast< ::libcall_types::strncpy_t*>(
      ::libcall_types::strncpy_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.fstat_ = const_cast< ::libcall_types::fstat_t*>(
      ::libcall_types::fstat_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.realloc_ = const_cast< ::libcall_types::realloc_t*>(
      ::libcall_types::realloc_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.mmap_ = const_cast< ::libcall_types::mmap_t*>(
      ::libcall_types::mmap_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.qsort_ = const_cast< ::libcall_types::qsort_t*>(
      ::libcall_types::qsort_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.bsearch_ = const_cast< ::libcall_types::bsearch_t*>(
      ::libcall_types::bsearch_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.open_stub_ = const_cast< ::libcall_types::open_t*>(
      ::libcall_types::open_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.lseek_ = const_cast< ::libcall_types::lseek_t*>(
      ::libcall_types::lseek_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.fread_ = const_cast< ::libcall_types::fread_t*>(
      ::libcall_types::fread_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.strncmp_ = const_cast< ::libcall_types::strncmp_t*>(
      ::libcall_types::strncmp_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.memcmp_ = const_cast< ::libcall_types::memcmp_t*>(
      ::libcall_types::memcmp_t::internal_default_instance());
  ::libcall_types::_libcall_t_default_instance_.fxstat64_ = const_cast< ::libcall_types::fxstat64_t*>(
      ::libcall_types::fxstat64_t::internal_default_instance());
}
class libcall_t::_Internal {
 public:
  using HasBits = decltype(std::declval<libcall_t>()._has_bits_);
  static void set_has_func_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_func_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_is_traced(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::libcall_types::strcpy_t& strcpy(const libcall_t* msg);
  static const ::libcall_types::printf_t& printf(const libcall_t* msg);
  static const ::libcall_types::atoi_t& atoi(const libcall_t* msg);
  static const ::libcall_types::malloc_t& malloc(const libcall_t* msg);
  static const ::libcall_types::getmodulehandle_t& getmodulehandle(const libcall_t* msg);
  static const ::libcall_types::getprocaddress_t& getprocaddress(const libcall_t* msg);
  static const ::libcall_types::getmainargs_t& getmainargs(const libcall_t* msg);
  static const ::libcall_types::gethostname_t& gethostname(const libcall_t* msg);
  static const ::libcall_types::free_t& free(const libcall_t* msg);
  static const ::libcall_types::memcpy_t& memcpy(const libcall_t* msg);
  static const ::libcall_types::memset_t& memset(const libcall_t* msg);
  static const ::libcall_types::fgetc_t& fgetc(const libcall_t* msg);
  static const ::libcall_types::generic_t& generic(const libcall_t* msg);
  static const ::libcall_types::read_t& read(const libcall_t* msg);
  static const ::libcall_types::strchr_t& strchr(const libcall_t* msg);
  static const ::libcall_types::exit_t& exit(const libcall_t* msg);
  static const ::libcall_types::strcmp_t& strcmp(const libcall_t* msg);
  static const ::libcall_types::ctype_b_loc_t& ctype_b_loc(const libcall_t* msg);
  static const ::libcall_types::fscanf_t& fscanf(const libcall_t* msg);
  static const ::libcall_types::strncpy_t& strncpy(const libcall_t* msg);
  static const ::libcall_types::fstat_t& fstat(const libcall_t* msg);
  static const ::libcall_types::realloc_t& realloc(const libcall_t* msg);
  static const ::libcall_types::mmap_t& mmap(const libcall_t* msg);
  static const ::libcall_types::qsort_t& qsort(const libcall_t* msg);
  static const ::libcall_types::bsearch_t& bsearch(const libcall_t* msg);
  static const ::libcall_types::open_t& open_stub(const libcall_t* msg);
  static const ::libcall_types::lseek_t& lseek(const libcall_t* msg);
  static const ::libcall_types::fread_t& fread(const libcall_t* msg);
  static const ::libcall_types::strncmp_t& strncmp(const libcall_t* msg);
  static const ::libcall_types::memcmp_t& memcmp(const libcall_t* msg);
  static const ::libcall_types::fxstat64_t& fxstat64(const libcall_t* msg);
};

const ::libcall_types::strcpy_t&
libcall_t::_Internal::strcpy(const libcall_t* msg) {
  return *msg->libcall_cnt_.strcpy_;
}
const ::libcall_types::printf_t&
libcall_t::_Internal::printf(const libcall_t* msg) {
  return *msg->libcall_cnt_.printf_;
}
const ::libcall_types::atoi_t&
libcall_t::_Internal::atoi(const libcall_t* msg) {
  return *msg->libcall_cnt_.atoi_;
}
const ::libcall_types::malloc_t&
libcall_t::_Internal::malloc(const libcall_t* msg) {
  return *msg->libcall_cnt_.malloc_;
}
const ::libcall_types::getmodulehandle_t&
libcall_t::_Internal::getmodulehandle(const libcall_t* msg) {
  return *msg->libcall_cnt_.getmodulehandle_;
}
const ::libcall_types::getprocaddress_t&
libcall_t::_Internal::getprocaddress(const libcall_t* msg) {
  return *msg->libcall_cnt_.getprocaddress_;
}
const ::libcall_types::getmainargs_t&
libcall_t::_Internal::getmainargs(const libcall_t* msg) {
  return *msg->libcall_cnt_.getmainargs_;
}
const ::libcall_types::gethostname_t&
libcall_t::_Internal::gethostname(const libcall_t* msg) {
  return *msg->libcall_cnt_.gethostname_;
}
const ::libcall_types::free_t&
libcall_t::_Internal::free(const libcall_t* msg) {
  return *msg->libcall_cnt_.free_;
}
const ::libcall_types::memcpy_t&
libcall_t::_Internal::memcpy(const libcall_t* msg) {
  return *msg->libcall_cnt_.memcpy_;
}
const ::libcall_types::memset_t&
libcall_t::_Internal::memset(const libcall_t* msg) {
  return *msg->libcall_cnt_.memset_;
}
const ::libcall_types::fgetc_t&
libcall_t::_Internal::fgetc(const libcall_t* msg) {
  return *msg->libcall_cnt_.fgetc_;
}
const ::libcall_types::generic_t&
libcall_t::_Internal::generic(const libcall_t* msg) {
  return *msg->libcall_cnt_.generic_;
}
const ::libcall_types::read_t&
libcall_t::_Internal::read(const libcall_t* msg) {
  return *msg->libcall_cnt_.read_;
}
const ::libcall_types::strchr_t&
libcall_t::_Internal::strchr(const libcall_t* msg) {
  return *msg->libcall_cnt_.strchr_;
}
const ::libcall_types::exit_t&
libcall_t::_Internal::exit(const libcall_t* msg) {
  return *msg->libcall_cnt_.exit_;
}
const ::libcall_types::strcmp_t&
libcall_t::_Internal::strcmp(const libcall_t* msg) {
  return *msg->libcall_cnt_.strcmp_;
}
const ::libcall_types::ctype_b_loc_t&
libcall_t::_Internal::ctype_b_loc(const libcall_t* msg) {
  return *msg->libcall_cnt_.ctype_b_loc_;
}
const ::libcall_types::fscanf_t&
libcall_t::_Internal::fscanf(const libcall_t* msg) {
  return *msg->libcall_cnt_.fscanf_;
}
const ::libcall_types::strncpy_t&
libcall_t::_Internal::strncpy(const libcall_t* msg) {
  return *msg->libcall_cnt_.strncpy_;
}
const ::libcall_types::fstat_t&
libcall_t::_Internal::fstat(const libcall_t* msg) {
  return *msg->libcall_cnt_.fstat_;
}
const ::libcall_types::realloc_t&
libcall_t::_Internal::realloc(const libcall_t* msg) {
  return *msg->libcall_cnt_.realloc_;
}
const ::libcall_types::mmap_t&
libcall_t::_Internal::mmap(const libcall_t* msg) {
  return *msg->libcall_cnt_.mmap_;
}
const ::libcall_types::qsort_t&
libcall_t::_Internal::qsort(const libcall_t* msg) {
  return *msg->libcall_cnt_.qsort_;
}
const ::libcall_types::bsearch_t&
libcall_t::_Internal::bsearch(const libcall_t* msg) {
  return *msg->libcall_cnt_.bsearch_;
}
const ::libcall_types::open_t&
libcall_t::_Internal::open_stub(const libcall_t* msg) {
  return *msg->libcall_cnt_.open_stub_;
}
const ::libcall_types::lseek_t&
libcall_t::_Internal::lseek(const libcall_t* msg) {
  return *msg->libcall_cnt_.lseek_;
}
const ::libcall_types::fread_t&
libcall_t::_Internal::fread(const libcall_t* msg) {
  return *msg->libcall_cnt_.fread_;
}
const ::libcall_types::strncmp_t&
libcall_t::_Internal::strncmp(const libcall_t* msg) {
  return *msg->libcall_cnt_.strncmp_;
}
const ::libcall_types::memcmp_t&
libcall_t::_Internal::memcmp(const libcall_t* msg) {
  return *msg->libcall_cnt_.memcmp_;
}
const ::libcall_types::fxstat64_t&
libcall_t::_Internal::fxstat64(const libcall_t* msg) {
  return *msg->libcall_cnt_.fxstat64_;
}
void libcall_t::set_allocated_strcpy(::libcall_types::strcpy_t* strcpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strcpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strcpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strcpy, submessage_arena);
    }
    set_has_strcpy();
    libcall_cnt_.strcpy_ = strcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strcpy)
}
void libcall_t::set_allocated_printf(::libcall_types::printf_t* printf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (printf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      printf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printf, submessage_arena);
    }
    set_has_printf();
    libcall_cnt_.printf_ = printf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.printf)
}
void libcall_t::set_allocated_atoi(::libcall_types::atoi_t* atoi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (atoi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      atoi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, atoi, submessage_arena);
    }
    set_has_atoi();
    libcall_cnt_.atoi_ = atoi;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.atoi)
}
void libcall_t::set_allocated_malloc(::libcall_types::malloc_t* malloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (malloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      malloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, malloc, submessage_arena);
    }
    set_has_malloc();
    libcall_cnt_.malloc_ = malloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.malloc)
}
void libcall_t::set_allocated_getmodulehandle(::libcall_types::getmodulehandle_t* getmodulehandle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (getmodulehandle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getmodulehandle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmodulehandle, submessage_arena);
    }
    set_has_getmodulehandle();
    libcall_cnt_.getmodulehandle_ = getmodulehandle;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.getmodulehandle)
}
void libcall_t::set_allocated_getprocaddress(::libcall_types::getprocaddress_t* getprocaddress) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (getprocaddress) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getprocaddress = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getprocaddress, submessage_arena);
    }
    set_has_getprocaddress();
    libcall_cnt_.getprocaddress_ = getprocaddress;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.getprocaddress)
}
void libcall_t::set_allocated_getmainargs(::libcall_types::getmainargs_t* getmainargs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (getmainargs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      getmainargs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, getmainargs, submessage_arena);
    }
    set_has_getmainargs();
    libcall_cnt_.getmainargs_ = getmainargs;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.getmainargs)
}
void libcall_t::set_allocated_gethostname(::libcall_types::gethostname_t* gethostname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (gethostname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gethostname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gethostname, submessage_arena);
    }
    set_has_gethostname();
    libcall_cnt_.gethostname_ = gethostname;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.gethostname)
}
void libcall_t::set_allocated_free(::libcall_types::free_t* free) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (free) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      free = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, free, submessage_arena);
    }
    set_has_free();
    libcall_cnt_.free_ = free;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.free)
}
void libcall_t::set_allocated_memcpy(::libcall_types::memcpy_t* memcpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (memcpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memcpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memcpy, submessage_arena);
    }
    set_has_memcpy();
    libcall_cnt_.memcpy_ = memcpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.memcpy)
}
void libcall_t::set_allocated_memset(::libcall_types::memset_t* memset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (memset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memset, submessage_arena);
    }
    set_has_memset();
    libcall_cnt_.memset_ = memset;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.memset)
}
void libcall_t::set_allocated_fgetc(::libcall_types::fgetc_t* fgetc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fgetc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fgetc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fgetc, submessage_arena);
    }
    set_has_fgetc();
    libcall_cnt_.fgetc_ = fgetc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fgetc)
}
void libcall_t::set_allocated_generic(::libcall_types::generic_t* generic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (generic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic, submessage_arena);
    }
    set_has_generic();
    libcall_cnt_.generic_ = generic;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.generic)
}
void libcall_t::set_allocated_read(::libcall_types::read_t* read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read, submessage_arena);
    }
    set_has_read();
    libcall_cnt_.read_ = read;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.read)
}
void libcall_t::set_allocated_strchr(::libcall_types::strchr_t* strchr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strchr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strchr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strchr, submessage_arena);
    }
    set_has_strchr();
    libcall_cnt_.strchr_ = strchr;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strchr)
}
void libcall_t::set_allocated_exit(::libcall_types::exit_t* exit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (exit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      exit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exit, submessage_arena);
    }
    set_has_exit();
    libcall_cnt_.exit_ = exit;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.exit)
}
void libcall_t::set_allocated_strcmp(::libcall_types::strcmp_t* strcmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strcmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strcmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strcmp, submessage_arena);
    }
    set_has_strcmp();
    libcall_cnt_.strcmp_ = strcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strcmp)
}
void libcall_t::set_allocated_ctype_b_loc(::libcall_types::ctype_b_loc_t* ctype_b_loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (ctype_b_loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ctype_b_loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ctype_b_loc, submessage_arena);
    }
    set_has_ctype_b_loc();
    libcall_cnt_.ctype_b_loc_ = ctype_b_loc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.ctype_b_loc)
}
void libcall_t::set_allocated_fscanf(::libcall_types::fscanf_t* fscanf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fscanf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fscanf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fscanf, submessage_arena);
    }
    set_has_fscanf();
    libcall_cnt_.fscanf_ = fscanf;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fscanf)
}
void libcall_t::set_allocated_strncpy(::libcall_types::strncpy_t* strncpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strncpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strncpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strncpy, submessage_arena);
    }
    set_has_strncpy();
    libcall_cnt_.strncpy_ = strncpy;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strncpy)
}
void libcall_t::set_allocated_fstat(::libcall_types::fstat_t* fstat) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fstat) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fstat = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fstat, submessage_arena);
    }
    set_has_fstat();
    libcall_cnt_.fstat_ = fstat;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fstat)
}
void libcall_t::set_allocated_realloc(::libcall_types::realloc_t* realloc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (realloc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      realloc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, realloc, submessage_arena);
    }
    set_has_realloc();
    libcall_cnt_.realloc_ = realloc;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.realloc)
}
void libcall_t::set_allocated_mmap(::libcall_types::mmap_t* mmap) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (mmap) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mmap = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mmap, submessage_arena);
    }
    set_has_mmap();
    libcall_cnt_.mmap_ = mmap;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.mmap)
}
void libcall_t::set_allocated_qsort(::libcall_types::qsort_t* qsort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (qsort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      qsort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qsort, submessage_arena);
    }
    set_has_qsort();
    libcall_cnt_.qsort_ = qsort;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.qsort)
}
void libcall_t::set_allocated_bsearch(::libcall_types::bsearch_t* bsearch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (bsearch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bsearch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bsearch, submessage_arena);
    }
    set_has_bsearch();
    libcall_cnt_.bsearch_ = bsearch;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.bsearch)
}
void libcall_t::set_allocated_open_stub(::libcall_types::open_t* open_stub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (open_stub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_stub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_stub, submessage_arena);
    }
    set_has_open_stub();
    libcall_cnt_.open_stub_ = open_stub;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.open_stub)
}
void libcall_t::set_allocated_lseek(::libcall_types::lseek_t* lseek) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (lseek) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lseek = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lseek, submessage_arena);
    }
    set_has_lseek();
    libcall_cnt_.lseek_ = lseek;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.lseek)
}
void libcall_t::set_allocated_fread(::libcall_types::fread_t* fread) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fread) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fread = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fread, submessage_arena);
    }
    set_has_fread();
    libcall_cnt_.fread_ = fread;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fread)
}
void libcall_t::set_allocated_strncmp(::libcall_types::strncmp_t* strncmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (strncmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      strncmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, strncmp, submessage_arena);
    }
    set_has_strncmp();
    libcall_cnt_.strncmp_ = strncmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.strncmp)
}
void libcall_t::set_allocated_memcmp(::libcall_types::memcmp_t* memcmp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (memcmp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memcmp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memcmp, submessage_arena);
    }
    set_has_memcmp();
    libcall_cnt_.memcmp_ = memcmp;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.memcmp)
}
void libcall_t::set_allocated_fxstat64(::libcall_types::fxstat64_t* fxstat64) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_libcall_cnt();
  if (fxstat64) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fxstat64 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fxstat64, submessage_arena);
    }
    set_has_fxstat64();
    libcall_cnt_.fxstat64_ = fxstat64;
  }
  // @@protoc_insertion_point(field_set_allocated:libcall_types.libcall_t.fxstat64)
}
libcall_t::libcall_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.libcall_t)
}
libcall_t::libcall_t(const libcall_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_func_name()) {
    func_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func_name_);
  }
  ::memcpy(&func_addr_, &from.func_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&func_addr_)) + sizeof(ident_));
  clear_has_libcall_cnt();
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_t::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_t::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_t::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_t::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_t::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_t::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_t::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_t::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_t::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_t::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_t::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_t::MergeFrom(from.fgetc());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_t::MergeFrom(from.generic());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_t::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_t::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_t::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_t::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_t::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_t::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_t::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_t::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_t::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_t::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_t::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_t::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_t::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_t::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_t::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_t::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_t::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_t::MergeFrom(from.fxstat64());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:libcall_types.libcall_t)
}

void libcall_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_libcall_t_libcall_2eproto.base);
  func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&func_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ident_) -
      reinterpret_cast<char*>(&func_addr_)) + sizeof(ident_));
  clear_has_libcall_cnt();
}

libcall_t::~libcall_t() {
  // @@protoc_insertion_point(destructor:libcall_types.libcall_t)
  SharedDtor();
}

void libcall_t::SharedDtor() {
  func_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_libcall_cnt()) {
    clear_libcall_cnt();
  }
}

void libcall_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const libcall_t& libcall_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_libcall_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void libcall_t::clear_libcall_cnt() {
// @@protoc_insertion_point(one_of_clear_start:libcall_types.libcall_t)
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      delete libcall_cnt_.strcpy_;
      break;
    }
    case kPrintf: {
      delete libcall_cnt_.printf_;
      break;
    }
    case kAtoi: {
      delete libcall_cnt_.atoi_;
      break;
    }
    case kMalloc: {
      delete libcall_cnt_.malloc_;
      break;
    }
    case kGetmodulehandle: {
      delete libcall_cnt_.getmodulehandle_;
      break;
    }
    case kGetprocaddress: {
      delete libcall_cnt_.getprocaddress_;
      break;
    }
    case kGetmainargs: {
      delete libcall_cnt_.getmainargs_;
      break;
    }
    case kGethostname: {
      delete libcall_cnt_.gethostname_;
      break;
    }
    case kFree: {
      delete libcall_cnt_.free_;
      break;
    }
    case kMemcpy: {
      delete libcall_cnt_.memcpy_;
      break;
    }
    case kMemset: {
      delete libcall_cnt_.memset_;
      break;
    }
    case kFgetc: {
      delete libcall_cnt_.fgetc_;
      break;
    }
    case kGeneric: {
      delete libcall_cnt_.generic_;
      break;
    }
    case kRead: {
      delete libcall_cnt_.read_;
      break;
    }
    case kStrchr: {
      delete libcall_cnt_.strchr_;
      break;
    }
    case kExit: {
      delete libcall_cnt_.exit_;
      break;
    }
    case kStrcmp: {
      delete libcall_cnt_.strcmp_;
      break;
    }
    case kCtypeBLoc: {
      delete libcall_cnt_.ctype_b_loc_;
      break;
    }
    case kFscanf: {
      delete libcall_cnt_.fscanf_;
      break;
    }
    case kStrncpy: {
      delete libcall_cnt_.strncpy_;
      break;
    }
    case kFstat: {
      delete libcall_cnt_.fstat_;
      break;
    }
    case kRealloc: {
      delete libcall_cnt_.realloc_;
      break;
    }
    case kMmap: {
      delete libcall_cnt_.mmap_;
      break;
    }
    case kQsort: {
      delete libcall_cnt_.qsort_;
      break;
    }
    case kBsearch: {
      delete libcall_cnt_.bsearch_;
      break;
    }
    case kOpenStub: {
      delete libcall_cnt_.open_stub_;
      break;
    }
    case kLseek: {
      delete libcall_cnt_.lseek_;
      break;
    }
    case kFread: {
      delete libcall_cnt_.fread_;
      break;
    }
    case kStrncmp: {
      delete libcall_cnt_.strncmp_;
      break;
    }
    case kMemcmp: {
      delete libcall_cnt_.memcmp_;
      break;
    }
    case kFxstat64: {
      delete libcall_cnt_.fxstat64_;
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = LIBCALL_CNT_NOT_SET;
}


void libcall_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.libcall_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    func_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&func_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ident_) -
        reinterpret_cast<char*>(&func_addr_)) + sizeof(ident_));
  }
  clear_libcall_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* libcall_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 func_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_func_addr(&has_bits);
          func_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string func_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_func_name(), ptr, ctx, "libcall_types.libcall_t.func_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool is_traced = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_is_traced(&has_bits);
          is_traced_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .libcall_types.lib_ident ident = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::libcall_types::lib_ident_IsValid(val))) {
            set_ident(static_cast<::libcall_types::lib_ident>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strcpy_t strcpy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_strcpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.printf_t printf = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_printf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.atoi_t atoi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_atoi(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.malloc_t malloc = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_malloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.getmodulehandle_t getmodulehandle = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_getmodulehandle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.getprocaddress_t getprocaddress = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_getprocaddress(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.getmainargs_t getmainargs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_getmainargs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.gethostname_t gethostname = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_gethostname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.free_t free = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_free(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.memcpy_t memcpy = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_memcpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.memset_t memset = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_memset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fgetc_t fgetc = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_fgetc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.generic_t generic = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_generic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.read_t read = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strchr_t strchr = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_strchr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.exit_t exit = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_exit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strcmp_t strcmp = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_strcmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.ctype_b_loc_t ctype_b_loc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_ctype_b_loc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fscanf_t fscanf = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_fscanf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strncpy_t strncpy = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_strncpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fstat_t fstat = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_fstat(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.realloc_t realloc = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_realloc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.mmap_t mmap = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_mmap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.qsort_t qsort = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_qsort(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.bsearch_t bsearch = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_bsearch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.open_t open_stub = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_open_stub(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.lseek_t lseek = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(mutable_lseek(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fread_t fread = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_fread(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.strncmp_t strncmp = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_strncmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.memcmp_t memcmp = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_memcmp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .libcall_types.fxstat64_t fxstat64 = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_fxstat64(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool libcall_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.libcall_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 func_addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_func_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &func_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string func_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_func_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->func_name().data(), static_cast<int>(this->func_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "libcall_types.libcall_t.func_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_traced = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_is_traced(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_traced_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .libcall_types.lib_ident ident = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::libcall_types::lib_ident_IsValid(value)) {
            set_ident(static_cast< ::libcall_types::lib_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcpy_t strcpy = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.printf_t printf = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_printf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.atoi_t atoi = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_atoi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.malloc_t malloc = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_malloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmodulehandle_t getmodulehandle = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_getmodulehandle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getprocaddress_t getprocaddress = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_getprocaddress()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.getmainargs_t getmainargs = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_getmainargs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.gethostname_t gethostname = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_gethostname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.free_t free = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_free()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcpy_t memcpy = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memcpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memset_t memset = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fgetc_t fgetc = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fgetc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.generic_t generic = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.read_t read = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strchr_t strchr = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strchr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.exit_t exit = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_exit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strcmp_t strcmp = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.ctype_b_loc_t ctype_b_loc = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ctype_b_loc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fscanf_t fscanf = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fscanf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncpy_t strncpy = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strncpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fstat_t fstat = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fstat()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.realloc_t realloc = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_realloc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.mmap_t mmap = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mmap()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.qsort_t qsort = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_qsort()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.bsearch_t bsearch = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_bsearch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.open_t open_stub = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_open_stub()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.lseek_t lseek = 32;
      case 32: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (258 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_lseek()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fread_t fread = 33;
      case 33: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (266 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fread()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.strncmp_t strncmp = 34;
      case 34: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (274 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_strncmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.memcmp_t memcmp = 35;
      case 35: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (282 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_memcmp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .libcall_types.fxstat64_t fxstat64 = 36;
      case 36: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (290 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_fxstat64()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.libcall_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.libcall_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void libcall_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.libcall_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 func_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->func_addr(), output);
  }

  // required string func_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_name().data(), static_cast<int>(this->func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_t.func_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->func_name(), output);
  }

  // required bool is_traced = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->is_traced(), output);
  }

  // required .libcall_types.lib_ident ident = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ident(), output);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::strcpy(this), output);
      break;
    case kPrintf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::printf(this), output);
      break;
    case kAtoi:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::atoi(this), output);
      break;
    case kMalloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, _Internal::malloc(this), output);
      break;
    case kGetmodulehandle:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, _Internal::getmodulehandle(this), output);
      break;
    case kGetprocaddress:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        10, _Internal::getprocaddress(this), output);
      break;
    case kGetmainargs:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        11, _Internal::getmainargs(this), output);
      break;
    case kGethostname:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        12, _Internal::gethostname(this), output);
      break;
    case kFree:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        13, _Internal::free(this), output);
      break;
    case kMemcpy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        14, _Internal::memcpy(this), output);
      break;
    case kMemset:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        15, _Internal::memset(this), output);
      break;
    case kFgetc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        16, _Internal::fgetc(this), output);
      break;
    case kGeneric:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        17, _Internal::generic(this), output);
      break;
    case kRead:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        18, _Internal::read(this), output);
      break;
    case kStrchr:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        19, _Internal::strchr(this), output);
      break;
    case kExit:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        20, _Internal::exit(this), output);
      break;
    case kStrcmp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        21, _Internal::strcmp(this), output);
      break;
    case kCtypeBLoc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        23, _Internal::ctype_b_loc(this), output);
      break;
    case kFscanf:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        24, _Internal::fscanf(this), output);
      break;
    case kStrncpy:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        25, _Internal::strncpy(this), output);
      break;
    case kFstat:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        26, _Internal::fstat(this), output);
      break;
    case kRealloc:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        27, _Internal::realloc(this), output);
      break;
    case kMmap:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        28, _Internal::mmap(this), output);
      break;
    case kQsort:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        29, _Internal::qsort(this), output);
      break;
    case kBsearch:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        30, _Internal::bsearch(this), output);
      break;
    case kOpenStub:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        31, _Internal::open_stub(this), output);
      break;
    case kLseek:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        32, _Internal::lseek(this), output);
      break;
    case kFread:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        33, _Internal::fread(this), output);
      break;
    case kStrncmp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        34, _Internal::strncmp(this), output);
      break;
    case kMemcmp:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        35, _Internal::memcmp(this), output);
      break;
    case kFxstat64:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        36, _Internal::fxstat64(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.libcall_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* libcall_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.libcall_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 func_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->func_addr(), target);
  }

  // required string func_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->func_name().data(), static_cast<int>(this->func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "libcall_types.libcall_t.func_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->func_name(), target);
  }

  // required bool is_traced = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->is_traced(), target);
  }

  // required .libcall_types.lib_ident ident = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ident(), target);
  }

  switch (libcall_cnt_case()) {
    case kStrcpy:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::strcpy(this), target);
      break;
    case kPrintf:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::printf(this), target);
      break;
    case kAtoi:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::atoi(this), target);
      break;
    case kMalloc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, _Internal::malloc(this), target);
      break;
    case kGetmodulehandle:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, _Internal::getmodulehandle(this), target);
      break;
    case kGetprocaddress:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          10, _Internal::getprocaddress(this), target);
      break;
    case kGetmainargs:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          11, _Internal::getmainargs(this), target);
      break;
    case kGethostname:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          12, _Internal::gethostname(this), target);
      break;
    case kFree:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          13, _Internal::free(this), target);
      break;
    case kMemcpy:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          14, _Internal::memcpy(this), target);
      break;
    case kMemset:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          15, _Internal::memset(this), target);
      break;
    case kFgetc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          16, _Internal::fgetc(this), target);
      break;
    case kGeneric:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          17, _Internal::generic(this), target);
      break;
    case kRead:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          18, _Internal::read(this), target);
      break;
    case kStrchr:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          19, _Internal::strchr(this), target);
      break;
    case kExit:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          20, _Internal::exit(this), target);
      break;
    case kStrcmp:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          21, _Internal::strcmp(this), target);
      break;
    case kCtypeBLoc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          23, _Internal::ctype_b_loc(this), target);
      break;
    case kFscanf:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          24, _Internal::fscanf(this), target);
      break;
    case kStrncpy:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          25, _Internal::strncpy(this), target);
      break;
    case kFstat:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          26, _Internal::fstat(this), target);
      break;
    case kRealloc:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          27, _Internal::realloc(this), target);
      break;
    case kMmap:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          28, _Internal::mmap(this), target);
      break;
    case kQsort:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          29, _Internal::qsort(this), target);
      break;
    case kBsearch:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          30, _Internal::bsearch(this), target);
      break;
    case kOpenStub:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          31, _Internal::open_stub(this), target);
      break;
    case kLseek:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          32, _Internal::lseek(this), target);
      break;
    case kFread:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          33, _Internal::fread(this), target);
      break;
    case kStrncmp:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          34, _Internal::strncmp(this), target);
      break;
    case kMemcmp:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          35, _Internal::memcmp(this), target);
      break;
    case kFxstat64:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          36, _Internal::fxstat64(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.libcall_t)
  return target;
}

size_t libcall_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.libcall_t)
  size_t total_size = 0;

  if (has_func_name()) {
    // required string func_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->func_name());
  }

  if (has_func_addr()) {
    // required uint64 func_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->func_addr());
  }

  if (has_is_traced()) {
    // required bool is_traced = 3;
    total_size += 1 + 1;
  }

  if (has_ident()) {
    // required .libcall_types.lib_ident ident = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());
  }

  return total_size;
}
size_t libcall_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.libcall_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string func_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->func_name());

    // required uint64 func_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->func_addr());

    // required bool is_traced = 3;
    total_size += 1 + 1;

    // required .libcall_types.lib_ident ident = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (libcall_cnt_case()) {
    // optional .libcall_types.strcpy_t strcpy = 5;
    case kStrcpy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strcpy_);
      break;
    }
    // optional .libcall_types.printf_t printf = 6;
    case kPrintf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.printf_);
      break;
    }
    // optional .libcall_types.atoi_t atoi = 7;
    case kAtoi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.atoi_);
      break;
    }
    // optional .libcall_types.malloc_t malloc = 8;
    case kMalloc: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.malloc_);
      break;
    }
    // optional .libcall_types.getmodulehandle_t getmodulehandle = 9;
    case kGetmodulehandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.getmodulehandle_);
      break;
    }
    // optional .libcall_types.getprocaddress_t getprocaddress = 10;
    case kGetprocaddress: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.getprocaddress_);
      break;
    }
    // optional .libcall_types.getmainargs_t getmainargs = 11;
    case kGetmainargs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.getmainargs_);
      break;
    }
    // optional .libcall_types.gethostname_t gethostname = 12;
    case kGethostname: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.gethostname_);
      break;
    }
    // optional .libcall_types.free_t free = 13;
    case kFree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.free_);
      break;
    }
    // optional .libcall_types.memcpy_t memcpy = 14;
    case kMemcpy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.memcpy_);
      break;
    }
    // optional .libcall_types.memset_t memset = 15;
    case kMemset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.memset_);
      break;
    }
    // optional .libcall_types.fgetc_t fgetc = 16;
    case kFgetc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fgetc_);
      break;
    }
    // optional .libcall_types.generic_t generic = 17;
    case kGeneric: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.generic_);
      break;
    }
    // optional .libcall_types.read_t read = 18;
    case kRead: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.read_);
      break;
    }
    // optional .libcall_types.strchr_t strchr = 19;
    case kStrchr: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strchr_);
      break;
    }
    // optional .libcall_types.exit_t exit = 20;
    case kExit: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.exit_);
      break;
    }
    // optional .libcall_types.strcmp_t strcmp = 21;
    case kStrcmp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strcmp_);
      break;
    }
    // optional .libcall_types.ctype_b_loc_t ctype_b_loc = 23;
    case kCtypeBLoc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.ctype_b_loc_);
      break;
    }
    // optional .libcall_types.fscanf_t fscanf = 24;
    case kFscanf: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fscanf_);
      break;
    }
    // optional .libcall_types.strncpy_t strncpy = 25;
    case kStrncpy: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strncpy_);
      break;
    }
    // optional .libcall_types.fstat_t fstat = 26;
    case kFstat: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fstat_);
      break;
    }
    // optional .libcall_types.realloc_t realloc = 27;
    case kRealloc: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.realloc_);
      break;
    }
    // optional .libcall_types.mmap_t mmap = 28;
    case kMmap: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.mmap_);
      break;
    }
    // optional .libcall_types.qsort_t qsort = 29;
    case kQsort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.qsort_);
      break;
    }
    // optional .libcall_types.bsearch_t bsearch = 30;
    case kBsearch: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.bsearch_);
      break;
    }
    // optional .libcall_types.open_t open_stub = 31;
    case kOpenStub: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.open_stub_);
      break;
    }
    // optional .libcall_types.lseek_t lseek = 32;
    case kLseek: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.lseek_);
      break;
    }
    // optional .libcall_types.fread_t fread = 33;
    case kFread: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fread_);
      break;
    }
    // optional .libcall_types.strncmp_t strncmp = 34;
    case kStrncmp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.strncmp_);
      break;
    }
    // optional .libcall_types.memcmp_t memcmp = 35;
    case kMemcmp: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.memcmp_);
      break;
    }
    // optional .libcall_types.fxstat64_t fxstat64 = 36;
    case kFxstat64: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *libcall_cnt_.fxstat64_);
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void libcall_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.libcall_t)
  GOOGLE_DCHECK_NE(&from, this);
  const libcall_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<libcall_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.libcall_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.libcall_t)
    MergeFrom(*source);
  }
}

void libcall_t::MergeFrom(const libcall_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.libcall_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      func_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.func_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      func_addr_ = from.func_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_traced_ = from.is_traced_;
    }
    if (cached_has_bits & 0x00000008u) {
      ident_ = from.ident_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.libcall_cnt_case()) {
    case kStrcpy: {
      mutable_strcpy()->::libcall_types::strcpy_t::MergeFrom(from.strcpy());
      break;
    }
    case kPrintf: {
      mutable_printf()->::libcall_types::printf_t::MergeFrom(from.printf());
      break;
    }
    case kAtoi: {
      mutable_atoi()->::libcall_types::atoi_t::MergeFrom(from.atoi());
      break;
    }
    case kMalloc: {
      mutable_malloc()->::libcall_types::malloc_t::MergeFrom(from.malloc());
      break;
    }
    case kGetmodulehandle: {
      mutable_getmodulehandle()->::libcall_types::getmodulehandle_t::MergeFrom(from.getmodulehandle());
      break;
    }
    case kGetprocaddress: {
      mutable_getprocaddress()->::libcall_types::getprocaddress_t::MergeFrom(from.getprocaddress());
      break;
    }
    case kGetmainargs: {
      mutable_getmainargs()->::libcall_types::getmainargs_t::MergeFrom(from.getmainargs());
      break;
    }
    case kGethostname: {
      mutable_gethostname()->::libcall_types::gethostname_t::MergeFrom(from.gethostname());
      break;
    }
    case kFree: {
      mutable_free()->::libcall_types::free_t::MergeFrom(from.free());
      break;
    }
    case kMemcpy: {
      mutable_memcpy()->::libcall_types::memcpy_t::MergeFrom(from.memcpy());
      break;
    }
    case kMemset: {
      mutable_memset()->::libcall_types::memset_t::MergeFrom(from.memset());
      break;
    }
    case kFgetc: {
      mutable_fgetc()->::libcall_types::fgetc_t::MergeFrom(from.fgetc());
      break;
    }
    case kGeneric: {
      mutable_generic()->::libcall_types::generic_t::MergeFrom(from.generic());
      break;
    }
    case kRead: {
      mutable_read()->::libcall_types::read_t::MergeFrom(from.read());
      break;
    }
    case kStrchr: {
      mutable_strchr()->::libcall_types::strchr_t::MergeFrom(from.strchr());
      break;
    }
    case kExit: {
      mutable_exit()->::libcall_types::exit_t::MergeFrom(from.exit());
      break;
    }
    case kStrcmp: {
      mutable_strcmp()->::libcall_types::strcmp_t::MergeFrom(from.strcmp());
      break;
    }
    case kCtypeBLoc: {
      mutable_ctype_b_loc()->::libcall_types::ctype_b_loc_t::MergeFrom(from.ctype_b_loc());
      break;
    }
    case kFscanf: {
      mutable_fscanf()->::libcall_types::fscanf_t::MergeFrom(from.fscanf());
      break;
    }
    case kStrncpy: {
      mutable_strncpy()->::libcall_types::strncpy_t::MergeFrom(from.strncpy());
      break;
    }
    case kFstat: {
      mutable_fstat()->::libcall_types::fstat_t::MergeFrom(from.fstat());
      break;
    }
    case kRealloc: {
      mutable_realloc()->::libcall_types::realloc_t::MergeFrom(from.realloc());
      break;
    }
    case kMmap: {
      mutable_mmap()->::libcall_types::mmap_t::MergeFrom(from.mmap());
      break;
    }
    case kQsort: {
      mutable_qsort()->::libcall_types::qsort_t::MergeFrom(from.qsort());
      break;
    }
    case kBsearch: {
      mutable_bsearch()->::libcall_types::bsearch_t::MergeFrom(from.bsearch());
      break;
    }
    case kOpenStub: {
      mutable_open_stub()->::libcall_types::open_t::MergeFrom(from.open_stub());
      break;
    }
    case kLseek: {
      mutable_lseek()->::libcall_types::lseek_t::MergeFrom(from.lseek());
      break;
    }
    case kFread: {
      mutable_fread()->::libcall_types::fread_t::MergeFrom(from.fread());
      break;
    }
    case kStrncmp: {
      mutable_strncmp()->::libcall_types::strncmp_t::MergeFrom(from.strncmp());
      break;
    }
    case kMemcmp: {
      mutable_memcmp()->::libcall_types::memcmp_t::MergeFrom(from.memcmp());
      break;
    }
    case kFxstat64: {
      mutable_fxstat64()->::libcall_types::fxstat64_t::MergeFrom(from.fxstat64());
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
}

void libcall_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.libcall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void libcall_t::CopyFrom(const libcall_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.libcall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool libcall_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  switch (libcall_cnt_case()) {
    case kStrcpy: {
      if (has_strcpy()) {
        if (!this->strcpy().IsInitialized()) return false;
      }
      break;
    }
    case kPrintf: {
      if (has_printf()) {
        if (!this->printf().IsInitialized()) return false;
      }
      break;
    }
    case kAtoi: {
      if (has_atoi()) {
        if (!this->atoi().IsInitialized()) return false;
      }
      break;
    }
    case kMalloc: {
      if (has_malloc()) {
        if (!this->malloc().IsInitialized()) return false;
      }
      break;
    }
    case kGetmodulehandle: {
      if (has_getmodulehandle()) {
        if (!this->getmodulehandle().IsInitialized()) return false;
      }
      break;
    }
    case kGetprocaddress: {
      if (has_getprocaddress()) {
        if (!this->getprocaddress().IsInitialized()) return false;
      }
      break;
    }
    case kGetmainargs: {
      if (has_getmainargs()) {
        if (!this->getmainargs().IsInitialized()) return false;
      }
      break;
    }
    case kGethostname: {
      if (has_gethostname()) {
        if (!this->gethostname().IsInitialized()) return false;
      }
      break;
    }
    case kFree: {
      if (has_free()) {
        if (!this->free().IsInitialized()) return false;
      }
      break;
    }
    case kMemcpy: {
      if (has_memcpy()) {
        if (!this->memcpy().IsInitialized()) return false;
      }
      break;
    }
    case kMemset: {
      if (has_memset()) {
        if (!this->memset().IsInitialized()) return false;
      }
      break;
    }
    case kFgetc: {
      if (has_fgetc()) {
        if (!this->fgetc().IsInitialized()) return false;
      }
      break;
    }
    case kGeneric: {
      if (has_generic()) {
        if (!this->generic().IsInitialized()) return false;
      }
      break;
    }
    case kRead: {
      if (has_read()) {
        if (!this->read().IsInitialized()) return false;
      }
      break;
    }
    case kStrchr: {
      if (has_strchr()) {
        if (!this->strchr().IsInitialized()) return false;
      }
      break;
    }
    case kExit: {
      break;
    }
    case kStrcmp: {
      if (has_strcmp()) {
        if (!this->strcmp().IsInitialized()) return false;
      }
      break;
    }
    case kCtypeBLoc: {
      if (has_ctype_b_loc()) {
        if (!this->ctype_b_loc().IsInitialized()) return false;
      }
      break;
    }
    case kFscanf: {
      if (has_fscanf()) {
        if (!this->fscanf().IsInitialized()) return false;
      }
      break;
    }
    case kStrncpy: {
      if (has_strncpy()) {
        if (!this->strncpy().IsInitialized()) return false;
      }
      break;
    }
    case kFstat: {
      if (has_fstat()) {
        if (!this->fstat().IsInitialized()) return false;
      }
      break;
    }
    case kRealloc: {
      if (has_realloc()) {
        if (!this->realloc().IsInitialized()) return false;
      }
      break;
    }
    case kMmap: {
      if (has_mmap()) {
        if (!this->mmap().IsInitialized()) return false;
      }
      break;
    }
    case kQsort: {
      if (has_qsort()) {
        if (!this->qsort().IsInitialized()) return false;
      }
      break;
    }
    case kBsearch: {
      if (has_bsearch()) {
        if (!this->bsearch().IsInitialized()) return false;
      }
      break;
    }
    case kOpenStub: {
      if (has_open_stub()) {
        if (!this->open_stub().IsInitialized()) return false;
      }
      break;
    }
    case kLseek: {
      if (has_lseek()) {
        if (!this->lseek().IsInitialized()) return false;
      }
      break;
    }
    case kFread: {
      if (has_fread()) {
        if (!this->fread().IsInitialized()) return false;
      }
      break;
    }
    case kStrncmp: {
      if (has_strncmp()) {
        if (!this->strncmp().IsInitialized()) return false;
      }
      break;
    }
    case kMemcmp: {
      if (has_memcmp()) {
        if (!this->memcmp().IsInitialized()) return false;
      }
      break;
    }
    case kFxstat64: {
      if (has_fxstat64()) {
        if (!this->fxstat64().IsInitialized()) return false;
      }
      break;
    }
    case LIBCALL_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void libcall_t::InternalSwap(libcall_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  func_name_.Swap(&other->func_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(func_addr_, other->func_addr_);
  swap(is_traced_, other->is_traced_);
  swap(ident_, other->ident_);
  swap(libcall_cnt_, other->libcall_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata libcall_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void generic_pol::InitAsDefaultInstance() {
}
class generic_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<generic_pol>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

generic_pol::generic_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.generic_pol)
}
generic_pol::generic_pol(const generic_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.generic_pol)
}

void generic_pol::SharedCtor() {
  ret_ = 0;
}

generic_pol::~generic_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.generic_pol)
  SharedDtor();
}

void generic_pol::SharedDtor() {
}

void generic_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const generic_pol& generic_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_generic_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void generic_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.generic_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* generic_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool generic_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.generic_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.generic_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.generic_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void generic_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.generic_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.generic_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* generic_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.generic_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.generic_pol)
  return target;
}

size_t generic_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.generic_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.action ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void generic_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.generic_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const generic_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<generic_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.generic_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.generic_pol)
    MergeFrom(*source);
  }
}

void generic_pol::MergeFrom(const generic_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.generic_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ret()) {
    set_ret(from.ret());
  }
}

void generic_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.generic_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generic_pol::CopyFrom(const generic_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.generic_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generic_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void generic_pol::InternalSwap(generic_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata generic_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ctype_b_loc_pol::InitAsDefaultInstance() {
  ::libcall_types::_ctype_b_loc_pol_default_instance_._instance.get_mutable()->table_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class ctype_b_loc_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<ctype_b_loc_pol>()._has_bits_);
  static const ::common::memory_pol& table(const ctype_b_loc_pol* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_pol&
ctype_b_loc_pol::_Internal::table(const ctype_b_loc_pol* msg) {
  return *msg->table_;
}
void ctype_b_loc_pol::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ctype_b_loc_pol::ctype_b_loc_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.ctype_b_loc_pol)
}
ctype_b_loc_pol::ctype_b_loc_pol(const ctype_b_loc_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::common::memory_pol(*from.table_);
  } else {
    table_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.ctype_b_loc_pol)
}

void ctype_b_loc_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ctype_b_loc_pol_libcall_2eproto.base);
  ::memset(&table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&table_)) + sizeof(ret_));
}

ctype_b_loc_pol::~ctype_b_loc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.ctype_b_loc_pol)
  SharedDtor();
}

void ctype_b_loc_pol::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
}

void ctype_b_loc_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ctype_b_loc_pol& ctype_b_loc_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ctype_b_loc_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void ctype_b_loc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.ctype_b_loc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_ != nullptr);
    table_->Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ctype_b_loc_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ctype_b_loc_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.ctype_b_loc_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol table = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.ctype_b_loc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.ctype_b_loc_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ctype_b_loc_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.ctype_b_loc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::table(this), output);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.ctype_b_loc_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* ctype_b_loc_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.ctype_b_loc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table(this), target);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.ctype_b_loc_pol)
  return target;
}

size_t ctype_b_loc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.ctype_b_loc_pol)
  size_t total_size = 0;

  if (has_table()) {
    // required .common.memory_pol table = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_);
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t ctype_b_loc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.ctype_b_loc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol table = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_);

    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ctype_b_loc_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.ctype_b_loc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const ctype_b_loc_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ctype_b_loc_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.ctype_b_loc_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.ctype_b_loc_pol)
    MergeFrom(*source);
  }
}

void ctype_b_loc_pol::MergeFrom(const ctype_b_loc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.ctype_b_loc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_table()->::common::memory_pol::MergeFrom(from.table());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ctype_b_loc_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.ctype_b_loc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctype_b_loc_pol::CopyFrom(const ctype_b_loc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.ctype_b_loc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctype_b_loc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void ctype_b_loc_pol::InternalSwap(ctype_b_loc_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(table_, other->table_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ctype_b_loc_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void exit_pol::InitAsDefaultInstance() {
}
class exit_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<exit_pol>()._has_bits_);
};

exit_pol::exit_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.exit_pol)
}
exit_pol::exit_pol(const exit_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.exit_pol)
}

void exit_pol::SharedCtor() {
}

exit_pol::~exit_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.exit_pol)
  SharedDtor();
}

void exit_pol::SharedDtor() {
}

void exit_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const exit_pol& exit_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_exit_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void exit_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.exit_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* exit_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool exit_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.exit_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.exit_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.exit_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void exit_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.exit_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.exit_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.exit_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.exit_pol)
  return target;
}

size_t exit_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.exit_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void exit_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.exit_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<exit_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.exit_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.exit_pol)
    MergeFrom(*source);
  }
}

void exit_pol::MergeFrom(const exit_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.exit_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void exit_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.exit_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_pol::CopyFrom(const exit_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.exit_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_pol::IsInitialized() const {
  return true;
}

void exit_pol::InternalSwap(exit_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fscanf_pol::InitAsDefaultInstance() {
}
class fscanf_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<fscanf_pol>()._has_bits_);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_elems(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

fscanf_pol::fscanf_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fscanf_pol)
}
fscanf_pol::fscanf_pol(const fscanf_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fscanf_pol)
}

void fscanf_pol::SharedCtor() {
  ::memset(&stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
}

fscanf_pol::~fscanf_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fscanf_pol)
  SharedDtor();
}

void fscanf_pol::SharedDtor() {
}

void fscanf_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fscanf_pol& fscanf_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fscanf_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void fscanf_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fscanf_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&stream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fscanf_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_stream(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action elems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_elems(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fscanf_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fscanf_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action stream = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_stream(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action elems = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_elems(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fscanf_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fscanf_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fscanf_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fscanf_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action stream = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->stream(), output);
  }

  // required .common.action elems = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->elems(), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fscanf_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* fscanf_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fscanf_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->stream(), target);
  }

  // required .common.action elems = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->elems(), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fscanf_pol)
  return target;
}

size_t fscanf_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fscanf_pol)
  size_t total_size = 0;

  if (has_stream()) {
    // required .common.action stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stream());
  }

  if (has_elems()) {
    // required .common.action elems = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->elems());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t fscanf_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fscanf_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.action stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stream());

    // required .common.action elems = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->elems());

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fscanf_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fscanf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fscanf_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fscanf_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fscanf_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fscanf_pol)
    MergeFrom(*source);
  }
}

void fscanf_pol::MergeFrom(const fscanf_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fscanf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000002u) {
      elems_ = from.elems_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fscanf_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fscanf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fscanf_pol::CopyFrom(const fscanf_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fscanf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fscanf_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void fscanf_pol::InternalSwap(fscanf_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_, other->stream_);
  swap(elems_, other->elems_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fscanf_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void read_pol::InitAsDefaultInstance() {
  ::libcall_types::_read_pol_default_instance_._instance.get_mutable()->buf_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class read_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<read_pol>()._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_pol& buf(const read_pol* msg);
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_pol&
read_pol::_Internal::buf(const read_pol* msg) {
  return *msg->buf_;
}
void read_pol::clear_buf() {
  if (buf_ != nullptr) buf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
read_pol::read_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.read_pol)
}
read_pol::read_pol(const read_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_pol(*from.buf_);
  } else {
    buf_ = nullptr;
  }
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.read_pol)
}

void read_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_pol_libcall_2eproto.base);
  ::memset(&buf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&buf_)) + sizeof(ret_));
}

read_pol::~read_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.read_pol)
  SharedDtor();
}

void read_pol::SharedDtor() {
  if (this != internal_default_instance()) delete buf_;
}

void read_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_pol& read_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void read_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.read_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(buf_ != nullptr);
    buf_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&fd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* read_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_fd(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_buf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_count(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool read_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.read_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action fd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_fd(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol buf = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_count(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.read_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.read_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void read_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.read_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action fd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->fd(), output);
  }

  // required .common.memory_pol buf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::buf(this), output);
  }

  // required .common.action count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->count(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.read_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* read_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.read_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action fd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->fd(), target);
  }

  // required .common.memory_pol buf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::buf(this), target);
  }

  // required .common.action count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->count(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.read_pol)
  return target;
}

size_t read_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.read_pol)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_pol buf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);
  }

  if (has_fd()) {
    // required .common.action fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fd());
  }

  if (has_count()) {
    // required .common.action count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->count());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t read_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.read_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol buf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);

    // required .common.action fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fd());

    // required .common.action count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->count());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const read_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.read_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.read_pol)
    MergeFrom(*source);
  }
}

void read_pol::MergeFrom(const read_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_buf()->::common::memory_pol::MergeFrom(from.buf());
    }
    if (cached_has_bits & 0x00000002u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void read_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_pol::CopyFrom(const read_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void read_pol::InternalSwap(read_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buf_, other->buf_);
  swap(fd_, other->fd_);
  swap(count_, other->count_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata read_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fread_pol::InitAsDefaultInstance() {
  ::libcall_types::_fread_pol_default_instance_._instance.get_mutable()->ptr_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class fread_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<fread_pol>()._has_bits_);
  static const ::common::memory_pol& ptr(const fread_pol* msg);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nmemb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::common::memory_pol&
fread_pol::_Internal::ptr(const fread_pol* msg) {
  return *msg->ptr_;
}
void fread_pol::clear_ptr() {
  if (ptr_ != nullptr) ptr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
fread_pol::fread_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fread_pol)
}
fread_pol::fread_pol(const fread_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptr()) {
    ptr_ = new ::common::memory_pol(*from.ptr_);
  } else {
    ptr_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fread_pol)
}

void fread_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fread_pol_libcall_2eproto.base);
  ::memset(&ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
}

fread_pol::~fread_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fread_pol)
  SharedDtor();
}

void fread_pol::SharedDtor() {
  if (this != internal_default_instance()) delete ptr_;
}

void fread_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fread_pol& fread_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fread_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void fread_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fread_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ptr_ != nullptr);
    ptr_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fread_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ptr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action nmemb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_nmemb(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_stream(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fread_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fread_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ptr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action nmemb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_nmemb(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action stream = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_stream(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fread_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fread_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fread_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fread_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ptr(this), output);
  }

  // required .common.action size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->size(), output);
  }

  // required .common.action nmemb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->nmemb(), output);
  }

  // required .common.action stream = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->stream(), output);
  }

  // required .common.action ret = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fread_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* fread_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fread_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ptr(this), target);
  }

  // required .common.action size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->size(), target);
  }

  // required .common.action nmemb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->nmemb(), target);
  }

  // required .common.action stream = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->stream(), target);
  }

  // required .common.action ret = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fread_pol)
  return target;
}

size_t fread_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fread_pol)
  size_t total_size = 0;

  if (has_ptr()) {
    // required .common.memory_pol ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptr_);
  }

  if (has_size()) {
    // required .common.action size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_nmemb()) {
    // required .common.action nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nmemb());
  }

  if (has_stream()) {
    // required .common.action stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stream());
  }

  if (has_ret()) {
    // required .common.action ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t fread_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fread_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .common.memory_pol ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptr_);

    // required .common.action size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nmemb());

    // required .common.action stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stream());

    // required .common.action ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fread_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fread_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fread_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fread_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fread_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fread_pol)
    MergeFrom(*source);
  }
}

void fread_pol::MergeFrom(const fread_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fread_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ptr()->::common::memory_pol::MergeFrom(from.ptr());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      nmemb_ = from.nmemb_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fread_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fread_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fread_pol::CopyFrom(const fread_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fread_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fread_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void fread_pol::InternalSwap(fread_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ptr_, other->ptr_);
  swap(size_, other->size_);
  swap(nmemb_, other->nmemb_);
  swap(stream_, other->stream_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fread_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strcmp_pol::InitAsDefaultInstance() {
  ::libcall_types::_strcmp_pol_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_strcmp_pol_default_instance_._instance.get_mutable()->dst_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class strcmp_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<strcmp_pol>()._has_bits_);
  static const ::common::memory_pol& src(const strcmp_pol* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_pol& dst(const strcmp_pol* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_pol&
strcmp_pol::_Internal::src(const strcmp_pol* msg) {
  return *msg->src_;
}
const ::common::memory_pol&
strcmp_pol::_Internal::dst(const strcmp_pol* msg) {
  return *msg->dst_;
}
void strcmp_pol::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void strcmp_pol::clear_dst() {
  if (dst_ != nullptr) dst_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
strcmp_pol::strcmp_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcmp_pol)
}
strcmp_pol::strcmp_pol(const strcmp_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from.has_dst()) {
    dst_ = new ::common::memory_pol(*from.dst_);
  } else {
    dst_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcmp_pol)
}

void strcmp_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_strcmp_pol_libcall_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&src_)) + sizeof(ret_));
}

strcmp_pol::~strcmp_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strcmp_pol)
  SharedDtor();
}

void strcmp_pol::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void strcmp_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strcmp_pol& strcmp_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strcmp_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void strcmp_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(src_ != nullptr);
      src_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dst_ != nullptr);
      dst_->Clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strcmp_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strcmp_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcmp_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol dst = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcmp_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcmp_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strcmp_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::src(this), output);
  }

  // required .common.memory_pol dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dst(this), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcmp_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* strcmp_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::src(this), target);
  }

  // required .common.memory_pol dst = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dst(this), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcmp_pol)
  return target;
}

size_t strcmp_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcmp_pol)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_dst()) {
    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strcmp_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcmp_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strcmp_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strcmp_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strcmp_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcmp_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcmp_pol)
    MergeFrom(*source);
  }
}

void strcmp_pol::MergeFrom(const strcmp_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dst()->::common::memory_pol::MergeFrom(from.dst());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strcmp_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcmp_pol::CopyFrom(const strcmp_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcmp_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void strcmp_pol::InternalSwap(strcmp_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(src_, other->src_);
  swap(dst_, other->dst_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strcmp_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strncmp_pol::InitAsDefaultInstance() {
}
class strncmp_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<strncmp_pol>()._has_bits_);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

strncmp_pol::strncmp_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncmp_pol)
}
strncmp_pol::strncmp_pol(const strncmp_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncmp_pol)
}

void strncmp_pol::SharedCtor() {
  ::memset(&s1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
}

strncmp_pol::~strncmp_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strncmp_pol)
  SharedDtor();
}

void strncmp_pol::SharedDtor() {
}

void strncmp_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strncmp_pol& strncmp_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strncmp_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void strncmp_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strncmp_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_s1(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_s2(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_n(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strncmp_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncmp_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action s1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s1(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action s2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s2(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action n = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_n(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncmp_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncmp_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strncmp_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->s1(), output);
  }

  // required .common.action s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->s2(), output);
  }

  // required .common.action n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->n(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncmp_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* strncmp_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->s1(), target);
  }

  // required .common.action s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->s2(), target);
  }

  // required .common.action n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->n(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncmp_pol)
  return target;
}

size_t strncmp_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncmp_pol)
  size_t total_size = 0;

  if (has_s1()) {
    // required .common.action s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s1());
  }

  if (has_s2()) {
    // required .common.action s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s2());
  }

  if (has_n()) {
    // required .common.action n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strncmp_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncmp_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s1());

    // required .common.action s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s2());

    // required .common.action n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strncmp_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strncmp_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strncmp_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncmp_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncmp_pol)
    MergeFrom(*source);
  }
}

void strncmp_pol::MergeFrom(const strncmp_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s1_ = from.s1_;
    }
    if (cached_has_bits & 0x00000002u) {
      s2_ = from.s2_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strncmp_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncmp_pol::CopyFrom(const strncmp_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncmp_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncmp_pol::InternalSwap(strncmp_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(n_, other->n_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strncmp_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void memcmp_pol::InitAsDefaultInstance() {
}
class memcmp_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<memcmp_pol>()._has_bits_);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

memcmp_pol::memcmp_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcmp_pol)
}
memcmp_pol::memcmp_pol(const memcmp_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcmp_pol)
}

void memcmp_pol::SharedCtor() {
  ::memset(&s1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
}

memcmp_pol::~memcmp_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.memcmp_pol)
  SharedDtor();
}

void memcmp_pol::SharedDtor() {
}

void memcmp_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const memcmp_pol& memcmp_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_memcmp_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void memcmp_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* memcmp_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_s1(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_s2(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_n(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool memcmp_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcmp_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action s1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s1(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action s2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_s2(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action n = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_n(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcmp_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcmp_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void memcmp_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->s1(), output);
  }

  // required .common.action s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->s2(), output);
  }

  // required .common.action n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->n(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcmp_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* memcmp_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcmp_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->s1(), target);
  }

  // required .common.action s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->s2(), target);
  }

  // required .common.action n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->n(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcmp_pol)
  return target;
}

size_t memcmp_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcmp_pol)
  size_t total_size = 0;

  if (has_s1()) {
    // required .common.action s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s1());
  }

  if (has_s2()) {
    // required .common.action s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s2());
  }

  if (has_n()) {
    // required .common.action n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t memcmp_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcmp_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s1());

    // required .common.action s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->s2());

    // required .common.action n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void memcmp_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const memcmp_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<memcmp_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcmp_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcmp_pol)
    MergeFrom(*source);
  }
}

void memcmp_pol::MergeFrom(const memcmp_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcmp_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s1_ = from.s1_;
    }
    if (cached_has_bits & 0x00000002u) {
      s2_ = from.s2_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void memcmp_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcmp_pol::CopyFrom(const memcmp_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcmp_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcmp_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memcmp_pol::InternalSwap(memcmp_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(n_, other->n_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata memcmp_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strchr_pol::InitAsDefaultInstance() {
  ::libcall_types::_strchr_pol_default_instance_._instance.get_mutable()->sc_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_strchr_pol_default_instance_._instance.get_mutable()->c_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class strchr_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<strchr_pol>()._has_bits_);
  static const ::common::memory_pol& sc(const strchr_pol* msg);
  static void set_has_sc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_pol& c(const strchr_pol* msg);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_pol&
strchr_pol::_Internal::sc(const strchr_pol* msg) {
  return *msg->sc_;
}
const ::common::memory_pol&
strchr_pol::_Internal::c(const strchr_pol* msg) {
  return *msg->c_;
}
void strchr_pol::clear_sc() {
  if (sc_ != nullptr) sc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void strchr_pol::clear_c() {
  if (c_ != nullptr) c_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
strchr_pol::strchr_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strchr_pol)
}
strchr_pol::strchr_pol(const strchr_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_sc()) {
    sc_ = new ::common::memory_pol(*from.sc_);
  } else {
    sc_ = nullptr;
  }
  if (from.has_c()) {
    c_ = new ::common::memory_pol(*from.c_);
  } else {
    c_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strchr_pol)
}

void strchr_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_strchr_pol_libcall_2eproto.base);
  ::memset(&sc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&sc_)) + sizeof(ret_));
}

strchr_pol::~strchr_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strchr_pol)
  SharedDtor();
}

void strchr_pol::SharedDtor() {
  if (this != internal_default_instance()) delete sc_;
  if (this != internal_default_instance()) delete c_;
}

void strchr_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strchr_pol& strchr_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strchr_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void strchr_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strchr_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(sc_ != nullptr);
      sc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(c_ != nullptr);
      c_->Clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strchr_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol sc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_sc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strchr_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strchr_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol sc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_sc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol c = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_c()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strchr_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strchr_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strchr_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strchr_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol sc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::sc(this), output);
  }

  // required .common.memory_pol c = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::c(this), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strchr_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* strchr_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strchr_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol sc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::sc(this), target);
  }

  // required .common.memory_pol c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::c(this), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strchr_pol)
  return target;
}

size_t strchr_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strchr_pol)
  size_t total_size = 0;

  if (has_sc()) {
    // required .common.memory_pol sc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sc_);
  }

  if (has_c()) {
    // required .common.memory_pol c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strchr_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strchr_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol sc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sc_);

    // required .common.memory_pol c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strchr_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strchr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strchr_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strchr_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strchr_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strchr_pol)
    MergeFrom(*source);
  }
}

void strchr_pol::MergeFrom(const strchr_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strchr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_sc()->::common::memory_pol::MergeFrom(from.sc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_c()->::common::memory_pol::MergeFrom(from.c());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strchr_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strchr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strchr_pol::CopyFrom(const strchr_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strchr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strchr_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void strchr_pol::InternalSwap(strchr_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sc_, other->sc_);
  swap(c_, other->c_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strchr_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strncpy_pol::InitAsDefaultInstance() {
}
class strncpy_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<strncpy_pol>()._has_bits_);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

strncpy_pol::strncpy_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncpy_pol)
}
strncpy_pol::strncpy_pol(const strncpy_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dst_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncpy_pol)
}

void strncpy_pol::SharedCtor() {
  ::memset(&dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dst_)) + sizeof(ret_));
}

strncpy_pol::~strncpy_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strncpy_pol)
  SharedDtor();
}

void strncpy_pol::SharedDtor() {
}

void strncpy_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strncpy_pol& strncpy_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strncpy_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void strncpy_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&dst_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strncpy_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_dst(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_src(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_n(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strncpy_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncpy_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action dst = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_dst(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action src = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_src(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action n = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_n(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncpy_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncpy_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strncpy_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action dst = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->dst(), output);
  }

  // required .common.action src = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->src(), output);
  }

  // required .common.action n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->n(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncpy_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* strncpy_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action dst = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->dst(), target);
  }

  // required .common.action src = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->src(), target);
  }

  // required .common.action n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->n(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncpy_pol)
  return target;
}

size_t strncpy_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncpy_pol)
  size_t total_size = 0;

  if (has_dst()) {
    // required .common.action dst = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dst());
  }

  if (has_src()) {
    // required .common.action src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->src());
  }

  if (has_n()) {
    // required .common.action n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strncpy_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncpy_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action dst = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dst());

    // required .common.action src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->src());

    // required .common.action n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->n());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strncpy_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strncpy_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strncpy_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncpy_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncpy_pol)
    MergeFrom(*source);
  }
}

void strncpy_pol::MergeFrom(const strncpy_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dst_ = from.dst_;
    }
    if (cached_has_bits & 0x00000002u) {
      src_ = from.src_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strncpy_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncpy_pol::CopyFrom(const strncpy_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncpy_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncpy_pol::InternalSwap(strncpy_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dst_, other->dst_);
  swap(src_, other->src_);
  swap(n_, other->n_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strncpy_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fstat_pol::InitAsDefaultInstance() {
}
class fstat_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<fstat_pol>()._has_bits_);
};

fstat_pol::fstat_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fstat_pol)
}
fstat_pol::fstat_pol(const fstat_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.fstat_pol)
}

void fstat_pol::SharedCtor() {
}

fstat_pol::~fstat_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fstat_pol)
  SharedDtor();
}

void fstat_pol::SharedDtor() {
}

void fstat_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fstat_pol& fstat_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fstat_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void fstat_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fstat_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fstat_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fstat_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fstat_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fstat_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fstat_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fstat_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fstat_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fstat_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* fstat_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fstat_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fstat_pol)
  return target;
}

size_t fstat_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fstat_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fstat_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fstat_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fstat_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fstat_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fstat_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fstat_pol)
    MergeFrom(*source);
  }
}

void fstat_pol::MergeFrom(const fstat_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fstat_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void fstat_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fstat_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fstat_pol::CopyFrom(const fstat_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fstat_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fstat_pol::IsInitialized() const {
  return true;
}

void fstat_pol::InternalSwap(fstat_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata fstat_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fxstat64_pol::InitAsDefaultInstance() {
}
class fxstat64_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<fxstat64_pol>()._has_bits_);
};

fxstat64_pol::fxstat64_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fxstat64_pol)
}
fxstat64_pol::fxstat64_pol(const fxstat64_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.fxstat64_pol)
}

void fxstat64_pol::SharedCtor() {
}

fxstat64_pol::~fxstat64_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fxstat64_pol)
  SharedDtor();
}

void fxstat64_pol::SharedDtor() {
}

void fxstat64_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fxstat64_pol& fxstat64_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fxstat64_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void fxstat64_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fxstat64_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fxstat64_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fxstat64_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fxstat64_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fxstat64_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fxstat64_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fxstat64_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fxstat64_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fxstat64_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* fxstat64_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fxstat64_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fxstat64_pol)
  return target;
}

size_t fxstat64_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fxstat64_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fxstat64_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fxstat64_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fxstat64_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fxstat64_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fxstat64_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fxstat64_pol)
    MergeFrom(*source);
  }
}

void fxstat64_pol::MergeFrom(const fxstat64_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fxstat64_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void fxstat64_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fxstat64_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fxstat64_pol::CopyFrom(const fxstat64_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fxstat64_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fxstat64_pol::IsInitialized() const {
  return true;
}

void fxstat64_pol::InternalSwap(fxstat64_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata fxstat64_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void realloc_pol::InitAsDefaultInstance() {
}
class realloc_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<realloc_pol>()._has_bits_);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

realloc_pol::realloc_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.realloc_pol)
}
realloc_pol::realloc_pol(const realloc_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ptr_, &from.ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.realloc_pol)
}

void realloc_pol::SharedCtor() {
  ::memset(&ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
}

realloc_pol::~realloc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.realloc_pol)
  SharedDtor();
}

void realloc_pol::SharedDtor() {
}

void realloc_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const realloc_pol& realloc_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_realloc_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void realloc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.realloc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ptr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* realloc_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ptr(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool realloc_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.realloc_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ptr(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.realloc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.realloc_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void realloc_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.realloc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ptr(), output);
  }

  // required .common.action size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->size(), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.realloc_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* realloc_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.realloc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptr(), target);
  }

  // required .common.action size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->size(), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.realloc_pol)
  return target;
}

size_t realloc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.realloc_pol)
  size_t total_size = 0;

  if (has_ptr()) {
    // required .common.action ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ptr());
  }

  if (has_size()) {
    // required .common.action size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t realloc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.realloc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.action ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ptr());

    // required .common.action size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void realloc_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.realloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const realloc_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<realloc_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.realloc_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.realloc_pol)
    MergeFrom(*source);
  }
}

void realloc_pol::MergeFrom(const realloc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.realloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ptr_ = from.ptr_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void realloc_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.realloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void realloc_pol::CopyFrom(const realloc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.realloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool realloc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void realloc_pol::InternalSwap(realloc_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ptr_, other->ptr_);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata realloc_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mmap_pol::InitAsDefaultInstance() {
  ::libcall_types::_mmap_pol_default_instance_._instance.get_mutable()->ret_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class mmap_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<mmap_pol>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::common::memory_pol& ret(const mmap_pol* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::common::memory_pol&
mmap_pol::_Internal::ret(const mmap_pol* msg) {
  return *msg->ret_;
}
void mmap_pol::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
mmap_pol::mmap_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.mmap_pol)
}
mmap_pol::mmap_pol(const mmap_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ret()) {
    ret_ = new ::common::memory_pol(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.mmap_pol)
}

void mmap_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mmap_pol_libcall_2eproto.base);
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(offset_));
}

mmap_pol::~mmap_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.mmap_pol)
  SharedDtor();
}

void mmap_pol::SharedDtor() {
  if (this != internal_default_instance()) delete ret_;
}

void mmap_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mmap_pol& mmap_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mmap_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void mmap_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.mmap_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ret_ != nullptr);
    ret_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&addr_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mmap_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_addr(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_length(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action prot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_prot(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_flags(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action fd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_fd(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_offset(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol ret = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mmap_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.mmap_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_addr(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action length = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_length(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action prot = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_prot(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action flags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_flags(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action fd = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_fd(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action offset = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_offset(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol ret = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.mmap_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.mmap_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mmap_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.mmap_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action addr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->addr(), output);
  }

  // required .common.action length = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->length(), output);
  }

  // required .common.action prot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->prot(), output);
  }

  // required .common.action flags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->flags(), output);
  }

  // required .common.action fd = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->fd(), output);
  }

  // required .common.action offset = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->offset(), output);
  }

  // required .common.memory_pol ret = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::ret(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.mmap_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* mmap_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.mmap_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action addr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->addr(), target);
  }

  // required .common.action length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->length(), target);
  }

  // required .common.action prot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->prot(), target);
  }

  // required .common.action flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->flags(), target);
  }

  // required .common.action fd = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->fd(), target);
  }

  // required .common.action offset = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->offset(), target);
  }

  // required .common.memory_pol ret = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::ret(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.mmap_pol)
  return target;
}

size_t mmap_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.mmap_pol)
  size_t total_size = 0;

  if (has_ret()) {
    // required .common.memory_pol ret = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);
  }

  if (has_addr()) {
    // required .common.action addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->addr());
  }

  if (has_length()) {
    // required .common.action length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->length());
  }

  if (has_prot()) {
    // required .common.action prot = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->prot());
  }

  if (has_flags()) {
    // required .common.action flags = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->flags());
  }

  if (has_fd()) {
    // required .common.action fd = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fd());
  }

  if (has_offset()) {
    // required .common.action offset = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->offset());
  }

  return total_size;
}
size_t mmap_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.mmap_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .common.memory_pol ret = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);

    // required .common.action addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->addr());

    // required .common.action length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->length());

    // required .common.action prot = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->prot());

    // required .common.action flags = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->flags());

    // required .common.action fd = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fd());

    // required .common.action offset = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mmap_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.mmap_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const mmap_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mmap_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.mmap_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.mmap_pol)
    MergeFrom(*source);
  }
}

void mmap_pol::MergeFrom(const mmap_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.mmap_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ret()->::common::memory_pol::MergeFrom(from.ret());
    }
    if (cached_has_bits & 0x00000002u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      prot_ = from.prot_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000040u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mmap_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.mmap_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mmap_pol::CopyFrom(const mmap_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.mmap_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mmap_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void mmap_pol::InternalSwap(mmap_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
  swap(addr_, other->addr_);
  swap(length_, other->length_);
  swap(prot_, other->prot_);
  swap(flags_, other->flags_);
  swap(fd_, other->fd_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mmap_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void qsort_pol::InitAsDefaultInstance() {
  ::libcall_types::_qsort_pol_default_instance_._instance.get_mutable()->base_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class qsort_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<qsort_pol>()._has_bits_);
  static const ::common::memory_pol& base(const qsort_pol* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nmemb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compare(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_pol&
qsort_pol::_Internal::base(const qsort_pol* msg) {
  return *msg->base_;
}
void qsort_pol::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
qsort_pol::qsort_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.qsort_pol)
}
qsort_pol::qsort_pol(const qsort_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::common::memory_pol(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.qsort_pol)
}

void qsort_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_qsort_pol_libcall_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&base_)) + sizeof(compare_));
}

qsort_pol::~qsort_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.qsort_pol)
  SharedDtor();
}

void qsort_pol::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
}

void qsort_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const qsort_pol& qsort_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_qsort_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void qsort_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.qsort_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_ != nullptr);
    base_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&nmemb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compare_) -
        reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* qsort_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action nmemb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_nmemb(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action compare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_compare(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool qsort_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.qsort_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action nmemb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_nmemb(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action compare = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_compare(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.qsort_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.qsort_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void qsort_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.qsort_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // required .common.action nmemb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->nmemb(), output);
  }

  // required .common.action size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->size(), output);
  }

  // required .common.action compare = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->compare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.qsort_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* qsort_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.qsort_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // required .common.action nmemb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->nmemb(), target);
  }

  // required .common.action size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->size(), target);
  }

  // required .common.action compare = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->compare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.qsort_pol)
  return target;
}

size_t qsort_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.qsort_pol)
  size_t total_size = 0;

  if (has_base()) {
    // required .common.memory_pol base = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (has_nmemb()) {
    // required .common.action nmemb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nmemb());
  }

  if (has_size()) {
    // required .common.action size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_compare()) {
    // required .common.action compare = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare());
  }

  return total_size;
}
size_t qsort_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.qsort_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol base = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);

    // required .common.action nmemb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nmemb());

    // required .common.action size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action compare = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void qsort_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.qsort_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const qsort_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<qsort_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.qsort_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.qsort_pol)
    MergeFrom(*source);
  }
}

void qsort_pol::MergeFrom(const qsort_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.qsort_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::common::memory_pol::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      nmemb_ = from.nmemb_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      compare_ = from.compare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void qsort_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.qsort_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qsort_pol::CopyFrom(const qsort_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.qsort_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qsort_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void qsort_pol::InternalSwap(qsort_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(base_, other->base_);
  swap(nmemb_, other->nmemb_);
  swap(size_, other->size_);
  swap(compare_, other->compare_);
}

::PROTOBUF_NAMESPACE_ID::Metadata qsort_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bsearch_pol::InitAsDefaultInstance() {
  ::libcall_types::_bsearch_pol_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_bsearch_pol_default_instance_._instance.get_mutable()->base_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_bsearch_pol_default_instance_._instance.get_mutable()->ret_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class bsearch_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<bsearch_pol>()._has_bits_);
  static const ::common::memory_pol& key(const bsearch_pol* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_pol& base(const bsearch_pol* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nmemb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compare(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::common::memory_pol& ret(const bsearch_pol* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_pol&
bsearch_pol::_Internal::key(const bsearch_pol* msg) {
  return *msg->key_;
}
const ::common::memory_pol&
bsearch_pol::_Internal::base(const bsearch_pol* msg) {
  return *msg->base_;
}
const ::common::memory_pol&
bsearch_pol::_Internal::ret(const bsearch_pol* msg) {
  return *msg->ret_;
}
void bsearch_pol::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void bsearch_pol::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void bsearch_pol::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
bsearch_pol::bsearch_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.bsearch_pol)
}
bsearch_pol::bsearch_pol(const bsearch_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::memory_pol(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::common::memory_pol(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_ret()) {
    ret_ = new ::common::memory_pol(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.bsearch_pol)
}

void bsearch_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bsearch_pol_libcall_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&key_)) + sizeof(compare_));
}

bsearch_pol::~bsearch_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.bsearch_pol)
  SharedDtor();
}

void bsearch_pol::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete ret_;
}

void bsearch_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bsearch_pol& bsearch_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bsearch_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void bsearch_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.bsearch_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&nmemb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compare_) -
        reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* bsearch_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action nmemb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_nmemb(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action compare = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_compare(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol ret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool bsearch_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.bsearch_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action nmemb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_nmemb(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action compare = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_compare(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol ret = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.bsearch_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.bsearch_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void bsearch_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.bsearch_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::key(this), output);
  }

  // required .common.memory_pol base = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // required .common.action nmemb = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->nmemb(), output);
  }

  // required .common.action size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->size(), output);
  }

  // required .common.action compare = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->compare(), output);
  }

  // required .common.memory_pol ret = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::ret(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.bsearch_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* bsearch_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.bsearch_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::key(this), target);
  }

  // required .common.memory_pol base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // required .common.action nmemb = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->nmemb(), target);
  }

  // required .common.action size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->size(), target);
  }

  // required .common.action compare = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->compare(), target);
  }

  // required .common.memory_pol ret = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::ret(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.bsearch_pol)
  return target;
}

size_t bsearch_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.bsearch_pol)
  size_t total_size = 0;

  if (has_key()) {
    // required .common.memory_pol key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (has_base()) {
    // required .common.memory_pol base = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (has_ret()) {
    // required .common.memory_pol ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);
  }

  if (has_nmemb()) {
    // required .common.action nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nmemb());
  }

  if (has_size()) {
    // required .common.action size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_compare()) {
    // required .common.action compare = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare());
  }

  return total_size;
}
size_t bsearch_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.bsearch_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_pol key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);

    // required .common.memory_pol base = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);

    // required .common.memory_pol ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);

    // required .common.action nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->nmemb());

    // required .common.action size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action compare = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bsearch_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.bsearch_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const bsearch_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bsearch_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.bsearch_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.bsearch_pol)
    MergeFrom(*source);
  }
}

void bsearch_pol::MergeFrom(const bsearch_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.bsearch_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::common::memory_pol::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_base()->::common::memory_pol::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ret()->::common::memory_pol::MergeFrom(from.ret());
    }
    if (cached_has_bits & 0x00000008u) {
      nmemb_ = from.nmemb_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      compare_ = from.compare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bsearch_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.bsearch_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bsearch_pol::CopyFrom(const bsearch_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.bsearch_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bsearch_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void bsearch_pol::InternalSwap(bsearch_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(base_, other->base_);
  swap(ret_, other->ret_);
  swap(nmemb_, other->nmemb_);
  swap(size_, other->size_);
  swap(compare_, other->compare_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bsearch_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void open_pol::InitAsDefaultInstance() {
  ::libcall_types::_open_pol_default_instance_._instance.get_mutable()->pathname_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class open_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<open_pol>()._has_bits_);
  static const ::common::memory_pol& pathname(const open_pol* msg);
  static void set_has_pathname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_pol&
open_pol::_Internal::pathname(const open_pol* msg) {
  return *msg->pathname_;
}
void open_pol::clear_pathname() {
  if (pathname_ != nullptr) pathname_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
open_pol::open_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.open_pol)
}
open_pol::open_pol(const open_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pathname()) {
    pathname_ = new ::common::memory_pol(*from.pathname_);
  } else {
    pathname_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.open_pol)
}

void open_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_open_pol_libcall_2eproto.base);
  ::memset(&pathname_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&pathname_)) + sizeof(ret_));
}

open_pol::~open_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.open_pol)
  SharedDtor();
}

void open_pol::SharedDtor() {
  if (this != internal_default_instance()) delete pathname_;
}

void open_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const open_pol& open_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_open_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void open_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.open_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pathname_ != nullptr);
    pathname_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* open_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pathname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_flags(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_mode(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool open_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.open_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol pathname = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pathname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action flags = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_flags(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_mode(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.open_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.open_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void open_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.open_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol pathname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pathname(this), output);
  }

  // required .common.action flags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->flags(), output);
  }

  // required .common.action mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->mode(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.open_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* open_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.open_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol pathname = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pathname(this), target);
  }

  // required .common.action flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->flags(), target);
  }

  // required .common.action mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->mode(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.open_pol)
  return target;
}

size_t open_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.open_pol)
  size_t total_size = 0;

  if (has_pathname()) {
    // required .common.memory_pol pathname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathname_);
  }

  if (has_flags()) {
    // required .common.action flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->flags());
  }

  if (has_mode()) {
    // required .common.action mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t open_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.open_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol pathname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathname_);

    // required .common.action flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->flags());

    // required .common.action mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->mode());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void open_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.open_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const open_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<open_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.open_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.open_pol)
    MergeFrom(*source);
  }
}

void open_pol::MergeFrom(const open_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.open_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pathname()->::common::memory_pol::MergeFrom(from.pathname());
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void open_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.open_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_pol::CopyFrom(const open_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.open_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void open_pol::InternalSwap(open_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pathname_, other->pathname_);
  swap(flags_, other->flags_);
  swap(mode_, other->mode_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata open_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strcpy_pol::InitAsDefaultInstance() {
  ::libcall_types::_strcpy_pol_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_strcpy_pol_default_instance_._instance.get_mutable()->dst_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class strcpy_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<strcpy_pol>()._has_bits_);
  static const ::common::memory_pol& src(const strcpy_pol* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_pol& dst(const strcpy_pol* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_pol&
strcpy_pol::_Internal::src(const strcpy_pol* msg) {
  return *msg->src_;
}
const ::common::memory_pol&
strcpy_pol::_Internal::dst(const strcpy_pol* msg) {
  return *msg->dst_;
}
void strcpy_pol::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void strcpy_pol::clear_dst() {
  if (dst_ != nullptr) dst_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
strcpy_pol::strcpy_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcpy_pol)
}
strcpy_pol::strcpy_pol(const strcpy_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from.has_dst()) {
    dst_ = new ::common::memory_pol(*from.dst_);
  } else {
    dst_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcpy_pol)
}

void strcpy_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_strcpy_pol_libcall_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&src_)) + sizeof(ret_));
}

strcpy_pol::~strcpy_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.strcpy_pol)
  SharedDtor();
}

void strcpy_pol::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void strcpy_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strcpy_pol& strcpy_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strcpy_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void strcpy_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(src_ != nullptr);
      src_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dst_ != nullptr);
      dst_->Clear();
    }
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strcpy_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strcpy_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcpy_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol dst = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcpy_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcpy_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strcpy_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::src(this), output);
  }

  // required .common.memory_pol dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dst(this), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcpy_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* strcpy_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::src(this), target);
  }

  // required .common.memory_pol dst = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dst(this), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcpy_pol)
  return target;
}

size_t strcpy_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcpy_pol)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_dst()) {
    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t strcpy_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcpy_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required .common.memory_pol dst = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strcpy_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const strcpy_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strcpy_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcpy_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcpy_pol)
    MergeFrom(*source);
  }
}

void strcpy_pol::MergeFrom(const strcpy_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dst()->::common::memory_pol::MergeFrom(from.dst());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strcpy_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcpy_pol::CopyFrom(const strcpy_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcpy_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void strcpy_pol::InternalSwap(strcpy_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(src_, other->src_);
  swap(dst_, other->dst_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strcpy_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void printf_pol::InitAsDefaultInstance() {
  ::libcall_types::_printf_pol_default_instance_._instance.get_mutable()->format_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class printf_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<printf_pol>()._has_bits_);
  static const ::common::memory_pol& format(const printf_pol* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_pol&
printf_pol::_Internal::format(const printf_pol* msg) {
  return *msg->format_;
}
void printf_pol::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
printf_pol::printf_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.printf_pol)
}
printf_pol::printf_pol(const printf_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_format()) {
    format_ = new ::common::memory_pol(*from.format_);
  } else {
    format_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.printf_pol)
}

void printf_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_printf_pol_libcall_2eproto.base);
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&format_)) + sizeof(ret_));
}

printf_pol::~printf_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.printf_pol)
  SharedDtor();
}

void printf_pol::SharedDtor() {
  if (this != internal_default_instance()) delete format_;
}

void printf_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const printf_pol& printf_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_printf_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void printf_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.printf_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(format_ != nullptr);
    format_->Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* printf_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool printf_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.printf_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol format = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.printf_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.printf_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void printf_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.printf_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::format(this), output);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.printf_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* printf_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.printf_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol format = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::format(this), target);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.printf_pol)
  return target;
}

size_t printf_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.printf_pol)
  size_t total_size = 0;

  if (has_format()) {
    // required .common.memory_pol format = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t printf_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.printf_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol format = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);

    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void printf_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.printf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const printf_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<printf_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.printf_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.printf_pol)
    MergeFrom(*source);
  }
}

void printf_pol::MergeFrom(const printf_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.printf_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_format()->::common::memory_pol::MergeFrom(from.format());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void printf_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.printf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void printf_pol::CopyFrom(const printf_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.printf_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool printf_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void printf_pol::InternalSwap(printf_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(format_, other->format_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata printf_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void atoi_pol::InitAsDefaultInstance() {
  ::libcall_types::_atoi_pol_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class atoi_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<atoi_pol>()._has_bits_);
  static const ::common::memory_pol& src(const atoi_pol* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_pol&
atoi_pol::_Internal::src(const atoi_pol* msg) {
  return *msg->src_;
}
void atoi_pol::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
atoi_pol::atoi_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.atoi_pol)
}
atoi_pol::atoi_pol(const atoi_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.atoi_pol)
}

void atoi_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_atoi_pol_libcall_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&src_)) + sizeof(ret_));
}

atoi_pol::~atoi_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.atoi_pol)
  SharedDtor();
}

void atoi_pol::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
}

void atoi_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const atoi_pol& atoi_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_atoi_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void atoi_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.atoi_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(src_ != nullptr);
    src_->Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* atoi_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool atoi_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.atoi_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.atoi_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.atoi_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void atoi_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.atoi_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::src(this), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.atoi_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* atoi_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.atoi_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::src(this), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.atoi_pol)
  return target;
}

size_t atoi_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.atoi_pol)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t atoi_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.atoi_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void atoi_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.atoi_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const atoi_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<atoi_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.atoi_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.atoi_pol)
    MergeFrom(*source);
  }
}

void atoi_pol::MergeFrom(const atoi_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.atoi_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void atoi_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.atoi_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atoi_pol::CopyFrom(const atoi_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.atoi_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atoi_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void atoi_pol::InternalSwap(atoi_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(src_, other->src_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata atoi_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void malloc_pol::InitAsDefaultInstance() {
}
class malloc_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<malloc_pol>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

malloc_pol::malloc_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.malloc_pol)
}
malloc_pol::malloc_pol(const malloc_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.malloc_pol)
}

void malloc_pol::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_)) + sizeof(ret_));
}

malloc_pol::~malloc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.malloc_pol)
  SharedDtor();
}

void malloc_pol::SharedDtor() {
}

void malloc_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const malloc_pol& malloc_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_malloc_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void malloc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.malloc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* malloc_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool malloc_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.malloc_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.malloc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.malloc_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void malloc_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.malloc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->size(), output);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.malloc_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* malloc_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.malloc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->size(), target);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.malloc_pol)
  return target;
}

size_t malloc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.malloc_pol)
  size_t total_size = 0;

  if (has_size()) {
    // required .common.action size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t malloc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.malloc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.action size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void malloc_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.malloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const malloc_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<malloc_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.malloc_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.malloc_pol)
    MergeFrom(*source);
  }
}

void malloc_pol::MergeFrom(const malloc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.malloc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void malloc_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.malloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void malloc_pol::CopyFrom(const malloc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.malloc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool malloc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void malloc_pol::InternalSwap(malloc_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata malloc_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getmodulehandle_pol::InitAsDefaultInstance() {
  ::libcall_types::_getmodulehandle_pol_default_instance_._instance.get_mutable()->module_name_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class getmodulehandle_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<getmodulehandle_pol>()._has_bits_);
  static const ::common::memory_pol& module_name(const getmodulehandle_pol* msg);
  static void set_has_module_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_pol&
getmodulehandle_pol::_Internal::module_name(const getmodulehandle_pol* msg) {
  return *msg->module_name_;
}
void getmodulehandle_pol::clear_module_name() {
  if (module_name_ != nullptr) module_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
getmodulehandle_pol::getmodulehandle_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmodulehandle_pol)
}
getmodulehandle_pol::getmodulehandle_pol(const getmodulehandle_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module_name()) {
    module_name_ = new ::common::memory_pol(*from.module_name_);
  } else {
    module_name_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmodulehandle_pol)
}

void getmodulehandle_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getmodulehandle_pol_libcall_2eproto.base);
  ::memset(&module_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&module_name_)) + sizeof(ret_));
}

getmodulehandle_pol::~getmodulehandle_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.getmodulehandle_pol)
  SharedDtor();
}

void getmodulehandle_pol::SharedDtor() {
  if (this != internal_default_instance()) delete module_name_;
}

void getmodulehandle_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getmodulehandle_pol& getmodulehandle_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getmodulehandle_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void getmodulehandle_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmodulehandle_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(module_name_ != nullptr);
    module_name_->Clear();
  }
  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* getmodulehandle_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol module_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_module_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool getmodulehandle_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmodulehandle_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol module_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_module_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmodulehandle_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmodulehandle_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void getmodulehandle_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmodulehandle_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol module_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::module_name(this), output);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmodulehandle_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* getmodulehandle_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmodulehandle_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol module_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::module_name(this), target);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmodulehandle_pol)
  return target;
}

size_t getmodulehandle_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmodulehandle_pol)
  size_t total_size = 0;

  if (has_module_name()) {
    // required .common.memory_pol module_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *module_name_);
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t getmodulehandle_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmodulehandle_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_pol module_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *module_name_);

    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getmodulehandle_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmodulehandle_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const getmodulehandle_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getmodulehandle_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmodulehandle_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmodulehandle_pol)
    MergeFrom(*source);
  }
}

void getmodulehandle_pol::MergeFrom(const getmodulehandle_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmodulehandle_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_module_name()->::common::memory_pol::MergeFrom(from.module_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void getmodulehandle_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmodulehandle_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmodulehandle_pol::CopyFrom(const getmodulehandle_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmodulehandle_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmodulehandle_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void getmodulehandle_pol::InternalSwap(getmodulehandle_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(module_name_, other->module_name_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getmodulehandle_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getprocaddress_pol::InitAsDefaultInstance() {
  ::libcall_types::_getprocaddress_pol_default_instance_._instance.get_mutable()->proc_name_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class getprocaddress_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<getprocaddress_pol>()._has_bits_);
  static void set_has_hmodule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_pol& proc_name(const getprocaddress_pol* msg);
  static void set_has_proc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_pol&
getprocaddress_pol::_Internal::proc_name(const getprocaddress_pol* msg) {
  return *msg->proc_name_;
}
void getprocaddress_pol::clear_proc_name() {
  if (proc_name_ != nullptr) proc_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
getprocaddress_pol::getprocaddress_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getprocaddress_pol)
}
getprocaddress_pol::getprocaddress_pol(const getprocaddress_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proc_name()) {
    proc_name_ = new ::common::memory_pol(*from.proc_name_);
  } else {
    proc_name_ = nullptr;
  }
  ::memcpy(&hmodule_, &from.hmodule_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&hmodule_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getprocaddress_pol)
}

void getprocaddress_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getprocaddress_pol_libcall_2eproto.base);
  ::memset(&proc_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&proc_name_)) + sizeof(ret_));
}

getprocaddress_pol::~getprocaddress_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.getprocaddress_pol)
  SharedDtor();
}

void getprocaddress_pol::SharedDtor() {
  if (this != internal_default_instance()) delete proc_name_;
}

void getprocaddress_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getprocaddress_pol& getprocaddress_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getprocaddress_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void getprocaddress_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getprocaddress_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(proc_name_ != nullptr);
    proc_name_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hmodule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&hmodule_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* getprocaddress_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action hmodule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_hmodule(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol proc_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_proc_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool getprocaddress_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getprocaddress_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action hmodule = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_hmodule(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol proc_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proc_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getprocaddress_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getprocaddress_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void getprocaddress_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getprocaddress_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action hmodule = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->hmodule(), output);
  }

  // required .common.memory_pol proc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::proc_name(this), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getprocaddress_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* getprocaddress_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getprocaddress_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action hmodule = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->hmodule(), target);
  }

  // required .common.memory_pol proc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::proc_name(this), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getprocaddress_pol)
  return target;
}

size_t getprocaddress_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getprocaddress_pol)
  size_t total_size = 0;

  if (has_proc_name()) {
    // required .common.memory_pol proc_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proc_name_);
  }

  if (has_hmodule()) {
    // required .common.action hmodule = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hmodule());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t getprocaddress_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getprocaddress_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol proc_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proc_name_);

    // required .common.action hmodule = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->hmodule());

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getprocaddress_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getprocaddress_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const getprocaddress_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getprocaddress_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getprocaddress_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getprocaddress_pol)
    MergeFrom(*source);
  }
}

void getprocaddress_pol::MergeFrom(const getprocaddress_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getprocaddress_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_proc_name()->::common::memory_pol::MergeFrom(from.proc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      hmodule_ = from.hmodule_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void getprocaddress_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getprocaddress_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getprocaddress_pol::CopyFrom(const getprocaddress_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getprocaddress_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getprocaddress_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void getprocaddress_pol::InternalSwap(getprocaddress_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(proc_name_, other->proc_name_);
  swap(hmodule_, other->hmodule_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getprocaddress_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getmainargs_pol::InitAsDefaultInstance() {
  ::libcall_types::_getmainargs_pol_default_instance_._instance.get_mutable()->argc_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_getmainargs_pol_default_instance_._instance.get_mutable()->argv_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_getmainargs_pol_default_instance_._instance.get_mutable()->env_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_getmainargs_pol_default_instance_._instance.get_mutable()->startinfo_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class getmainargs_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<getmainargs_pol>()._has_bits_);
  static const ::common::memory_pol& argc(const getmainargs_pol* msg);
  static void set_has_argc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_pol& argv(const getmainargs_pol* msg);
  static void set_has_argv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_pol& env(const getmainargs_pol* msg);
  static void set_has_env(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dowildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::common::memory_pol& startinfo(const getmainargs_pol* msg);
  static void set_has_startinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::common::memory_pol&
getmainargs_pol::_Internal::argc(const getmainargs_pol* msg) {
  return *msg->argc_;
}
const ::common::memory_pol&
getmainargs_pol::_Internal::argv(const getmainargs_pol* msg) {
  return *msg->argv_;
}
const ::common::memory_pol&
getmainargs_pol::_Internal::env(const getmainargs_pol* msg) {
  return *msg->env_;
}
const ::common::memory_pol&
getmainargs_pol::_Internal::startinfo(const getmainargs_pol* msg) {
  return *msg->startinfo_;
}
void getmainargs_pol::clear_argc() {
  if (argc_ != nullptr) argc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void getmainargs_pol::clear_argv() {
  if (argv_ != nullptr) argv_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void getmainargs_pol::clear_env() {
  if (env_ != nullptr) env_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void getmainargs_pol::clear_startinfo() {
  if (startinfo_ != nullptr) startinfo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
getmainargs_pol::getmainargs_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmainargs_pol)
}
getmainargs_pol::getmainargs_pol(const getmainargs_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_argc()) {
    argc_ = new ::common::memory_pol(*from.argc_);
  } else {
    argc_ = nullptr;
  }
  if (from.has_argv()) {
    argv_ = new ::common::memory_pol(*from.argv_);
  } else {
    argv_ = nullptr;
  }
  if (from.has_env()) {
    env_ = new ::common::memory_pol(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from.has_startinfo()) {
    startinfo_ = new ::common::memory_pol(*from.startinfo_);
  } else {
    startinfo_ = nullptr;
  }
  ::memcpy(&dowildcard_, &from.dowildcard_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dowildcard_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmainargs_pol)
}

void getmainargs_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getmainargs_pol_libcall_2eproto.base);
  ::memset(&argc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&argc_)) + sizeof(ret_));
}

getmainargs_pol::~getmainargs_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.getmainargs_pol)
  SharedDtor();
}

void getmainargs_pol::SharedDtor() {
  if (this != internal_default_instance()) delete argc_;
  if (this != internal_default_instance()) delete argv_;
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete startinfo_;
}

void getmainargs_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getmainargs_pol& getmainargs_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getmainargs_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void getmainargs_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmainargs_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(argc_ != nullptr);
      argc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(argv_ != nullptr);
      argv_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(env_ != nullptr);
      env_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(startinfo_ != nullptr);
      startinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&dowildcard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&dowildcard_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* getmainargs_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol argc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_argc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol argv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_argv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol env = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action dowildcard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_dowildcard(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol startinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_startinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool getmainargs_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmainargs_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol argc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_argc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol argv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_argv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol env = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action dowildcard = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_dowildcard(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol startinfo = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_startinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmainargs_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmainargs_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void getmainargs_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmainargs_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol argc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::argc(this), output);
  }

  // required .common.memory_pol argv = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::argv(this), output);
  }

  // required .common.memory_pol env = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::env(this), output);
  }

  // required .common.action dowildcard = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->dowildcard(), output);
  }

  // required .common.memory_pol startinfo = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::startinfo(this), output);
  }

  // required .common.action ret = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      6, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmainargs_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* getmainargs_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmainargs_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol argc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::argc(this), target);
  }

  // required .common.memory_pol argv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::argv(this), target);
  }

  // required .common.memory_pol env = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::env(this), target);
  }

  // required .common.action dowildcard = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->dowildcard(), target);
  }

  // required .common.memory_pol startinfo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::startinfo(this), target);
  }

  // required .common.action ret = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmainargs_pol)
  return target;
}

size_t getmainargs_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmainargs_pol)
  size_t total_size = 0;

  if (has_argc()) {
    // required .common.memory_pol argc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argc_);
  }

  if (has_argv()) {
    // required .common.memory_pol argv = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argv_);
  }

  if (has_env()) {
    // required .common.memory_pol env = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  if (has_startinfo()) {
    // required .common.memory_pol startinfo = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startinfo_);
  }

  if (has_dowildcard()) {
    // required .common.action dowildcard = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dowildcard());
  }

  if (has_ret()) {
    // required .common.action ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t getmainargs_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmainargs_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_pol argc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argc_);

    // required .common.memory_pol argv = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argv_);

    // required .common.memory_pol env = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);

    // required .common.memory_pol startinfo = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startinfo_);

    // required .common.action dowildcard = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->dowildcard());

    // required .common.action ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getmainargs_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmainargs_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const getmainargs_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getmainargs_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmainargs_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmainargs_pol)
    MergeFrom(*source);
  }
}

void getmainargs_pol::MergeFrom(const getmainargs_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmainargs_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_argc()->::common::memory_pol::MergeFrom(from.argc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_argv()->::common::memory_pol::MergeFrom(from.argv());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_env()->::common::memory_pol::MergeFrom(from.env());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_startinfo()->::common::memory_pol::MergeFrom(from.startinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      dowildcard_ = from.dowildcard_;
    }
    if (cached_has_bits & 0x00000020u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void getmainargs_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmainargs_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmainargs_pol::CopyFrom(const getmainargs_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmainargs_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmainargs_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  return true;
}

void getmainargs_pol::InternalSwap(getmainargs_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(argc_, other->argc_);
  swap(argv_, other->argv_);
  swap(env_, other->env_);
  swap(startinfo_, other->startinfo_);
  swap(dowildcard_, other->dowildcard_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getmainargs_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gethostname_pol::InitAsDefaultInstance() {
  ::libcall_types::_gethostname_pol_default_instance_._instance.get_mutable()->name_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class gethostname_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<gethostname_pol>()._has_bits_);
  static const ::common::memory_pol& name(const gethostname_pol* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namelen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_pol&
gethostname_pol::_Internal::name(const gethostname_pol* msg) {
  return *msg->name_;
}
void gethostname_pol::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
gethostname_pol::gethostname_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.gethostname_pol)
}
gethostname_pol::gethostname_pol(const gethostname_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::common::memory_pol(*from.name_);
  } else {
    name_ = nullptr;
  }
  ::memcpy(&namelen_, &from.namelen_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&namelen_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.gethostname_pol)
}

void gethostname_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gethostname_pol_libcall_2eproto.base);
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&name_)) + sizeof(ret_));
}

gethostname_pol::~gethostname_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.gethostname_pol)
  SharedDtor();
}

void gethostname_pol::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void gethostname_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gethostname_pol& gethostname_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gethostname_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void gethostname_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.gethostname_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(name_ != nullptr);
    name_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&namelen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&namelen_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* gethostname_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action namelen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_namelen(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool gethostname_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.gethostname_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action namelen = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_namelen(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.gethostname_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.gethostname_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void gethostname_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.gethostname_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::name(this), output);
  }

  // required .common.action namelen = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->namelen(), output);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.gethostname_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* gethostname_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.gethostname_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::name(this), target);
  }

  // required .common.action namelen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->namelen(), target);
  }

  // required .common.action ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.gethostname_pol)
  return target;
}

size_t gethostname_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.gethostname_pol)
  size_t total_size = 0;

  if (has_name()) {
    // required .common.memory_pol name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (has_namelen()) {
    // required .common.action namelen = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->namelen());
  }

  if (has_ret()) {
    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t gethostname_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.gethostname_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_pol name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);

    // required .common.action namelen = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->namelen());

    // required .common.action ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gethostname_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.gethostname_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const gethostname_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gethostname_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.gethostname_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.gethostname_pol)
    MergeFrom(*source);
  }
}

void gethostname_pol::MergeFrom(const gethostname_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.gethostname_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_name()->::common::memory_pol::MergeFrom(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      namelen_ = from.namelen_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gethostname_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.gethostname_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gethostname_pol::CopyFrom(const gethostname_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.gethostname_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gethostname_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void gethostname_pol::InternalSwap(gethostname_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_, other->name_);
  swap(namelen_, other->namelen_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gethostname_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void free_pol::InitAsDefaultInstance() {
}
class free_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<free_pol>()._has_bits_);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

free_pol::free_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.free_pol)
}
free_pol::free_pol(const free_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ptr_ = from.ptr_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.free_pol)
}

void free_pol::SharedCtor() {
  ptr_ = 0;
}

free_pol::~free_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.free_pol)
  SharedDtor();
}

void free_pol::SharedDtor() {
}

void free_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const free_pol& free_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_free_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void free_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.free_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptr_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* free_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ptr(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool free_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.free_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ptr(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.free_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.free_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void free_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.free_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.free_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* free_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.free_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.free_pol)
  return target;
}

size_t free_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.free_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.action ptr = 1;
  if (has_ptr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ptr());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void free_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.free_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const free_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<free_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.free_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.free_pol)
    MergeFrom(*source);
  }
}

void free_pol::MergeFrom(const free_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.free_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptr()) {
    set_ptr(from.ptr());
  }
}

void free_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.free_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void free_pol::CopyFrom(const free_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.free_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool free_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void free_pol::InternalSwap(free_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ptr_, other->ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata free_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void memcpy_pol::InitAsDefaultInstance() {
  ::libcall_types::_memcpy_pol_default_instance_._instance.get_mutable()->dest_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
  ::libcall_types::_memcpy_pol_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class memcpy_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<memcpy_pol>()._has_bits_);
  static const ::common::memory_pol& dest(const memcpy_pol* msg);
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_pol& src(const memcpy_pol* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_pol&
memcpy_pol::_Internal::dest(const memcpy_pol* msg) {
  return *msg->dest_;
}
const ::common::memory_pol&
memcpy_pol::_Internal::src(const memcpy_pol* msg) {
  return *msg->src_;
}
void memcpy_pol::clear_dest() {
  if (dest_ != nullptr) dest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void memcpy_pol::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
memcpy_pol::memcpy_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcpy_pol)
}
memcpy_pol::memcpy_pol(const memcpy_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dest()) {
    dest_ = new ::common::memory_pol(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  if (from.has_src()) {
    src_ = new ::common::memory_pol(*from.src_);
  } else {
    src_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcpy_pol)
}

void memcpy_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_memcpy_pol_libcall_2eproto.base);
  ::memset(&dest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dest_)) + sizeof(ret_));
}

memcpy_pol::~memcpy_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.memcpy_pol)
  SharedDtor();
}

void memcpy_pol::SharedDtor() {
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete src_;
}

void memcpy_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const memcpy_pol& memcpy_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_memcpy_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void memcpy_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dest_ != nullptr);
      dest_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(src_ != nullptr);
      src_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* memcpy_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_pol src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool memcpy_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcpy_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol dest = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_pol src = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcpy_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcpy_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void memcpy_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol dest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::dest(this), output);
  }

  // required .common.memory_pol src = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::src(this), output);
  }

  // required .common.action size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->size(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcpy_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* memcpy_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcpy_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::dest(this), target);
  }

  // required .common.memory_pol src = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::src(this), target);
  }

  // required .common.action size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->size(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcpy_pol)
  return target;
}

size_t memcpy_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcpy_pol)
  size_t total_size = 0;

  if (has_dest()) {
    // required .common.memory_pol dest = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  if (has_src()) {
    // required .common.memory_pol src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_size()) {
    // required .common.action size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t memcpy_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcpy_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol dest = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);

    // required .common.memory_pol src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required .common.action size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void memcpy_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const memcpy_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<memcpy_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcpy_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcpy_pol)
    MergeFrom(*source);
  }
}

void memcpy_pol::MergeFrom(const memcpy_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcpy_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dest()->::common::memory_pol::MergeFrom(from.dest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_src()->::common::memory_pol::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void memcpy_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcpy_pol::CopyFrom(const memcpy_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcpy_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcpy_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memcpy_pol::InternalSwap(memcpy_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dest_, other->dest_);
  swap(src_, other->src_);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata memcpy_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void memset_pol::InitAsDefaultInstance() {
  ::libcall_types::_memset_pol_default_instance_._instance.get_mutable()->s_ = const_cast< ::common::memory_pol*>(
      ::common::memory_pol::internal_default_instance());
}
class memset_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<memset_pol>()._has_bits_);
  static const ::common::memory_pol& s(const memset_pol* msg);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_pol&
memset_pol::_Internal::s(const memset_pol* msg) {
  return *msg->s_;
}
void memset_pol::clear_s() {
  if (s_ != nullptr) s_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
memset_pol::memset_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memset_pol)
}
memset_pol::memset_pol(const memset_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s()) {
    s_ = new ::common::memory_pol(*from.s_);
  } else {
    s_ = nullptr;
  }
  ::memcpy(&c_, &from.c_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&c_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memset_pol)
}

void memset_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_memset_pol_libcall_2eproto.base);
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ret_));
}

memset_pol::~memset_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.memset_pol)
  SharedDtor();
}

void memset_pol::SharedDtor() {
  if (this != internal_default_instance()) delete s_;
}

void memset_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const memset_pol& memset_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_memset_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void memset_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memset_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(s_ != nullptr);
    s_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&c_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* memset_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_pol s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.action c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_c(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_size(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool memset_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memset_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_pol s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action c = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_c(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_size(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memset_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memset_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void memset_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memset_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::s(this), output);
  }

  // required .common.action c = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->c(), output);
  }

  // required .common.action size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->size(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memset_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* memset_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memset_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_pol s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::s(this), target);
  }

  // required .common.action c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->c(), target);
  }

  // required .common.action size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->size(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memset_pol)
  return target;
}

size_t memset_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memset_pol)
  size_t total_size = 0;

  if (has_s()) {
    // required .common.memory_pol s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);
  }

  if (has_c()) {
    // required .common.action c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->c());
  }

  if (has_size()) {
    // required .common.action size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t memset_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memset_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_pol s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);

    // required .common.action c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->c());

    // required .common.action size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->size());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void memset_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memset_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const memset_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<memset_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memset_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memset_pol)
    MergeFrom(*source);
  }
}

void memset_pol::MergeFrom(const memset_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memset_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s()->::common::memory_pol::MergeFrom(from.s());
    }
    if (cached_has_bits & 0x00000002u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void memset_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memset_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memset_pol::CopyFrom(const memset_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memset_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memset_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memset_pol::InternalSwap(memset_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_, other->s_);
  swap(c_, other->c_);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata memset_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fgetc_pol::InitAsDefaultInstance() {
}
class fgetc_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<fgetc_pol>()._has_bits_);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

fgetc_pol::fgetc_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fgetc_pol)
}
fgetc_pol::fgetc_pol(const fgetc_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fgetc_pol)
}

void fgetc_pol::SharedCtor() {
  ::memset(&stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
}

fgetc_pol::~fgetc_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.fgetc_pol)
  SharedDtor();
}

void fgetc_pol::SharedDtor() {
}

void fgetc_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fgetc_pol& fgetc_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fgetc_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void fgetc_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fgetc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fgetc_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_stream(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fgetc_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fgetc_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action stream = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_stream(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fgetc_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fgetc_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fgetc_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fgetc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action stream = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->stream(), output);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fgetc_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* fgetc_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fgetc_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->stream(), target);
  }

  // required .common.action ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fgetc_pol)
  return target;
}

size_t fgetc_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fgetc_pol)
  size_t total_size = 0;

  if (has_stream()) {
    // required .common.action stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stream());
  }

  if (has_ret()) {
    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t fgetc_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fgetc_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.action stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->stream());

    // required .common.action ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fgetc_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fgetc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const fgetc_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fgetc_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fgetc_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fgetc_pol)
    MergeFrom(*source);
  }
}

void fgetc_pol::MergeFrom(const fgetc_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fgetc_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fgetc_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fgetc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fgetc_pol::CopyFrom(const fgetc_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fgetc_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fgetc_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fgetc_pol::InternalSwap(fgetc_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_, other->stream_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fgetc_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void lseek_pol::InitAsDefaultInstance() {
}
class lseek_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<lseek_pol>()._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

lseek_pol::lseek_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.lseek_pol)
}
lseek_pol::lseek_pol(const lseek_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.lseek_pol)
}

void lseek_pol::SharedCtor() {
  ::memset(&fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
}

lseek_pol::~lseek_pol() {
  // @@protoc_insertion_point(destructor:libcall_types.lseek_pol)
  SharedDtor();
}

void lseek_pol::SharedDtor() {
}

void lseek_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lseek_pol& lseek_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lseek_pol_libcall_2eproto.base);
  return *internal_default_instance();
}


void lseek_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.lseek_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* lseek_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.action fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_fd(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_offset(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action whence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_whence(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ret(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool lseek_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.lseek_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.action fd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_fd(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_offset(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action whence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_whence(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ret(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.lseek_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.lseek_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void lseek_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.lseek_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action fd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->fd(), output);
  }

  // required .common.action offset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->offset(), output);
  }

  // required .common.action whence = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->whence(), output);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.lseek_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* lseek_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.lseek_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.action fd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->fd(), target);
  }

  // required .common.action offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->offset(), target);
  }

  // required .common.action whence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->whence(), target);
  }

  // required .common.action ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.lseek_pol)
  return target;
}

size_t lseek_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.lseek_pol)
  size_t total_size = 0;

  if (has_fd()) {
    // required .common.action fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fd());
  }

  if (has_offset()) {
    // required .common.action offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->offset());
  }

  if (has_whence()) {
    // required .common.action whence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->whence());
  }

  if (has_ret()) {
    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());
  }

  return total_size;
}
size_t lseek_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.lseek_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.action fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->fd());

    // required .common.action offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->offset());

    // required .common.action whence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->whence());

    // required .common.action ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lseek_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.lseek_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const lseek_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lseek_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.lseek_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.lseek_pol)
    MergeFrom(*source);
  }
}

void lseek_pol::MergeFrom(const lseek_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.lseek_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      whence_ = from.whence_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lseek_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.lseek_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lseek_pol::CopyFrom(const lseek_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.lseek_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lseek_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void lseek_pol::InternalSwap(lseek_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fd_, other->fd_);
  swap(offset_, other->offset_);
  swap(whence_, other->whence_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata lseek_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void exit_t::InitAsDefaultInstance() {
}
class exit_t::_Internal {
 public:
  using HasBits = decltype(std::declval<exit_t>()._has_bits_);
};

exit_t::exit_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.exit_t)
}
exit_t::exit_t(const exit_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:libcall_types.exit_t)
}

void exit_t::SharedCtor() {
}

exit_t::~exit_t() {
  // @@protoc_insertion_point(destructor:libcall_types.exit_t)
  SharedDtor();
}

void exit_t::SharedDtor() {
}

void exit_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const exit_t& exit_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_exit_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void exit_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.exit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* exit_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool exit_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.exit_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.exit_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.exit_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void exit_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.exit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.exit_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* exit_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.exit_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.exit_t)
  return target;
}

size_t exit_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.exit_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void exit_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.exit_t)
  GOOGLE_DCHECK_NE(&from, this);
  const exit_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<exit_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.exit_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.exit_t)
    MergeFrom(*source);
  }
}

void exit_t::MergeFrom(const exit_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.exit_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void exit_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.exit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void exit_t::CopyFrom(const exit_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.exit_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool exit_t::IsInitialized() const {
  return true;
}

void exit_t::InternalSwap(exit_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata exit_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void generic_t::InitAsDefaultInstance() {
}
class generic_t::_Internal {
 public:
  using HasBits = decltype(std::declval<generic_t>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

generic_t::generic_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.generic_t)
}
generic_t::generic_t(const generic_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.generic_t)
}

void generic_t::SharedCtor() {
  ret_ = PROTOBUF_ULONGLONG(0);
}

generic_t::~generic_t() {
  // @@protoc_insertion_point(destructor:libcall_types.generic_t)
  SharedDtor();
}

void generic_t::SharedDtor() {
}

void generic_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const generic_t& generic_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_generic_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void generic_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.generic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* generic_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool generic_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.generic_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ret = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.generic_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.generic_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void generic_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.generic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.generic_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* generic_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.generic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.generic_t)
  return target;
}

size_t generic_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.generic_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 ret = 1;
  if (has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void generic_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  const generic_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<generic_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.generic_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.generic_t)
    MergeFrom(*source);
  }
}

void generic_t::MergeFrom(const generic_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ret()) {
    set_ret(from.ret());
  }
}

void generic_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generic_t::CopyFrom(const generic_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generic_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void generic_t::InternalSwap(generic_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata generic_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fscanf_elem_t::InitAsDefaultInstance() {
  ::libcall_types::_fscanf_elem_t_default_instance_.value_dec_ = PROTOBUF_ULONGLONG(0);
  ::libcall_types::_fscanf_elem_t_default_instance_.value_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class fscanf_elem_t::_Internal {
 public:
  using HasBits = decltype(std::declval<fscanf_elem_t>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

fscanf_elem_t::fscanf_elem_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fscanf_elem_t)
}
fscanf_elem_t::fscanf_elem_t(const fscanf_elem_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(type_));
  clear_has_fscanf_cnt();
  switch (from.fscanf_cnt_case()) {
    case kValueDec: {
      set_value_dec(from.value_dec());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:libcall_types.fscanf_elem_t)
}

void fscanf_elem_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fscanf_elem_t_libcall_2eproto.base);
  ::memset(&addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&addr_)) + sizeof(type_));
  clear_has_fscanf_cnt();
}

fscanf_elem_t::~fscanf_elem_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fscanf_elem_t)
  SharedDtor();
}

void fscanf_elem_t::SharedDtor() {
  if (has_fscanf_cnt()) {
    clear_fscanf_cnt();
  }
}

void fscanf_elem_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fscanf_elem_t& fscanf_elem_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fscanf_elem_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void fscanf_elem_t::clear_fscanf_cnt() {
// @@protoc_insertion_point(one_of_clear_start:libcall_types.fscanf_elem_t)
  switch (fscanf_cnt_case()) {
    case kValueDec: {
      // No need to clear
      break;
    }
    case kValueString: {
      fscanf_cnt_.value_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FSCANF_CNT_NOT_SET;
}


void fscanf_elem_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fscanf_elem_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&addr_)) + sizeof(type_));
  }
  clear_fscanf_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fscanf_elem_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .libcall_types.fscanf_enum type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::libcall_types::fscanf_enum_IsValid(val))) {
            set_type(static_cast<::libcall_types::fscanf_enum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 value_dec = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          set_value_dec(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_value_string(), ptr, ctx, "libcall_types.fscanf_elem_t.value_string");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fscanf_elem_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fscanf_elem_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .libcall_types.fscanf_enum type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::libcall_types::fscanf_enum_IsValid(value)) {
            set_type(static_cast< ::libcall_types::fscanf_enum >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 addr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 value_dec = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          clear_fscanf_cnt();
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fscanf_cnt_.value_dec_)));
          set_has_value_dec();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value_string = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_value_string()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value_string().data(), static_cast<int>(this->value_string().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "libcall_types.fscanf_elem_t.value_string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fscanf_elem_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fscanf_elem_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fscanf_elem_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fscanf_elem_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .libcall_types.fscanf_enum type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint64 addr = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->addr(), output);
  }

  switch (fscanf_cnt_case()) {
    case kValueDec:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->value_dec(), output);
      break;
    case kValueString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->value_string().data(), static_cast<int>(this->value_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "libcall_types.fscanf_elem_t.value_string");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
        4, this->value_string(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fscanf_elem_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* fscanf_elem_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fscanf_elem_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .libcall_types.fscanf_enum type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint64 addr = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->addr(), target);
  }

  switch (fscanf_cnt_case()) {
    case kValueDec:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->value_dec(), target);
      break;
    case kValueString:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        this->value_string().data(), static_cast<int>(this->value_string().length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "libcall_types.fscanf_elem_t.value_string");
      target =
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
          4, this->value_string(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fscanf_elem_t)
  return target;
}

size_t fscanf_elem_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fscanf_elem_t)
  size_t total_size = 0;

  if (has_addr()) {
    // required uint64 addr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_type()) {
    // required .libcall_types.fscanf_enum type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t fscanf_elem_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fscanf_elem_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 addr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required .libcall_types.fscanf_enum type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (fscanf_cnt_case()) {
    // optional uint64 value_dec = 3;
    case kValueDec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->value_dec());
      break;
    }
    // optional string value_string = 4;
    case kValueString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->value_string());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fscanf_elem_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fscanf_elem_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fscanf_elem_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fscanf_elem_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fscanf_elem_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fscanf_elem_t)
    MergeFrom(*source);
  }
}

void fscanf_elem_t::MergeFrom(const fscanf_elem_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fscanf_elem_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.fscanf_cnt_case()) {
    case kValueDec: {
      set_value_dec(from.value_dec());
      break;
    }
    case kValueString: {
      set_value_string(from.value_string());
      break;
    }
    case FSCANF_CNT_NOT_SET: {
      break;
    }
  }
}

void fscanf_elem_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fscanf_elem_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fscanf_elem_t::CopyFrom(const fscanf_elem_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fscanf_elem_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fscanf_elem_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fscanf_elem_t::InternalSwap(fscanf_elem_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(addr_, other->addr_);
  swap(type_, other->type_);
  swap(fscanf_cnt_, other->fscanf_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata fscanf_elem_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fscanf_t::InitAsDefaultInstance() {
}
class fscanf_t::_Internal {
 public:
  using HasBits = decltype(std::declval<fscanf_t>()._has_bits_);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

fscanf_t::fscanf_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fscanf_t)
}
fscanf_t::fscanf_t(const fscanf_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      elems_(from.elems_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fscanf_t)
}

void fscanf_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fscanf_t_libcall_2eproto.base);
  ::memset(&stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
}

fscanf_t::~fscanf_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fscanf_t)
  SharedDtor();
}

void fscanf_t::SharedDtor() {
}

void fscanf_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fscanf_t& fscanf_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fscanf_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void fscanf_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fscanf_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elems_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fscanf_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream(&has_bits);
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .libcall_types.fscanf_elem_t elems = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_elems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fscanf_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fscanf_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stream = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_stream(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .libcall_types.fscanf_elem_t elems = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_elems()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fscanf_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fscanf_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fscanf_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fscanf_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 stream = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->stream(), output);
  }

  // repeated .libcall_types.fscanf_elem_t elems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elems_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->elems(static_cast<int>(i)),
      output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fscanf_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* fscanf_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fscanf_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream(), target);
  }

  // repeated .libcall_types.fscanf_elem_t elems = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->elems_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->elems(static_cast<int>(i)), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fscanf_t)
  return target;
}

size_t fscanf_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fscanf_t)
  size_t total_size = 0;

  if (has_stream()) {
    // required uint64 stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stream());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fscanf_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fscanf_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stream());

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .libcall_types.fscanf_elem_t elems = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->elems_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->elems(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fscanf_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fscanf_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fscanf_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fscanf_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fscanf_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fscanf_t)
    MergeFrom(*source);
  }
}

void fscanf_t::MergeFrom(const fscanf_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fscanf_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elems_.MergeFrom(from.elems_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fscanf_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fscanf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fscanf_t::CopyFrom(const fscanf_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fscanf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fscanf_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->elems())) return false;
  return true;
}

void fscanf_t::InternalSwap(fscanf_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&elems_)->InternalSwap(CastToBase(&other->elems_));
  swap(stream_, other->stream_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fscanf_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ctype_b_loc_t::InitAsDefaultInstance() {
  ::libcall_types::_ctype_b_loc_t_default_instance_._instance.get_mutable()->table_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class ctype_b_loc_t::_Internal {
 public:
  using HasBits = decltype(std::declval<ctype_b_loc_t>()._has_bits_);
  static const ::common::memory_t& table(const ctype_b_loc_t* msg);
  static void set_has_table(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_t&
ctype_b_loc_t::_Internal::table(const ctype_b_loc_t* msg) {
  return *msg->table_;
}
void ctype_b_loc_t::clear_table() {
  if (table_ != nullptr) table_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
ctype_b_loc_t::ctype_b_loc_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.ctype_b_loc_t)
}
ctype_b_loc_t::ctype_b_loc_t(const ctype_b_loc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_table()) {
    table_ = new ::common::memory_t(*from.table_);
  } else {
    table_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.ctype_b_loc_t)
}

void ctype_b_loc_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ctype_b_loc_t_libcall_2eproto.base);
  ::memset(&table_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&table_)) + sizeof(ret_));
}

ctype_b_loc_t::~ctype_b_loc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.ctype_b_loc_t)
  SharedDtor();
}

void ctype_b_loc_t::SharedDtor() {
  if (this != internal_default_instance()) delete table_;
}

void ctype_b_loc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ctype_b_loc_t& ctype_b_loc_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ctype_b_loc_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void ctype_b_loc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.ctype_b_loc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(table_ != nullptr);
    table_->Clear();
  }
  ret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ctype_b_loc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_table(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ctype_b_loc_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.ctype_b_loc_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t table = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.ctype_b_loc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.ctype_b_loc_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ctype_b_loc_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.ctype_b_loc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t table = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::table(this), output);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.ctype_b_loc_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* ctype_b_loc_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.ctype_b_loc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t table = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::table(this), target);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.ctype_b_loc_t)
  return target;
}

size_t ctype_b_loc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.ctype_b_loc_t)
  size_t total_size = 0;

  if (has_table()) {
    // required .common.memory_t table = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_);
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t ctype_b_loc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.ctype_b_loc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t table = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *table_);

    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ctype_b_loc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.ctype_b_loc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const ctype_b_loc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ctype_b_loc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.ctype_b_loc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.ctype_b_loc_t)
    MergeFrom(*source);
  }
}

void ctype_b_loc_t::MergeFrom(const ctype_b_loc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.ctype_b_loc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_table()->::common::memory_t::MergeFrom(from.table());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ctype_b_loc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.ctype_b_loc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ctype_b_loc_t::CopyFrom(const ctype_b_loc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.ctype_b_loc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ctype_b_loc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_table()) {
    if (!this->table_->IsInitialized()) return false;
  }
  return true;
}

void ctype_b_loc_t::InternalSwap(ctype_b_loc_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(table_, other->table_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ctype_b_loc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void read_t::InitAsDefaultInstance() {
  ::libcall_types::_read_t_default_instance_._instance.get_mutable()->buf_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class read_t::_Internal {
 public:
  using HasBits = decltype(std::declval<read_t>()._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_t& buf(const read_t* msg);
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_t&
read_t::_Internal::buf(const read_t* msg) {
  return *msg->buf_;
}
void read_t::clear_buf() {
  if (buf_ != nullptr) buf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
read_t::read_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.read_t)
}
read_t::read_t(const read_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_t(*from.buf_);
  } else {
    buf_ = nullptr;
  }
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.read_t)
}

void read_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_read_t_libcall_2eproto.base);
  ::memset(&buf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&buf_)) + sizeof(ret_));
}

read_t::~read_t() {
  // @@protoc_insertion_point(destructor:libcall_types.read_t)
  SharedDtor();
}

void read_t::SharedDtor() {
  if (this != internal_default_instance()) delete buf_;
}

void read_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const read_t& read_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_read_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void read_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.read_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(buf_ != nullptr);
    buf_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&fd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* read_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fd(&has_bits);
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_buf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool read_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.read_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_fd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t buf = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.read_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.read_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void read_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.read_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 fd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->fd(), output);
  }

  // required .common.memory_t buf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::buf(this), output);
  }

  // required uint64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->count(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.read_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* read_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.read_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 fd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->fd(), target);
  }

  // required .common.memory_t buf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::buf(this), target);
  }

  // required uint64 count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->count(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.read_t)
  return target;
}

size_t read_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.read_t)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);
  }

  if (has_fd()) {
    // required uint64 fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_count()) {
    // required uint64 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->count());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t read_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.read_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);

    // required uint64 fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->count());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void read_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.read_t)
  GOOGLE_DCHECK_NE(&from, this);
  const read_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<read_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.read_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.read_t)
    MergeFrom(*source);
  }
}

void read_t::MergeFrom(const read_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.read_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_buf()->::common::memory_t::MergeFrom(from.buf());
    }
    if (cached_has_bits & 0x00000002u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000004u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void read_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void read_t::CopyFrom(const read_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool read_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_buf()) {
    if (!this->buf_->IsInitialized()) return false;
  }
  return true;
}

void read_t::InternalSwap(read_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buf_, other->buf_);
  swap(fd_, other->fd_);
  swap(count_, other->count_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata read_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fread_t::InitAsDefaultInstance() {
  ::libcall_types::_fread_t_default_instance_._instance.get_mutable()->ptr_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class fread_t::_Internal {
 public:
  using HasBits = decltype(std::declval<fread_t>()._has_bits_);
  static const ::common::memory_t& ptr(const fread_t* msg);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nmemb(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::common::memory_t&
fread_t::_Internal::ptr(const fread_t* msg) {
  return *msg->ptr_;
}
void fread_t::clear_ptr() {
  if (ptr_ != nullptr) ptr_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
fread_t::fread_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fread_t)
}
fread_t::fread_t(const fread_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ptr()) {
    ptr_ = new ::common::memory_t(*from.ptr_);
  } else {
    ptr_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fread_t)
}

void fread_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fread_t_libcall_2eproto.base);
  ::memset(&ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
}

fread_t::~fread_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fread_t)
  SharedDtor();
}

void fread_t::SharedDtor() {
  if (this != internal_default_instance()) delete ptr_;
}

void fread_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fread_t& fread_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fread_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void fread_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fread_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ptr_ != nullptr);
    ptr_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fread_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_ptr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 nmemb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nmemb(&has_bits);
          nmemb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 stream = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_stream(&has_bits);
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fread_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fread_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ptr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nmemb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nmemb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nmemb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stream = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_stream(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fread_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fread_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fread_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fread_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::ptr(this), output);
  }

  // required uint64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // required uint64 nmemb = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->nmemb(), output);
  }

  // required uint64 stream = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->stream(), output);
  }

  // required uint64 ret = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fread_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* fread_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fread_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ptr(this), target);
  }

  // required uint64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // required uint64 nmemb = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->nmemb(), target);
  }

  // required uint64 stream = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->stream(), target);
  }

  // required uint64 ret = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fread_t)
  return target;
}

size_t fread_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fread_t)
  size_t total_size = 0;

  if (has_ptr()) {
    // required .common.memory_t ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptr_);
  }

  if (has_size()) {
    // required uint64 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_nmemb()) {
    // required uint64 nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nmemb());
  }

  if (has_stream()) {
    // required uint64 stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stream());
  }

  if (has_ret()) {
    // required uint64 ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fread_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fread_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required .common.memory_t ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ptr_);

    // required uint64 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nmemb());

    // required uint64 stream = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stream());

    // required uint64 ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fread_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fread_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fread_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fread_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fread_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fread_t)
    MergeFrom(*source);
  }
}

void fread_t::MergeFrom(const fread_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fread_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ptr()->::common::memory_t::MergeFrom(from.ptr());
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      nmemb_ = from.nmemb_;
    }
    if (cached_has_bits & 0x00000008u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fread_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fread_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fread_t::CopyFrom(const fread_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fread_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fread_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  if (has_ptr()) {
    if (!this->ptr_->IsInitialized()) return false;
  }
  return true;
}

void fread_t::InternalSwap(fread_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ptr_, other->ptr_);
  swap(size_, other->size_);
  swap(nmemb_, other->nmemb_);
  swap(stream_, other->stream_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fread_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strchr_t::InitAsDefaultInstance() {
}
class strchr_t::_Internal {
 public:
  using HasBits = decltype(std::declval<strchr_t>()._has_bits_);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_max(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

strchr_t::strchr_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strchr_t)
}
strchr_t::strchr_t(const strchr_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s_, &from.s_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strchr_t)
}

void strchr_t::SharedCtor() {
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ret_));
}

strchr_t::~strchr_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strchr_t)
  SharedDtor();
}

void strchr_t::SharedDtor() {
}

void strchr_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strchr_t& strchr_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strchr_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void strchr_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strchr_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&s_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strchr_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_s(&has_bits);
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size_max = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size_max(&has_bits);
          size_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strchr_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strchr_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_s(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 c = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_c(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size_max = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size_max(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strchr_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strchr_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strchr_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strchr_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->s(), output);
  }

  // required uint64 c = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->c(), output);
  }

  // required uint64 size_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size_max(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strchr_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* strchr_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strchr_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->s(), target);
  }

  // required uint64 c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->c(), target);
  }

  // required uint64 size_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->size_max(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strchr_t)
  return target;
}

size_t strchr_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strchr_t)
  size_t total_size = 0;

  if (has_s()) {
    // required uint64 s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s());
  }

  if (has_c()) {
    // required uint64 c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->c());
  }

  if (has_size_max()) {
    // required uint64 size_max = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_max());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strchr_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strchr_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s());

    // required uint64 c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->c());

    // required uint64 size_max = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_max());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strchr_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strchr_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strchr_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strchr_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strchr_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strchr_t)
    MergeFrom(*source);
  }
}

void strchr_t::MergeFrom(const strchr_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strchr_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s_ = from.s_;
    }
    if (cached_has_bits & 0x00000002u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_max_ = from.size_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strchr_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strchr_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strchr_t::CopyFrom(const strchr_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strchr_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strchr_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strchr_t::InternalSwap(strchr_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_, other->s_);
  swap(c_, other->c_);
  swap(size_max_, other->size_max_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strchr_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strncpy_t::InitAsDefaultInstance() {
}
class strncpy_t::_Internal {
 public:
  using HasBits = decltype(std::declval<strncpy_t>()._has_bits_);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

strncpy_t::strncpy_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncpy_t)
}
strncpy_t::strncpy_t(const strncpy_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dst_, &from.dst_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dst_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncpy_t)
}

void strncpy_t::SharedCtor() {
  ::memset(&dst_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dst_)) + sizeof(ret_));
}

strncpy_t::~strncpy_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strncpy_t)
  SharedDtor();
}

void strncpy_t::SharedDtor() {
}

void strncpy_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strncpy_t& strncpy_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strncpy_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void strncpy_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&dst_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&dst_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strncpy_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 dst = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dst(&has_bits);
          dst_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_src(&has_bits);
          src_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_n(&has_bits);
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strncpy_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncpy_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 dst = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_dst(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 src = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_src(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &src_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 n = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_n(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncpy_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncpy_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strncpy_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 dst = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->dst(), output);
  }

  // required uint64 src = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->src(), output);
  }

  // required uint64 n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->n(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncpy_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* strncpy_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 dst = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->dst(), target);
  }

  // required uint64 src = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->src(), target);
  }

  // required uint64 n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->n(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncpy_t)
  return target;
}

size_t strncpy_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncpy_t)
  size_t total_size = 0;

  if (has_dst()) {
    // required uint64 dst = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->dst());
  }

  if (has_src()) {
    // required uint64 src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->src());
  }

  if (has_n()) {
    // required uint64 n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strncpy_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncpy_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 dst = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->dst());

    // required uint64 src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->src());

    // required uint64 n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strncpy_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strncpy_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strncpy_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncpy_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncpy_t)
    MergeFrom(*source);
  }
}

void strncpy_t::MergeFrom(const strncpy_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      dst_ = from.dst_;
    }
    if (cached_has_bits & 0x00000002u) {
      src_ = from.src_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strncpy_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncpy_t::CopyFrom(const strncpy_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncpy_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncpy_t::InternalSwap(strncpy_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dst_, other->dst_);
  swap(src_, other->src_);
  swap(n_, other->n_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strncpy_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fstat_t::InitAsDefaultInstance() {
  ::libcall_types::_fstat_t_default_instance_._instance.get_mutable()->buf_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class fstat_t::_Internal {
 public:
  using HasBits = decltype(std::declval<fstat_t>()._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_t& buf(const fstat_t* msg);
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_t&
fstat_t::_Internal::buf(const fstat_t* msg) {
  return *msg->buf_;
}
void fstat_t::clear_buf() {
  if (buf_ != nullptr) buf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
fstat_t::fstat_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fstat_t)
}
fstat_t::fstat_t(const fstat_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_t(*from.buf_);
  } else {
    buf_ = nullptr;
  }
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fstat_t)
}

void fstat_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fstat_t_libcall_2eproto.base);
  ::memset(&buf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&buf_)) + sizeof(ret_));
}

fstat_t::~fstat_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fstat_t)
  SharedDtor();
}

void fstat_t::SharedDtor() {
  if (this != internal_default_instance()) delete buf_;
}

void fstat_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fstat_t& fstat_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fstat_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void fstat_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fstat_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(buf_ != nullptr);
    buf_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&fd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fstat_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fd(&has_bits);
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t buf = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_buf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fstat_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fstat_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_fd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t buf = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fstat_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fstat_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fstat_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fstat_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 fd = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->fd(), output);
  }

  // required .common.memory_t buf = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::buf(this), output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fstat_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* fstat_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fstat_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 fd = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->fd(), target);
  }

  // required .common.memory_t buf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::buf(this), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fstat_t)
  return target;
}

size_t fstat_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fstat_t)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);
  }

  if (has_fd()) {
    // required uint64 fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fstat_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fstat_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t buf = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);

    // required uint64 fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fstat_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fstat_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fstat_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fstat_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fstat_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fstat_t)
    MergeFrom(*source);
  }
}

void fstat_t::MergeFrom(const fstat_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fstat_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_buf()->::common::memory_t::MergeFrom(from.buf());
    }
    if (cached_has_bits & 0x00000002u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fstat_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fstat_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fstat_t::CopyFrom(const fstat_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fstat_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fstat_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_buf()) {
    if (!this->buf_->IsInitialized()) return false;
  }
  return true;
}

void fstat_t::InternalSwap(fstat_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buf_, other->buf_);
  swap(fd_, other->fd_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fstat_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fxstat64_t::InitAsDefaultInstance() {
  ::libcall_types::_fxstat64_t_default_instance_._instance.get_mutable()->buf_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class fxstat64_t::_Internal {
 public:
  using HasBits = decltype(std::declval<fxstat64_t>()._has_bits_);
  static void set_has_vers(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::common::memory_t& buf(const fxstat64_t* msg);
  static void set_has_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_t&
fxstat64_t::_Internal::buf(const fxstat64_t* msg) {
  return *msg->buf_;
}
void fxstat64_t::clear_buf() {
  if (buf_ != nullptr) buf_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
fxstat64_t::fxstat64_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fxstat64_t)
}
fxstat64_t::fxstat64_t(const fxstat64_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_buf()) {
    buf_ = new ::common::memory_t(*from.buf_);
  } else {
    buf_ = nullptr;
  }
  ::memcpy(&vers_, &from.vers_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&vers_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fxstat64_t)
}

void fxstat64_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fxstat64_t_libcall_2eproto.base);
  ::memset(&buf_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&buf_)) + sizeof(ret_));
}

fxstat64_t::~fxstat64_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fxstat64_t)
  SharedDtor();
}

void fxstat64_t::SharedDtor() {
  if (this != internal_default_instance()) delete buf_;
}

void fxstat64_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fxstat64_t& fxstat64_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fxstat64_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void fxstat64_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fxstat64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(buf_ != nullptr);
    buf_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&vers_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&vers_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fxstat64_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 vers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_vers(&has_bits);
          vers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 fd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_fd(&has_bits);
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t buf = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_buf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fxstat64_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fxstat64_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 vers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_vers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 fd = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_fd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t buf = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_buf()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fxstat64_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fxstat64_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fxstat64_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fxstat64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 vers = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->vers(), output);
  }

  // required uint64 fd = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->fd(), output);
  }

  // required .common.memory_t buf = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::buf(this), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fxstat64_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* fxstat64_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fxstat64_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 vers = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->vers(), target);
  }

  // required uint64 fd = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->fd(), target);
  }

  // required .common.memory_t buf = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::buf(this), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fxstat64_t)
  return target;
}

size_t fxstat64_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fxstat64_t)
  size_t total_size = 0;

  if (has_buf()) {
    // required .common.memory_t buf = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);
  }

  if (has_vers()) {
    // required uint64 vers = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->vers());
  }

  if (has_fd()) {
    // required uint64 fd = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fxstat64_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fxstat64_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t buf = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *buf_);

    // required uint64 vers = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->vers());

    // required uint64 fd = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fxstat64_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fxstat64_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fxstat64_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fxstat64_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fxstat64_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fxstat64_t)
    MergeFrom(*source);
  }
}

void fxstat64_t::MergeFrom(const fxstat64_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fxstat64_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_buf()->::common::memory_t::MergeFrom(from.buf());
    }
    if (cached_has_bits & 0x00000002u) {
      vers_ = from.vers_;
    }
    if (cached_has_bits & 0x00000004u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fxstat64_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fxstat64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fxstat64_t::CopyFrom(const fxstat64_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fxstat64_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fxstat64_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_buf()) {
    if (!this->buf_->IsInitialized()) return false;
  }
  return true;
}

void fxstat64_t::InternalSwap(fxstat64_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(buf_, other->buf_);
  swap(vers_, other->vers_);
  swap(fd_, other->fd_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fxstat64_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void realloc_t::InitAsDefaultInstance() {
}
class realloc_t::_Internal {
 public:
  using HasBits = decltype(std::declval<realloc_t>()._has_bits_);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

realloc_t::realloc_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.realloc_t)
}
realloc_t::realloc_t(const realloc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ptr_, &from.ptr_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.realloc_t)
}

void realloc_t::SharedCtor() {
  ::memset(&ptr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
}

realloc_t::~realloc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.realloc_t)
  SharedDtor();
}

void realloc_t::SharedDtor() {
}

void realloc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const realloc_t& realloc_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_realloc_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void realloc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.realloc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ptr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&ptr_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* realloc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ptr(&has_bits);
          ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool realloc_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.realloc_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ptr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.realloc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.realloc_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void realloc_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.realloc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  // required uint64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.realloc_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* realloc_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.realloc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  // required uint64 size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->size(), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.realloc_t)
  return target;
}

size_t realloc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.realloc_t)
  size_t total_size = 0;

  if (has_ptr()) {
    // required uint64 ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }

  if (has_size()) {
    // required uint64 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t realloc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.realloc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 ptr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ptr());

    // required uint64 size = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void realloc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.realloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const realloc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<realloc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.realloc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.realloc_t)
    MergeFrom(*source);
  }
}

void realloc_t::MergeFrom(const realloc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.realloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ptr_ = from.ptr_;
    }
    if (cached_has_bits & 0x00000002u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void realloc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.realloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void realloc_t::CopyFrom(const realloc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.realloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool realloc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void realloc_t::InternalSwap(realloc_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ptr_, other->ptr_);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata realloc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void mmap_t::InitAsDefaultInstance() {
  ::libcall_types::_mmap_t_default_instance_._instance.get_mutable()->ret_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class mmap_t::_Internal {
 public:
  using HasBits = decltype(std::declval<mmap_t>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_prot(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::common::memory_t& ret(const mmap_t* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::common::memory_t&
mmap_t::_Internal::ret(const mmap_t* msg) {
  return *msg->ret_;
}
void mmap_t::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
mmap_t::mmap_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.mmap_t)
}
mmap_t::mmap_t(const mmap_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ret()) {
    ret_ = new ::common::memory_t(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.mmap_t)
}

void mmap_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_mmap_t_libcall_2eproto.base);
  ::memset(&ret_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&ret_)) + sizeof(offset_));
}

mmap_t::~mmap_t() {
  // @@protoc_insertion_point(destructor:libcall_types.mmap_t)
  SharedDtor();
}

void mmap_t::SharedDtor() {
  if (this != internal_default_instance()) delete ret_;
}

void mmap_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const mmap_t& mmap_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_mmap_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void mmap_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.mmap_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ret_ != nullptr);
    ret_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&addr_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* mmap_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 prot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_prot(&has_bits);
          prot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 flags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 fd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_fd(&has_bits);
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 offset = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t ret = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool mmap_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.mmap_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 length = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_length(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 prot = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_prot(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 flags = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 fd = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_fd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 offset = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t ret = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.mmap_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.mmap_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void mmap_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.mmap_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required uint64 length = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->length(), output);
  }

  // required uint64 prot = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->prot(), output);
  }

  // required uint64 flags = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->flags(), output);
  }

  // required uint64 fd = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->fd(), output);
  }

  // required uint64 offset = 6;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->offset(), output);
  }

  // required .common.memory_t ret = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::ret(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.mmap_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* mmap_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.mmap_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required uint64 length = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->length(), target);
  }

  // required uint64 prot = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->prot(), target);
  }

  // required uint64 flags = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->flags(), target);
  }

  // required uint64 fd = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->fd(), target);
  }

  // required uint64 offset = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->offset(), target);
  }

  // required .common.memory_t ret = 7;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::ret(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.mmap_t)
  return target;
}

size_t mmap_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.mmap_t)
  size_t total_size = 0;

  if (has_ret()) {
    // required .common.memory_t ret = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);
  }

  if (has_addr()) {
    // required uint64 addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_length()) {
    // required uint64 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->length());
  }

  if (has_prot()) {
    // required uint64 prot = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->prot());
  }

  if (has_flags()) {
    // required uint64 flags = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->flags());
  }

  if (has_fd()) {
    // required uint64 fd = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_offset()) {
    // required uint64 offset = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  return total_size;
}
size_t mmap_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.mmap_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .common.memory_t ret = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);

    // required uint64 addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required uint64 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->length());

    // required uint64 prot = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->prot());

    // required uint64 flags = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->flags());

    // required uint64 fd = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 offset = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void mmap_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.mmap_t)
  GOOGLE_DCHECK_NE(&from, this);
  const mmap_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<mmap_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.mmap_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.mmap_t)
    MergeFrom(*source);
  }
}

void mmap_t::MergeFrom(const mmap_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.mmap_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ret()->::common::memory_t::MergeFrom(from.ret());
    }
    if (cached_has_bits & 0x00000002u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      prot_ = from.prot_;
    }
    if (cached_has_bits & 0x00000010u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000020u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000040u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void mmap_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.mmap_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void mmap_t::CopyFrom(const mmap_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.mmap_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool mmap_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_ret()) {
    if (!this->ret_->IsInitialized()) return false;
  }
  return true;
}

void mmap_t::InternalSwap(mmap_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
  swap(addr_, other->addr_);
  swap(length_, other->length_);
  swap(prot_, other->prot_);
  swap(flags_, other->flags_);
  swap(fd_, other->fd_);
  swap(offset_, other->offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata mmap_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void qsort_t::InitAsDefaultInstance() {
  ::libcall_types::_qsort_t_default_instance_._instance.get_mutable()->base_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class qsort_t::_Internal {
 public:
  using HasBits = decltype(std::declval<qsort_t>()._has_bits_);
  static const ::common::memory_t& base(const qsort_t* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nmemb(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_compare(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_t&
qsort_t::_Internal::base(const qsort_t* msg) {
  return *msg->base_;
}
void qsort_t::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
qsort_t::qsort_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.qsort_t)
}
qsort_t::qsort_t(const qsort_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_base()) {
    base_ = new ::common::memory_t(*from.base_);
  } else {
    base_ = nullptr;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.qsort_t)
}

void qsort_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_qsort_t_libcall_2eproto.base);
  ::memset(&base_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&base_)) + sizeof(compare_));
}

qsort_t::~qsort_t() {
  // @@protoc_insertion_point(destructor:libcall_types.qsort_t)
  SharedDtor();
}

void qsort_t::SharedDtor() {
  if (this != internal_default_instance()) delete base_;
}

void qsort_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const qsort_t& qsort_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_qsort_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void qsort_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.qsort_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(base_ != nullptr);
    base_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&nmemb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compare_) -
        reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* qsort_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t base = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 nmemb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nmemb(&has_bits);
          nmemb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 compare = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_compare(&has_bits);
          compare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool qsort_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.qsort_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t base = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nmemb = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_nmemb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nmemb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 compare = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_compare(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.qsort_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.qsort_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void qsort_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.qsort_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t base = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::base(this), output);
  }

  // required uint64 nmemb = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nmemb(), output);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 compare = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->compare(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.qsort_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* qsort_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.qsort_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t base = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::base(this), target);
  }

  // required uint64 nmemb = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->nmemb(), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 compare = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->compare(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.qsort_t)
  return target;
}

size_t qsort_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.qsort_t)
  size_t total_size = 0;

  if (has_base()) {
    // required .common.memory_t base = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (has_nmemb()) {
    // required uint64 nmemb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nmemb());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_compare()) {
    // required uint64 compare = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->compare());
  }

  return total_size;
}
size_t qsort_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.qsort_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t base = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);

    // required uint64 nmemb = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nmemb());

    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 compare = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void qsort_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.qsort_t)
  GOOGLE_DCHECK_NE(&from, this);
  const qsort_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<qsort_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.qsort_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.qsort_t)
    MergeFrom(*source);
  }
}

void qsort_t::MergeFrom(const qsort_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.qsort_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_base()->::common::memory_t::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000002u) {
      nmemb_ = from.nmemb_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      compare_ = from.compare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void qsort_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.qsort_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void qsort_t::CopyFrom(const qsort_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.qsort_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool qsort_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_base()) {
    if (!this->base_->IsInitialized()) return false;
  }
  return true;
}

void qsort_t::InternalSwap(qsort_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(base_, other->base_);
  swap(nmemb_, other->nmemb_);
  swap(size_, other->size_);
  swap(compare_, other->compare_);
}

::PROTOBUF_NAMESPACE_ID::Metadata qsort_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void bsearch_t::InitAsDefaultInstance() {
  ::libcall_types::_bsearch_t_default_instance_._instance.get_mutable()->key_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_bsearch_t_default_instance_._instance.get_mutable()->base_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_bsearch_t_default_instance_._instance.get_mutable()->ret_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class bsearch_t::_Internal {
 public:
  using HasBits = decltype(std::declval<bsearch_t>()._has_bits_);
  static const ::common::memory_t& key(const bsearch_t* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_t& base(const bsearch_t* msg);
  static void set_has_base(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nmemb(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_compare(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::common::memory_t& ret(const bsearch_t* msg);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_t&
bsearch_t::_Internal::key(const bsearch_t* msg) {
  return *msg->key_;
}
const ::common::memory_t&
bsearch_t::_Internal::base(const bsearch_t* msg) {
  return *msg->base_;
}
const ::common::memory_t&
bsearch_t::_Internal::ret(const bsearch_t* msg) {
  return *msg->ret_;
}
void bsearch_t::clear_key() {
  if (key_ != nullptr) key_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void bsearch_t::clear_base() {
  if (base_ != nullptr) base_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void bsearch_t::clear_ret() {
  if (ret_ != nullptr) ret_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
bsearch_t::bsearch_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.bsearch_t)
}
bsearch_t::bsearch_t(const bsearch_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_key()) {
    key_ = new ::common::memory_t(*from.key_);
  } else {
    key_ = nullptr;
  }
  if (from.has_base()) {
    base_ = new ::common::memory_t(*from.base_);
  } else {
    base_ = nullptr;
  }
  if (from.has_ret()) {
    ret_ = new ::common::memory_t(*from.ret_);
  } else {
    ret_ = nullptr;
  }
  ::memcpy(&nmemb_, &from.nmemb_,
    static_cast<size_t>(reinterpret_cast<char*>(&compare_) -
    reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.bsearch_t)
}

void bsearch_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_bsearch_t_libcall_2eproto.base);
  ::memset(&key_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&compare_) -
      reinterpret_cast<char*>(&key_)) + sizeof(compare_));
}

bsearch_t::~bsearch_t() {
  // @@protoc_insertion_point(destructor:libcall_types.bsearch_t)
  SharedDtor();
}

void bsearch_t::SharedDtor() {
  if (this != internal_default_instance()) delete key_;
  if (this != internal_default_instance()) delete base_;
  if (this != internal_default_instance()) delete ret_;
}

void bsearch_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bsearch_t& bsearch_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bsearch_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void bsearch_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.bsearch_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(key_ != nullptr);
      key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(base_ != nullptr);
      base_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ret_ != nullptr);
      ret_->Clear();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&nmemb_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&compare_) -
        reinterpret_cast<char*>(&nmemb_)) + sizeof(compare_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* bsearch_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t base = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_base(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 nmemb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nmemb(&has_bits);
          nmemb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 compare = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_compare(&has_bits);
          compare_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t ret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_ret(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool bsearch_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.bsearch_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t base = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_base()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 nmemb = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_nmemb(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nmemb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 compare = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_compare(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &compare_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t ret = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_ret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.bsearch_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.bsearch_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void bsearch_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.bsearch_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::key(this), output);
  }

  // required .common.memory_t base = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::base(this), output);
  }

  // required uint64 nmemb = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->nmemb(), output);
  }

  // required uint64 size = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // required uint64 compare = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->compare(), output);
  }

  // required .common.memory_t ret = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::ret(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.bsearch_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* bsearch_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.bsearch_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::key(this), target);
  }

  // required .common.memory_t base = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::base(this), target);
  }

  // required uint64 nmemb = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->nmemb(), target);
  }

  // required uint64 size = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->size(), target);
  }

  // required uint64 compare = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->compare(), target);
  }

  // required .common.memory_t ret = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::ret(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.bsearch_t)
  return target;
}

size_t bsearch_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.bsearch_t)
  size_t total_size = 0;

  if (has_key()) {
    // required .common.memory_t key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);
  }

  if (has_base()) {
    // required .common.memory_t base = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);
  }

  if (has_ret()) {
    // required .common.memory_t ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);
  }

  if (has_nmemb()) {
    // required uint64 nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nmemb());
  }

  if (has_size()) {
    // required uint64 size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_compare()) {
    // required uint64 compare = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->compare());
  }

  return total_size;
}
size_t bsearch_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.bsearch_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_t key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_);

    // required .common.memory_t base = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *base_);

    // required .common.memory_t ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ret_);

    // required uint64 nmemb = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nmemb());

    // required uint64 size = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 compare = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->compare());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bsearch_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.bsearch_t)
  GOOGLE_DCHECK_NE(&from, this);
  const bsearch_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bsearch_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.bsearch_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.bsearch_t)
    MergeFrom(*source);
  }
}

void bsearch_t::MergeFrom(const bsearch_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.bsearch_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_key()->::common::memory_t::MergeFrom(from.key());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_base()->::common::memory_t::MergeFrom(from.base());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ret()->::common::memory_t::MergeFrom(from.ret());
    }
    if (cached_has_bits & 0x00000008u) {
      nmemb_ = from.nmemb_;
    }
    if (cached_has_bits & 0x00000010u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000020u) {
      compare_ = from.compare_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void bsearch_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.bsearch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bsearch_t::CopyFrom(const bsearch_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.bsearch_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bsearch_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_key()) {
    if (!this->key_->IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base_->IsInitialized()) return false;
  }
  if (has_ret()) {
    if (!this->ret_->IsInitialized()) return false;
  }
  return true;
}

void bsearch_t::InternalSwap(bsearch_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_, other->key_);
  swap(base_, other->base_);
  swap(ret_, other->ret_);
  swap(nmemb_, other->nmemb_);
  swap(size_, other->size_);
  swap(compare_, other->compare_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bsearch_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void open_t::InitAsDefaultInstance() {
  ::libcall_types::_open_t_default_instance_._instance.get_mutable()->pathname_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class open_t::_Internal {
 public:
  using HasBits = decltype(std::declval<open_t>()._has_bits_);
  static const ::common::memory_t& pathname(const open_t* msg);
  static void set_has_pathname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_t&
open_t::_Internal::pathname(const open_t* msg) {
  return *msg->pathname_;
}
void open_t::clear_pathname() {
  if (pathname_ != nullptr) pathname_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
open_t::open_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.open_t)
}
open_t::open_t(const open_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pathname()) {
    pathname_ = new ::common::memory_t(*from.pathname_);
  } else {
    pathname_ = nullptr;
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.open_t)
}

void open_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_open_t_libcall_2eproto.base);
  ::memset(&pathname_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&pathname_)) + sizeof(ret_));
}

open_t::~open_t() {
  // @@protoc_insertion_point(destructor:libcall_types.open_t)
  SharedDtor();
}

void open_t::SharedDtor() {
  if (this != internal_default_instance()) delete pathname_;
}

void open_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const open_t& open_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_open_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void open_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.open_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pathname_ != nullptr);
    pathname_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* open_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t pathname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_pathname(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool open_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.open_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t pathname = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_pathname()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 flags = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 mode = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.open_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.open_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void open_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.open_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t pathname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::pathname(this), output);
  }

  // required uint64 flags = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->flags(), output);
  }

  // required uint64 mode = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->mode(), output);
  }

  // required uint64 ret = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.open_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* open_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.open_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t pathname = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::pathname(this), target);
  }

  // required uint64 flags = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->flags(), target);
  }

  // required uint64 mode = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->mode(), target);
  }

  // required uint64 ret = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.open_t)
  return target;
}

size_t open_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.open_t)
  size_t total_size = 0;

  if (has_pathname()) {
    // required .common.memory_t pathname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathname_);
  }

  if (has_flags()) {
    // required uint64 flags = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->flags());
  }

  if (has_mode()) {
    // required uint64 mode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->mode());
  }

  if (has_ret()) {
    // required uint64 ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t open_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.open_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t pathname = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pathname_);

    // required uint64 flags = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->flags());

    // required uint64 mode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->mode());

    // required uint64 ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void open_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.open_t)
  GOOGLE_DCHECK_NE(&from, this);
  const open_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<open_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.open_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.open_t)
    MergeFrom(*source);
  }
}

void open_t::MergeFrom(const open_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.open_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pathname()->::common::memory_t::MergeFrom(from.pathname());
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void open_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void open_t::CopyFrom(const open_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool open_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_pathname()) {
    if (!this->pathname_->IsInitialized()) return false;
  }
  return true;
}

void open_t::InternalSwap(open_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pathname_, other->pathname_);
  swap(flags_, other->flags_);
  swap(mode_, other->mode_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata open_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strcpy_t::InitAsDefaultInstance() {
  ::libcall_types::_strcpy_t_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_strcpy_t_default_instance_._instance.get_mutable()->dst_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class strcpy_t::_Internal {
 public:
  using HasBits = decltype(std::declval<strcpy_t>()._has_bits_);
  static const ::common::memory_t& src(const strcpy_t* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_t& dst(const strcpy_t* msg);
  static void set_has_dst(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_t&
strcpy_t::_Internal::src(const strcpy_t* msg) {
  return *msg->src_;
}
const ::common::memory_t&
strcpy_t::_Internal::dst(const strcpy_t* msg) {
  return *msg->dst_;
}
void strcpy_t::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void strcpy_t::clear_dst() {
  if (dst_ != nullptr) dst_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
strcpy_t::strcpy_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcpy_t)
}
strcpy_t::strcpy_t(const strcpy_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_t(*from.src_);
  } else {
    src_ = nullptr;
  }
  if (from.has_dst()) {
    dst_ = new ::common::memory_t(*from.dst_);
  } else {
    dst_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcpy_t)
}

void strcpy_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_strcpy_t_libcall_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&src_)) + sizeof(ret_));
}

strcpy_t::~strcpy_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strcpy_t)
  SharedDtor();
}

void strcpy_t::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
  if (this != internal_default_instance()) delete dst_;
}

void strcpy_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strcpy_t& strcpy_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strcpy_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void strcpy_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(src_ != nullptr);
      src_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(dst_ != nullptr);
      dst_->Clear();
    }
  }
  ret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strcpy_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t dst = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_dst(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strcpy_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcpy_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t dst = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcpy_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcpy_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strcpy_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::src(this), output);
  }

  // required .common.memory_t dst = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::dst(this), output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcpy_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* strcpy_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::src(this), target);
  }

  // required .common.memory_t dst = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::dst(this), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcpy_t)
  return target;
}

size_t strcpy_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcpy_t)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_dst()) {
    // required .common.memory_t dst = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strcpy_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcpy_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required .common.memory_t dst = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dst_);

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strcpy_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strcpy_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strcpy_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcpy_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcpy_t)
    MergeFrom(*source);
  }
}

void strcpy_t::MergeFrom(const strcpy_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_src()->::common::memory_t::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_dst()->::common::memory_t::MergeFrom(from.dst());
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strcpy_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcpy_t::CopyFrom(const strcpy_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcpy_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_src()) {
    if (!this->src_->IsInitialized()) return false;
  }
  if (has_dst()) {
    if (!this->dst_->IsInitialized()) return false;
  }
  return true;
}

void strcpy_t::InternalSwap(strcpy_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(src_, other->src_);
  swap(dst_, other->dst_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strcpy_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strcmp_t::InitAsDefaultInstance() {
}
class strcmp_t::_Internal {
 public:
  using HasBits = decltype(std::declval<strcmp_t>()._has_bits_);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_max_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size_max_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

strcmp_t::strcmp_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strcmp_t)
}
strcmp_t::strcmp_t(const strcmp_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strcmp_t)
}

void strcmp_t::SharedCtor() {
  ::memset(&s1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
}

strcmp_t::~strcmp_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strcmp_t)
  SharedDtor();
}

void strcmp_t::SharedDtor() {
}

void strcmp_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strcmp_t& strcmp_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strcmp_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void strcmp_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strcmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&s1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strcmp_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_s1(&has_bits);
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_s2(&has_bits);
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size_max_s1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size_max_s1(&has_bits);
          size_max_s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size_max_s2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size_max_s2(&has_bits);
          size_max_s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strcmp_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strcmp_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_s1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 s2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_s2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size_max_s1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size_max_s1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_max_s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size_max_s2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_size_max_s2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_max_s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strcmp_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strcmp_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strcmp_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strcmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->s1(), output);
  }

  // required uint64 s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->s2(), output);
  }

  // required uint64 size_max_s1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size_max_s1(), output);
  }

  // required uint64 size_max_s2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->size_max_s2(), output);
  }

  // required uint64 ret = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(5, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strcmp_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* strcmp_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strcmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->s1(), target);
  }

  // required uint64 s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->s2(), target);
  }

  // required uint64 size_max_s1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->size_max_s1(), target);
  }

  // required uint64 size_max_s2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->size_max_s2(), target);
  }

  // required uint64 ret = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strcmp_t)
  return target;
}

size_t strcmp_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strcmp_t)
  size_t total_size = 0;

  if (has_s1()) {
    // required uint64 s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s1());
  }

  if (has_s2()) {
    // required uint64 s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s2());
  }

  if (has_size_max_s1()) {
    // required uint64 size_max_s1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_max_s1());
  }

  if (has_size_max_s2()) {
    // required uint64 size_max_s2 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_max_s2());
  }

  if (has_ret()) {
    // required uint64 ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strcmp_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strcmp_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s1());

    // required uint64 s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s2());

    // required uint64 size_max_s1 = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_max_s1());

    // required uint64 size_max_s2 = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size_max_s2());

    // required uint64 ret = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strcmp_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strcmp_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strcmp_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strcmp_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strcmp_t)
    MergeFrom(*source);
  }
}

void strcmp_t::MergeFrom(const strcmp_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      s1_ = from.s1_;
    }
    if (cached_has_bits & 0x00000002u) {
      s2_ = from.s2_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_max_s1_ = from.size_max_s1_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_max_s2_ = from.size_max_s2_;
    }
    if (cached_has_bits & 0x00000010u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strcmp_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strcmp_t::CopyFrom(const strcmp_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strcmp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void strcmp_t::InternalSwap(strcmp_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(size_max_s1_, other->size_max_s1_);
  swap(size_max_s2_, other->size_max_s2_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strcmp_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void strncmp_t::InitAsDefaultInstance() {
}
class strncmp_t::_Internal {
 public:
  using HasBits = decltype(std::declval<strncmp_t>()._has_bits_);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

strncmp_t::strncmp_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.strncmp_t)
}
strncmp_t::strncmp_t(const strncmp_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.strncmp_t)
}

void strncmp_t::SharedCtor() {
  ::memset(&s1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
}

strncmp_t::~strncmp_t() {
  // @@protoc_insertion_point(destructor:libcall_types.strncmp_t)
  SharedDtor();
}

void strncmp_t::SharedDtor() {
}

void strncmp_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const strncmp_t& strncmp_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_strncmp_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void strncmp_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.strncmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* strncmp_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_s1(&has_bits);
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_s2(&has_bits);
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_n(&has_bits);
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool strncmp_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.strncmp_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_s1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 s2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_s2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 n = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_n(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.strncmp_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.strncmp_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void strncmp_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.strncmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->s1(), output);
  }

  // required uint64 s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->s2(), output);
  }

  // required uint64 n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->n(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.strncmp_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* strncmp_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.strncmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->s1(), target);
  }

  // required uint64 s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->s2(), target);
  }

  // required uint64 n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->n(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.strncmp_t)
  return target;
}

size_t strncmp_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.strncmp_t)
  size_t total_size = 0;

  if (has_s1()) {
    // required uint64 s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s1());
  }

  if (has_s2()) {
    // required uint64 s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s2());
  }

  if (has_n()) {
    // required uint64 n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t strncmp_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.strncmp_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s1());

    // required uint64 s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s2());

    // required uint64 n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void strncmp_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.strncmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  const strncmp_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<strncmp_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.strncmp_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.strncmp_t)
    MergeFrom(*source);
  }
}

void strncmp_t::MergeFrom(const strncmp_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.strncmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s1_ = from.s1_;
    }
    if (cached_has_bits & 0x00000002u) {
      s2_ = from.s2_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void strncmp_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.strncmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strncmp_t::CopyFrom(const strncmp_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.strncmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strncmp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void strncmp_t::InternalSwap(strncmp_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(n_, other->n_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata strncmp_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void memcmp_t::InitAsDefaultInstance() {
}
class memcmp_t::_Internal {
 public:
  using HasBits = decltype(std::declval<memcmp_t>()._has_bits_);
  static void set_has_s1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_s2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

memcmp_t::memcmp_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcmp_t)
}
memcmp_t::memcmp_t(const memcmp_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&s1_, &from.s1_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcmp_t)
}

void memcmp_t::SharedCtor() {
  ::memset(&s1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
}

memcmp_t::~memcmp_t() {
  // @@protoc_insertion_point(destructor:libcall_types.memcmp_t)
  SharedDtor();
}

void memcmp_t::SharedDtor() {
}

void memcmp_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const memcmp_t& memcmp_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_memcmp_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void memcmp_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&s1_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&s1_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* memcmp_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 s1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_s1(&has_bits);
          s1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 s2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_s2(&has_bits);
          s2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_n(&has_bits);
          n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool memcmp_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcmp_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 s1 = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_s1(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 s2 = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_s2(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &s2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 n = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_n(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &n_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcmp_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcmp_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void memcmp_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->s1(), output);
  }

  // required uint64 s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->s2(), output);
  }

  // required uint64 n = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->n(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcmp_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* memcmp_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcmp_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 s1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->s1(), target);
  }

  // required uint64 s2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->s2(), target);
  }

  // required uint64 n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->n(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcmp_t)
  return target;
}

size_t memcmp_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcmp_t)
  size_t total_size = 0;

  if (has_s1()) {
    // required uint64 s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s1());
  }

  if (has_s2()) {
    // required uint64 s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s2());
  }

  if (has_n()) {
    // required uint64 n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t memcmp_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcmp_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 s1 = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s1());

    // required uint64 s2 = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->s2());

    // required uint64 n = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->n());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void memcmp_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  const memcmp_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<memcmp_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcmp_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcmp_t)
    MergeFrom(*source);
  }
}

void memcmp_t::MergeFrom(const memcmp_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcmp_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      s1_ = from.s1_;
    }
    if (cached_has_bits & 0x00000002u) {
      s2_ = from.s2_;
    }
    if (cached_has_bits & 0x00000004u) {
      n_ = from.n_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void memcmp_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcmp_t::CopyFrom(const memcmp_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcmp_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcmp_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void memcmp_t::InternalSwap(memcmp_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s1_, other->s1_);
  swap(s2_, other->s2_);
  swap(n_, other->n_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata memcmp_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void printf_t::InitAsDefaultInstance() {
  ::libcall_types::_printf_t_default_instance_._instance.get_mutable()->format_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class printf_t::_Internal {
 public:
  using HasBits = decltype(std::declval<printf_t>()._has_bits_);
  static const ::common::memory_t& format(const printf_t* msg);
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_t&
printf_t::_Internal::format(const printf_t* msg) {
  return *msg->format_;
}
void printf_t::clear_format() {
  if (format_ != nullptr) format_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
printf_t::printf_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.printf_t)
}
printf_t::printf_t(const printf_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_format()) {
    format_ = new ::common::memory_t(*from.format_);
  } else {
    format_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.printf_t)
}

void printf_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_printf_t_libcall_2eproto.base);
  ::memset(&format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&format_)) + sizeof(ret_));
}

printf_t::~printf_t() {
  // @@protoc_insertion_point(destructor:libcall_types.printf_t)
  SharedDtor();
}

void printf_t::SharedDtor() {
  if (this != internal_default_instance()) delete format_;
}

void printf_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const printf_t& printf_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_printf_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void printf_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.printf_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(format_ != nullptr);
    format_->Clear();
  }
  ret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* printf_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool printf_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.printf_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t format = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.printf_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.printf_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void printf_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.printf_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t format = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::format(this), output);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.printf_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* printf_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.printf_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t format = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::format(this), target);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.printf_t)
  return target;
}

size_t printf_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.printf_t)
  size_t total_size = 0;

  if (has_format()) {
    // required .common.memory_t format = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t printf_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.printf_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t format = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *format_);

    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void printf_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.printf_t)
  GOOGLE_DCHECK_NE(&from, this);
  const printf_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<printf_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.printf_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.printf_t)
    MergeFrom(*source);
  }
}

void printf_t::MergeFrom(const printf_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.printf_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_format()->::common::memory_t::MergeFrom(from.format());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void printf_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.printf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void printf_t::CopyFrom(const printf_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.printf_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool printf_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_format()) {
    if (!this->format_->IsInitialized()) return false;
  }
  return true;
}

void printf_t::InternalSwap(printf_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(format_, other->format_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata printf_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void atoi_t::InitAsDefaultInstance() {
  ::libcall_types::_atoi_t_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class atoi_t::_Internal {
 public:
  using HasBits = decltype(std::declval<atoi_t>()._has_bits_);
  static const ::common::memory_t& src(const atoi_t* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_t&
atoi_t::_Internal::src(const atoi_t* msg) {
  return *msg->src_;
}
void atoi_t::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
atoi_t::atoi_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.atoi_t)
}
atoi_t::atoi_t(const atoi_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_src()) {
    src_ = new ::common::memory_t(*from.src_);
  } else {
    src_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.atoi_t)
}

void atoi_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_atoi_t_libcall_2eproto.base);
  ::memset(&src_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&src_)) + sizeof(ret_));
}

atoi_t::~atoi_t() {
  // @@protoc_insertion_point(destructor:libcall_types.atoi_t)
  SharedDtor();
}

void atoi_t::SharedDtor() {
  if (this != internal_default_instance()) delete src_;
}

void atoi_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const atoi_t& atoi_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_atoi_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void atoi_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.atoi_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(src_ != nullptr);
    src_->Clear();
  }
  ret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* atoi_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool atoi_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.atoi_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t src = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.atoi_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.atoi_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void atoi_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.atoi_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t src = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::src(this), output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.atoi_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* atoi_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.atoi_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::src(this), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.atoi_t)
  return target;
}

size_t atoi_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.atoi_t)
  size_t total_size = 0;

  if (has_src()) {
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t atoi_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.atoi_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t src = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void atoi_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.atoi_t)
  GOOGLE_DCHECK_NE(&from, this);
  const atoi_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<atoi_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.atoi_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.atoi_t)
    MergeFrom(*source);
  }
}

void atoi_t::MergeFrom(const atoi_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.atoi_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_src()->::common::memory_t::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void atoi_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.atoi_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void atoi_t::CopyFrom(const atoi_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.atoi_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool atoi_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_src()) {
    if (!this->src_->IsInitialized()) return false;
  }
  return true;
}

void atoi_t::InternalSwap(atoi_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(src_, other->src_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata atoi_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void malloc_t::InitAsDefaultInstance() {
}
class malloc_t::_Internal {
 public:
  using HasBits = decltype(std::declval<malloc_t>()._has_bits_);
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

malloc_t::malloc_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.malloc_t)
}
malloc_t::malloc_t(const malloc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.malloc_t)
}

void malloc_t::SharedCtor() {
  ::memset(&size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&size_)) + sizeof(ret_));
}

malloc_t::~malloc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.malloc_t)
  SharedDtor();
}

void malloc_t::SharedDtor() {
}

void malloc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const malloc_t& malloc_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_malloc_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void malloc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.malloc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* malloc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool malloc_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.malloc_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 size = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.malloc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.malloc_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void malloc_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.malloc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 size = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->size(), output);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.malloc_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* malloc_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.malloc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 size = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->size(), target);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.malloc_t)
  return target;
}

size_t malloc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.malloc_t)
  size_t total_size = 0;

  if (has_size()) {
    // required uint64 size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t malloc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.malloc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 size = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void malloc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.malloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const malloc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<malloc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.malloc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.malloc_t)
    MergeFrom(*source);
  }
}

void malloc_t::MergeFrom(const malloc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.malloc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void malloc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.malloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void malloc_t::CopyFrom(const malloc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.malloc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool malloc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void malloc_t::InternalSwap(malloc_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata malloc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getmodulehandle_t::InitAsDefaultInstance() {
  ::libcall_types::_getmodulehandle_t_default_instance_._instance.get_mutable()->module_name_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class getmodulehandle_t::_Internal {
 public:
  using HasBits = decltype(std::declval<getmodulehandle_t>()._has_bits_);
  static const ::common::memory_t& module_name(const getmodulehandle_t* msg);
  static void set_has_module_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::common::memory_t&
getmodulehandle_t::_Internal::module_name(const getmodulehandle_t* msg) {
  return *msg->module_name_;
}
void getmodulehandle_t::clear_module_name() {
  if (module_name_ != nullptr) module_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
getmodulehandle_t::getmodulehandle_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmodulehandle_t)
}
getmodulehandle_t::getmodulehandle_t(const getmodulehandle_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_module_name()) {
    module_name_ = new ::common::memory_t(*from.module_name_);
  } else {
    module_name_ = nullptr;
  }
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmodulehandle_t)
}

void getmodulehandle_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getmodulehandle_t_libcall_2eproto.base);
  ::memset(&module_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&module_name_)) + sizeof(ret_));
}

getmodulehandle_t::~getmodulehandle_t() {
  // @@protoc_insertion_point(destructor:libcall_types.getmodulehandle_t)
  SharedDtor();
}

void getmodulehandle_t::SharedDtor() {
  if (this != internal_default_instance()) delete module_name_;
}

void getmodulehandle_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getmodulehandle_t& getmodulehandle_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getmodulehandle_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void getmodulehandle_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmodulehandle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(module_name_ != nullptr);
    module_name_->Clear();
  }
  ret_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* getmodulehandle_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t module_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_module_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool getmodulehandle_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmodulehandle_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t module_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_module_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmodulehandle_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmodulehandle_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void getmodulehandle_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmodulehandle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t module_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::module_name(this), output);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmodulehandle_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* getmodulehandle_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmodulehandle_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t module_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::module_name(this), target);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmodulehandle_t)
  return target;
}

size_t getmodulehandle_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmodulehandle_t)
  size_t total_size = 0;

  if (has_module_name()) {
    // required .common.memory_t module_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *module_name_);
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t getmodulehandle_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmodulehandle_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .common.memory_t module_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *module_name_);

    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getmodulehandle_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmodulehandle_t)
  GOOGLE_DCHECK_NE(&from, this);
  const getmodulehandle_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getmodulehandle_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmodulehandle_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmodulehandle_t)
    MergeFrom(*source);
  }
}

void getmodulehandle_t::MergeFrom(const getmodulehandle_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmodulehandle_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_module_name()->::common::memory_t::MergeFrom(from.module_name());
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void getmodulehandle_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmodulehandle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmodulehandle_t::CopyFrom(const getmodulehandle_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmodulehandle_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmodulehandle_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_module_name()) {
    if (!this->module_name_->IsInitialized()) return false;
  }
  return true;
}

void getmodulehandle_t::InternalSwap(getmodulehandle_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(module_name_, other->module_name_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getmodulehandle_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getprocaddress_t::InitAsDefaultInstance() {
  ::libcall_types::_getprocaddress_t_default_instance_._instance.get_mutable()->proc_name_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class getprocaddress_t::_Internal {
 public:
  using HasBits = decltype(std::declval<getprocaddress_t>()._has_bits_);
  static void set_has_hmodule(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_t& proc_name(const getprocaddress_t* msg);
  static void set_has_proc_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_t&
getprocaddress_t::_Internal::proc_name(const getprocaddress_t* msg) {
  return *msg->proc_name_;
}
void getprocaddress_t::clear_proc_name() {
  if (proc_name_ != nullptr) proc_name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
getprocaddress_t::getprocaddress_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getprocaddress_t)
}
getprocaddress_t::getprocaddress_t(const getprocaddress_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_proc_name()) {
    proc_name_ = new ::common::memory_t(*from.proc_name_);
  } else {
    proc_name_ = nullptr;
  }
  ::memcpy(&hmodule_, &from.hmodule_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&hmodule_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getprocaddress_t)
}

void getprocaddress_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getprocaddress_t_libcall_2eproto.base);
  ::memset(&proc_name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&proc_name_)) + sizeof(ret_));
}

getprocaddress_t::~getprocaddress_t() {
  // @@protoc_insertion_point(destructor:libcall_types.getprocaddress_t)
  SharedDtor();
}

void getprocaddress_t::SharedDtor() {
  if (this != internal_default_instance()) delete proc_name_;
}

void getprocaddress_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getprocaddress_t& getprocaddress_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getprocaddress_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void getprocaddress_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getprocaddress_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(proc_name_ != nullptr);
    proc_name_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&hmodule_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&hmodule_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* getprocaddress_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 hmodule = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hmodule(&has_bits);
          hmodule_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t proc_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_proc_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool getprocaddress_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getprocaddress_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 hmodule = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_hmodule(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hmodule_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t proc_name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_proc_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getprocaddress_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getprocaddress_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void getprocaddress_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getprocaddress_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hmodule = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->hmodule(), output);
  }

  // required .common.memory_t proc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::proc_name(this), output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getprocaddress_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* getprocaddress_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getprocaddress_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 hmodule = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->hmodule(), target);
  }

  // required .common.memory_t proc_name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::proc_name(this), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getprocaddress_t)
  return target;
}

size_t getprocaddress_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getprocaddress_t)
  size_t total_size = 0;

  if (has_proc_name()) {
    // required .common.memory_t proc_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proc_name_);
  }

  if (has_hmodule()) {
    // required uint64 hmodule = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->hmodule());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t getprocaddress_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getprocaddress_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t proc_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *proc_name_);

    // required uint64 hmodule = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->hmodule());

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getprocaddress_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getprocaddress_t)
  GOOGLE_DCHECK_NE(&from, this);
  const getprocaddress_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getprocaddress_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getprocaddress_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getprocaddress_t)
    MergeFrom(*source);
  }
}

void getprocaddress_t::MergeFrom(const getprocaddress_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getprocaddress_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_proc_name()->::common::memory_t::MergeFrom(from.proc_name());
    }
    if (cached_has_bits & 0x00000002u) {
      hmodule_ = from.hmodule_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void getprocaddress_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getprocaddress_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getprocaddress_t::CopyFrom(const getprocaddress_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getprocaddress_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getprocaddress_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_proc_name()) {
    if (!this->proc_name_->IsInitialized()) return false;
  }
  return true;
}

void getprocaddress_t::InternalSwap(getprocaddress_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(proc_name_, other->proc_name_);
  swap(hmodule_, other->hmodule_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getprocaddress_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void getmainargs_t::InitAsDefaultInstance() {
  ::libcall_types::_getmainargs_t_default_instance_._instance.get_mutable()->argc_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_getmainargs_t_default_instance_._instance.get_mutable()->argv_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_getmainargs_t_default_instance_._instance.get_mutable()->env_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_getmainargs_t_default_instance_._instance.get_mutable()->startinfo_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class getmainargs_t::_Internal {
 public:
  using HasBits = decltype(std::declval<getmainargs_t>()._has_bits_);
  static const ::common::memory_t& argc(const getmainargs_t* msg);
  static void set_has_argc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_t& argv(const getmainargs_t* msg);
  static void set_has_argv(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::common::memory_t& env(const getmainargs_t* msg);
  static void set_has_env(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dowildcard(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::common::memory_t& startinfo(const getmainargs_t* msg);
  static void set_has_startinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::common::memory_t&
getmainargs_t::_Internal::argc(const getmainargs_t* msg) {
  return *msg->argc_;
}
const ::common::memory_t&
getmainargs_t::_Internal::argv(const getmainargs_t* msg) {
  return *msg->argv_;
}
const ::common::memory_t&
getmainargs_t::_Internal::env(const getmainargs_t* msg) {
  return *msg->env_;
}
const ::common::memory_t&
getmainargs_t::_Internal::startinfo(const getmainargs_t* msg) {
  return *msg->startinfo_;
}
void getmainargs_t::clear_argc() {
  if (argc_ != nullptr) argc_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void getmainargs_t::clear_argv() {
  if (argv_ != nullptr) argv_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void getmainargs_t::clear_env() {
  if (env_ != nullptr) env_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void getmainargs_t::clear_startinfo() {
  if (startinfo_ != nullptr) startinfo_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
getmainargs_t::getmainargs_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.getmainargs_t)
}
getmainargs_t::getmainargs_t(const getmainargs_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_argc()) {
    argc_ = new ::common::memory_t(*from.argc_);
  } else {
    argc_ = nullptr;
  }
  if (from.has_argv()) {
    argv_ = new ::common::memory_t(*from.argv_);
  } else {
    argv_ = nullptr;
  }
  if (from.has_env()) {
    env_ = new ::common::memory_t(*from.env_);
  } else {
    env_ = nullptr;
  }
  if (from.has_startinfo()) {
    startinfo_ = new ::common::memory_t(*from.startinfo_);
  } else {
    startinfo_ = nullptr;
  }
  ::memcpy(&dowildcard_, &from.dowildcard_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&dowildcard_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.getmainargs_t)
}

void getmainargs_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_getmainargs_t_libcall_2eproto.base);
  ::memset(&argc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&argc_)) + sizeof(ret_));
}

getmainargs_t::~getmainargs_t() {
  // @@protoc_insertion_point(destructor:libcall_types.getmainargs_t)
  SharedDtor();
}

void getmainargs_t::SharedDtor() {
  if (this != internal_default_instance()) delete argc_;
  if (this != internal_default_instance()) delete argv_;
  if (this != internal_default_instance()) delete env_;
  if (this != internal_default_instance()) delete startinfo_;
}

void getmainargs_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const getmainargs_t& getmainargs_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_getmainargs_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void getmainargs_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.getmainargs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(argc_ != nullptr);
      argc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(argv_ != nullptr);
      argv_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(env_ != nullptr);
      env_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(startinfo_ != nullptr);
      startinfo_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&dowildcard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&dowildcard_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* getmainargs_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t argc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_argc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t argv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_argv(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t env = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_env(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 dowildcard = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dowildcard(&has_bits);
          dowildcard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t startinfo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_startinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool getmainargs_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.getmainargs_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t argc = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_argc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t argv = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_argv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t env = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_env()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 dowildcard = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_dowildcard(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dowildcard_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t startinfo = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_startinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.getmainargs_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.getmainargs_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void getmainargs_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.getmainargs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t argc = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::argc(this), output);
  }

  // required .common.memory_t argv = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::argv(this), output);
  }

  // required .common.memory_t env = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::env(this), output);
  }

  // required uint64 dowildcard = 4;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->dowildcard(), output);
  }

  // required .common.memory_t startinfo = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::startinfo(this), output);
  }

  // required uint64 ret = 6;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.getmainargs_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* getmainargs_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.getmainargs_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t argc = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::argc(this), target);
  }

  // required .common.memory_t argv = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::argv(this), target);
  }

  // required .common.memory_t env = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::env(this), target);
  }

  // required uint64 dowildcard = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->dowildcard(), target);
  }

  // required .common.memory_t startinfo = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::startinfo(this), target);
  }

  // required uint64 ret = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.getmainargs_t)
  return target;
}

size_t getmainargs_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.getmainargs_t)
  size_t total_size = 0;

  if (has_argc()) {
    // required .common.memory_t argc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argc_);
  }

  if (has_argv()) {
    // required .common.memory_t argv = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argv_);
  }

  if (has_env()) {
    // required .common.memory_t env = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);
  }

  if (has_startinfo()) {
    // required .common.memory_t startinfo = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startinfo_);
  }

  if (has_dowildcard()) {
    // required uint64 dowildcard = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->dowildcard());
  }

  if (has_ret()) {
    // required uint64 ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t getmainargs_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.getmainargs_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required .common.memory_t argc = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argc_);

    // required .common.memory_t argv = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *argv_);

    // required .common.memory_t env = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *env_);

    // required .common.memory_t startinfo = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startinfo_);

    // required uint64 dowildcard = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->dowildcard());

    // required uint64 ret = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void getmainargs_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.getmainargs_t)
  GOOGLE_DCHECK_NE(&from, this);
  const getmainargs_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<getmainargs_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.getmainargs_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.getmainargs_t)
    MergeFrom(*source);
  }
}

void getmainargs_t::MergeFrom(const getmainargs_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.getmainargs_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_argc()->::common::memory_t::MergeFrom(from.argc());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_argv()->::common::memory_t::MergeFrom(from.argv());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_env()->::common::memory_t::MergeFrom(from.env());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_startinfo()->::common::memory_t::MergeFrom(from.startinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      dowildcard_ = from.dowildcard_;
    }
    if (cached_has_bits & 0x00000020u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void getmainargs_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.getmainargs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void getmainargs_t::CopyFrom(const getmainargs_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.getmainargs_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool getmainargs_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  if (has_argc()) {
    if (!this->argc_->IsInitialized()) return false;
  }
  if (has_argv()) {
    if (!this->argv_->IsInitialized()) return false;
  }
  if (has_env()) {
    if (!this->env_->IsInitialized()) return false;
  }
  if (has_startinfo()) {
    if (!this->startinfo_->IsInitialized()) return false;
  }
  return true;
}

void getmainargs_t::InternalSwap(getmainargs_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(argc_, other->argc_);
  swap(argv_, other->argv_);
  swap(env_, other->env_);
  swap(startinfo_, other->startinfo_);
  swap(dowildcard_, other->dowildcard_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata getmainargs_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void gethostname_t::InitAsDefaultInstance() {
  ::libcall_types::_gethostname_t_default_instance_._instance.get_mutable()->name_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class gethostname_t::_Internal {
 public:
  using HasBits = decltype(std::declval<gethostname_t>()._has_bits_);
  static const ::common::memory_t& name(const gethostname_t* msg);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_namelen(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::common::memory_t&
gethostname_t::_Internal::name(const gethostname_t* msg) {
  return *msg->name_;
}
void gethostname_t::clear_name() {
  if (name_ != nullptr) name_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
gethostname_t::gethostname_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.gethostname_t)
}
gethostname_t::gethostname_t(const gethostname_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_name()) {
    name_ = new ::common::memory_t(*from.name_);
  } else {
    name_ = nullptr;
  }
  ::memcpy(&namelen_, &from.namelen_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&namelen_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.gethostname_t)
}

void gethostname_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_gethostname_t_libcall_2eproto.base);
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&name_)) + sizeof(ret_));
}

gethostname_t::~gethostname_t() {
  // @@protoc_insertion_point(destructor:libcall_types.gethostname_t)
  SharedDtor();
}

void gethostname_t::SharedDtor() {
  if (this != internal_default_instance()) delete name_;
}

void gethostname_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const gethostname_t& gethostname_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_gethostname_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void gethostname_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.gethostname_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(name_ != nullptr);
    name_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&namelen_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&namelen_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* gethostname_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 namelen = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_namelen(&has_bits);
          namelen_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool gethostname_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.gethostname_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 namelen = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_namelen(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &namelen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.gethostname_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.gethostname_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void gethostname_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.gethostname_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::name(this), output);
  }

  // required uint64 namelen = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->namelen(), output);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.gethostname_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* gethostname_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.gethostname_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::name(this), target);
  }

  // required uint64 namelen = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->namelen(), target);
  }

  // required uint64 ret = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.gethostname_t)
  return target;
}

size_t gethostname_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.gethostname_t)
  size_t total_size = 0;

  if (has_name()) {
    // required .common.memory_t name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);
  }

  if (has_namelen()) {
    // required uint64 namelen = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->namelen());
  }

  if (has_ret()) {
    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t gethostname_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.gethostname_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .common.memory_t name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *name_);

    // required uint64 namelen = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->namelen());

    // required uint64 ret = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void gethostname_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.gethostname_t)
  GOOGLE_DCHECK_NE(&from, this);
  const gethostname_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<gethostname_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.gethostname_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.gethostname_t)
    MergeFrom(*source);
  }
}

void gethostname_t::MergeFrom(const gethostname_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.gethostname_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_name()->::common::memory_t::MergeFrom(from.name());
    }
    if (cached_has_bits & 0x00000002u) {
      namelen_ = from.namelen_;
    }
    if (cached_has_bits & 0x00000004u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void gethostname_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.gethostname_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void gethostname_t::CopyFrom(const gethostname_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.gethostname_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool gethostname_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_name()) {
    if (!this->name_->IsInitialized()) return false;
  }
  return true;
}

void gethostname_t::InternalSwap(gethostname_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(name_, other->name_);
  swap(namelen_, other->namelen_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata gethostname_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void free_t::InitAsDefaultInstance() {
}
class free_t::_Internal {
 public:
  using HasBits = decltype(std::declval<free_t>()._has_bits_);
  static void set_has_ptr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

free_t::free_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.free_t)
}
free_t::free_t(const free_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ptr_ = from.ptr_;
  // @@protoc_insertion_point(copy_constructor:libcall_types.free_t)
}

void free_t::SharedCtor() {
  ptr_ = PROTOBUF_ULONGLONG(0);
}

free_t::~free_t() {
  // @@protoc_insertion_point(destructor:libcall_types.free_t)
  SharedDtor();
}

void free_t::SharedDtor() {
}

void free_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const free_t& free_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_free_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void free_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.free_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ptr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* free_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 ptr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ptr(&has_bits);
          ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool free_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.free_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ptr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ptr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ptr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.free_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.free_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void free_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.free_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ptr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.free_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* free_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.free_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ptr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->ptr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.free_t)
  return target;
}

size_t free_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.free_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 ptr = 1;
  if (has_ptr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ptr());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void free_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.free_t)
  GOOGLE_DCHECK_NE(&from, this);
  const free_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<free_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.free_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.free_t)
    MergeFrom(*source);
  }
}

void free_t::MergeFrom(const free_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.free_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ptr()) {
    set_ptr(from.ptr());
  }
}

void free_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.free_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void free_t::CopyFrom(const free_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.free_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool free_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void free_t::InternalSwap(free_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ptr_, other->ptr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata free_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void memcpy_t::InitAsDefaultInstance() {
  ::libcall_types::_memcpy_t_default_instance_._instance.get_mutable()->dest_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::libcall_types::_memcpy_t_default_instance_._instance.get_mutable()->src_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class memcpy_t::_Internal {
 public:
  using HasBits = decltype(std::declval<memcpy_t>()._has_bits_);
  static const ::common::memory_t& dest(const memcpy_t* msg);
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::common::memory_t& src(const memcpy_t* msg);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_t&
memcpy_t::_Internal::dest(const memcpy_t* msg) {
  return *msg->dest_;
}
const ::common::memory_t&
memcpy_t::_Internal::src(const memcpy_t* msg) {
  return *msg->src_;
}
void memcpy_t::clear_dest() {
  if (dest_ != nullptr) dest_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void memcpy_t::clear_src() {
  if (src_ != nullptr) src_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
memcpy_t::memcpy_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memcpy_t)
}
memcpy_t::memcpy_t(const memcpy_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dest()) {
    dest_ = new ::common::memory_t(*from.dest_);
  } else {
    dest_ = nullptr;
  }
  if (from.has_src()) {
    src_ = new ::common::memory_t(*from.src_);
  } else {
    src_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memcpy_t)
}

void memcpy_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_memcpy_t_libcall_2eproto.base);
  ::memset(&dest_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&dest_)) + sizeof(ret_));
}

memcpy_t::~memcpy_t() {
  // @@protoc_insertion_point(destructor:libcall_types.memcpy_t)
  SharedDtor();
}

void memcpy_t::SharedDtor() {
  if (this != internal_default_instance()) delete dest_;
  if (this != internal_default_instance()) delete src_;
}

void memcpy_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const memcpy_t& memcpy_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_memcpy_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void memcpy_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memcpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(dest_ != nullptr);
      dest_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(src_ != nullptr);
      src_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&size_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* memcpy_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t dest = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_dest(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.memory_t src = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_src(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool memcpy_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memcpy_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t dest = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dest()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.memory_t src = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memcpy_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memcpy_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void memcpy_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memcpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t dest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::dest(this), output);
  }

  // required .common.memory_t src = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::src(this), output);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memcpy_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* memcpy_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memcpy_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::dest(this), target);
  }

  // required .common.memory_t src = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::src(this), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memcpy_t)
  return target;
}

size_t memcpy_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memcpy_t)
  size_t total_size = 0;

  if (has_dest()) {
    // required .common.memory_t dest = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);
  }

  if (has_src()) {
    // required .common.memory_t src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t memcpy_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memcpy_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t dest = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dest_);

    // required .common.memory_t src = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *src_);

    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void memcpy_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  const memcpy_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<memcpy_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memcpy_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memcpy_t)
    MergeFrom(*source);
  }
}

void memcpy_t::MergeFrom(const memcpy_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memcpy_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_dest()->::common::memory_t::MergeFrom(from.dest());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_src()->::common::memory_t::MergeFrom(from.src());
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void memcpy_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memcpy_t::CopyFrom(const memcpy_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memcpy_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memcpy_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_dest()) {
    if (!this->dest_->IsInitialized()) return false;
  }
  if (has_src()) {
    if (!this->src_->IsInitialized()) return false;
  }
  return true;
}

void memcpy_t::InternalSwap(memcpy_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(dest_, other->dest_);
  swap(src_, other->src_);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata memcpy_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void memset_t::InitAsDefaultInstance() {
  ::libcall_types::_memset_t_default_instance_._instance.get_mutable()->s_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
}
class memset_t::_Internal {
 public:
  using HasBits = decltype(std::declval<memset_t>()._has_bits_);
  static const ::common::memory_t& s(const memset_t* msg);
  static void set_has_s(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::common::memory_t&
memset_t::_Internal::s(const memset_t* msg) {
  return *msg->s_;
}
void memset_t::clear_s() {
  if (s_ != nullptr) s_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
memset_t::memset_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.memset_t)
}
memset_t::memset_t(const memset_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_s()) {
    s_ = new ::common::memory_t(*from.s_);
  } else {
    s_ = nullptr;
  }
  ::memcpy(&c_, &from.c_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&c_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.memset_t)
}

void memset_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_memset_t_libcall_2eproto.base);
  ::memset(&s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&s_)) + sizeof(ret_));
}

memset_t::~memset_t() {
  // @@protoc_insertion_point(destructor:libcall_types.memset_t)
  SharedDtor();
}

void memset_t::SharedDtor() {
  if (this != internal_default_instance()) delete s_;
}

void memset_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const memset_t& memset_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_memset_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void memset_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.memset_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(s_ != nullptr);
    s_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&c_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&c_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* memset_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.memory_t s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 c = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool memset_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.memset_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.memory_t s = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 c = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_c(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.memset_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.memset_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void memset_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.memset_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t s = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::s(this), output);
  }

  // required uint64 c = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->c(), output);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->size(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.memset_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* memset_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.memset_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.memory_t s = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::s(this), target);
  }

  // required uint64 c = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->c(), target);
  }

  // required uint64 size = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->size(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.memset_t)
  return target;
}

size_t memset_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.memset_t)
  size_t total_size = 0;

  if (has_s()) {
    // required .common.memory_t s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);
  }

  if (has_c()) {
    // required uint64 c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->c());
  }

  if (has_size()) {
    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t memset_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.memset_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .common.memory_t s = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *s_);

    // required uint64 c = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->c());

    // required uint64 size = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->size());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void memset_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.memset_t)
  GOOGLE_DCHECK_NE(&from, this);
  const memset_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<memset_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.memset_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.memset_t)
    MergeFrom(*source);
  }
}

void memset_t::MergeFrom(const memset_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.memset_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_s()->::common::memory_t::MergeFrom(from.s());
    }
    if (cached_has_bits & 0x00000002u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void memset_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.memset_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void memset_t::CopyFrom(const memset_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.memset_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool memset_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_s()) {
    if (!this->s_->IsInitialized()) return false;
  }
  return true;
}

void memset_t::InternalSwap(memset_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(s_, other->s_);
  swap(c_, other->c_);
  swap(size_, other->size_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata memset_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fgetc_t::InitAsDefaultInstance() {
}
class fgetc_t::_Internal {
 public:
  using HasBits = decltype(std::declval<fgetc_t>()._has_bits_);
  static void set_has_stream(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

fgetc_t::fgetc_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.fgetc_t)
}
fgetc_t::fgetc_t(const fgetc_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&stream_, &from.stream_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.fgetc_t)
}

void fgetc_t::SharedCtor() {
  ::memset(&stream_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
}

fgetc_t::~fgetc_t() {
  // @@protoc_insertion_point(destructor:libcall_types.fgetc_t)
  SharedDtor();
}

void fgetc_t::SharedDtor() {
}

void fgetc_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fgetc_t& fgetc_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fgetc_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void fgetc_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.fgetc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&stream_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&stream_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* fgetc_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 stream = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_stream(&has_bits);
          stream_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool fgetc_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.fgetc_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stream = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_stream(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stream_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.fgetc_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.fgetc_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void fgetc_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.fgetc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 stream = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->stream(), output);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.fgetc_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* fgetc_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.fgetc_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 stream = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->stream(), target);
  }

  // required uint64 ret = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.fgetc_t)
  return target;
}

size_t fgetc_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.fgetc_t)
  size_t total_size = 0;

  if (has_stream()) {
    // required uint64 stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stream());
  }

  if (has_ret()) {
    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t fgetc_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.fgetc_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 stream = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stream());

    // required uint64 ret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fgetc_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.fgetc_t)
  GOOGLE_DCHECK_NE(&from, this);
  const fgetc_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fgetc_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.fgetc_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.fgetc_t)
    MergeFrom(*source);
  }
}

void fgetc_t::MergeFrom(const fgetc_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.fgetc_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      stream_ = from.stream_;
    }
    if (cached_has_bits & 0x00000002u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fgetc_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.fgetc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fgetc_t::CopyFrom(const fgetc_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.fgetc_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fgetc_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void fgetc_t::InternalSwap(fgetc_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(stream_, other->stream_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata fgetc_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void lseek_t::InitAsDefaultInstance() {
}
class lseek_t::_Internal {
 public:
  using HasBits = decltype(std::declval<lseek_t>()._has_bits_);
  static void set_has_fd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_offset(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_whence(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

lseek_t::lseek_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:libcall_types.lseek_t)
}
lseek_t::lseek_t(const lseek_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fd_, &from.fd_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:libcall_types.lseek_t)
}

void lseek_t::SharedCtor() {
  ::memset(&fd_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
}

lseek_t::~lseek_t() {
  // @@protoc_insertion_point(destructor:libcall_types.lseek_t)
  SharedDtor();
}

void lseek_t::SharedDtor() {
}

void lseek_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lseek_t& lseek_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lseek_t_libcall_2eproto.base);
  return *internal_default_instance();
}


void lseek_t::Clear() {
// @@protoc_insertion_point(message_clear_start:libcall_types.lseek_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&fd_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ret_) -
        reinterpret_cast<char*>(&fd_)) + sizeof(ret_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* lseek_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 fd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_fd(&has_bits);
          fd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_offset(&has_bits);
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 whence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_whence(&has_bits);
          whence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool lseek_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:libcall_types.lseek_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 fd = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_fd(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 offset = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_offset(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 whence = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_whence(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &whence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 ret = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ret(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:libcall_types.lseek_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:libcall_types.lseek_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void lseek_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:libcall_types.lseek_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 fd = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->fd(), output);
  }

  // required uint64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->offset(), output);
  }

  // required uint64 whence = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->whence(), output);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->ret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:libcall_types.lseek_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* lseek_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:libcall_types.lseek_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 fd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->fd(), target);
  }

  // required uint64 offset = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->offset(), target);
  }

  // required uint64 whence = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->whence(), target);
  }

  // required uint64 ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->ret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:libcall_types.lseek_t)
  return target;
}

size_t lseek_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:libcall_types.lseek_t)
  size_t total_size = 0;

  if (has_fd()) {
    // required uint64 fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());
  }

  if (has_offset()) {
    // required uint64 offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->offset());
  }

  if (has_whence()) {
    // required uint64 whence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->whence());
  }

  if (has_ret()) {
    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());
  }

  return total_size;
}
size_t lseek_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:libcall_types.lseek_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 fd = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->fd());

    // required uint64 offset = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->offset());

    // required uint64 whence = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->whence());

    // required uint64 ret = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lseek_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:libcall_types.lseek_t)
  GOOGLE_DCHECK_NE(&from, this);
  const lseek_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lseek_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:libcall_types.lseek_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:libcall_types.lseek_t)
    MergeFrom(*source);
  }
}

void lseek_t::MergeFrom(const lseek_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:libcall_types.lseek_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      fd_ = from.fd_;
    }
    if (cached_has_bits & 0x00000002u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000004u) {
      whence_ = from.whence_;
    }
    if (cached_has_bits & 0x00000008u) {
      ret_ = from.ret_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void lseek_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:libcall_types.lseek_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lseek_t::CopyFrom(const lseek_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:libcall_types.lseek_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lseek_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void lseek_t::InternalSwap(lseek_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fd_, other->fd_);
  swap(offset_, other->offset_);
  swap(whence_, other->whence_);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata lseek_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace libcall_types
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::libcall_types::libcall_pol* Arena::CreateMaybeMessage< ::libcall_types::libcall_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::libcall_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::libcall_t* Arena::CreateMaybeMessage< ::libcall_types::libcall_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::libcall_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::generic_pol* Arena::CreateMaybeMessage< ::libcall_types::generic_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::generic_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::ctype_b_loc_pol* Arena::CreateMaybeMessage< ::libcall_types::ctype_b_loc_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::ctype_b_loc_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::exit_pol* Arena::CreateMaybeMessage< ::libcall_types::exit_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::exit_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fscanf_pol* Arena::CreateMaybeMessage< ::libcall_types::fscanf_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fscanf_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::read_pol* Arena::CreateMaybeMessage< ::libcall_types::read_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::read_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fread_pol* Arena::CreateMaybeMessage< ::libcall_types::fread_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fread_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strcmp_pol* Arena::CreateMaybeMessage< ::libcall_types::strcmp_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strcmp_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strncmp_pol* Arena::CreateMaybeMessage< ::libcall_types::strncmp_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strncmp_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::memcmp_pol* Arena::CreateMaybeMessage< ::libcall_types::memcmp_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::memcmp_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strchr_pol* Arena::CreateMaybeMessage< ::libcall_types::strchr_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strchr_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strncpy_pol* Arena::CreateMaybeMessage< ::libcall_types::strncpy_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strncpy_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fstat_pol* Arena::CreateMaybeMessage< ::libcall_types::fstat_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fstat_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fxstat64_pol* Arena::CreateMaybeMessage< ::libcall_types::fxstat64_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fxstat64_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::realloc_pol* Arena::CreateMaybeMessage< ::libcall_types::realloc_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::realloc_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::mmap_pol* Arena::CreateMaybeMessage< ::libcall_types::mmap_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::mmap_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::qsort_pol* Arena::CreateMaybeMessage< ::libcall_types::qsort_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::qsort_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::bsearch_pol* Arena::CreateMaybeMessage< ::libcall_types::bsearch_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::bsearch_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::open_pol* Arena::CreateMaybeMessage< ::libcall_types::open_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::open_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strcpy_pol* Arena::CreateMaybeMessage< ::libcall_types::strcpy_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strcpy_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::printf_pol* Arena::CreateMaybeMessage< ::libcall_types::printf_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::printf_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::atoi_pol* Arena::CreateMaybeMessage< ::libcall_types::atoi_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::atoi_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::malloc_pol* Arena::CreateMaybeMessage< ::libcall_types::malloc_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::malloc_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::getmodulehandle_pol* Arena::CreateMaybeMessage< ::libcall_types::getmodulehandle_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::getmodulehandle_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::getprocaddress_pol* Arena::CreateMaybeMessage< ::libcall_types::getprocaddress_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::getprocaddress_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::getmainargs_pol* Arena::CreateMaybeMessage< ::libcall_types::getmainargs_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::getmainargs_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::gethostname_pol* Arena::CreateMaybeMessage< ::libcall_types::gethostname_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::gethostname_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::free_pol* Arena::CreateMaybeMessage< ::libcall_types::free_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::free_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::memcpy_pol* Arena::CreateMaybeMessage< ::libcall_types::memcpy_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::memcpy_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::memset_pol* Arena::CreateMaybeMessage< ::libcall_types::memset_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::memset_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fgetc_pol* Arena::CreateMaybeMessage< ::libcall_types::fgetc_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fgetc_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::lseek_pol* Arena::CreateMaybeMessage< ::libcall_types::lseek_pol >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::lseek_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::exit_t* Arena::CreateMaybeMessage< ::libcall_types::exit_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::exit_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::generic_t* Arena::CreateMaybeMessage< ::libcall_types::generic_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::generic_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fscanf_elem_t* Arena::CreateMaybeMessage< ::libcall_types::fscanf_elem_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fscanf_elem_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fscanf_t* Arena::CreateMaybeMessage< ::libcall_types::fscanf_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fscanf_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::ctype_b_loc_t* Arena::CreateMaybeMessage< ::libcall_types::ctype_b_loc_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::ctype_b_loc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::read_t* Arena::CreateMaybeMessage< ::libcall_types::read_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::read_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fread_t* Arena::CreateMaybeMessage< ::libcall_types::fread_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fread_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strchr_t* Arena::CreateMaybeMessage< ::libcall_types::strchr_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strchr_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strncpy_t* Arena::CreateMaybeMessage< ::libcall_types::strncpy_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strncpy_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fstat_t* Arena::CreateMaybeMessage< ::libcall_types::fstat_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fstat_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fxstat64_t* Arena::CreateMaybeMessage< ::libcall_types::fxstat64_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fxstat64_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::realloc_t* Arena::CreateMaybeMessage< ::libcall_types::realloc_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::realloc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::mmap_t* Arena::CreateMaybeMessage< ::libcall_types::mmap_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::mmap_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::qsort_t* Arena::CreateMaybeMessage< ::libcall_types::qsort_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::qsort_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::bsearch_t* Arena::CreateMaybeMessage< ::libcall_types::bsearch_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::bsearch_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::open_t* Arena::CreateMaybeMessage< ::libcall_types::open_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::open_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strcpy_t* Arena::CreateMaybeMessage< ::libcall_types::strcpy_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strcpy_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strcmp_t* Arena::CreateMaybeMessage< ::libcall_types::strcmp_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strcmp_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::strncmp_t* Arena::CreateMaybeMessage< ::libcall_types::strncmp_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::strncmp_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::memcmp_t* Arena::CreateMaybeMessage< ::libcall_types::memcmp_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::memcmp_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::printf_t* Arena::CreateMaybeMessage< ::libcall_types::printf_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::printf_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::atoi_t* Arena::CreateMaybeMessage< ::libcall_types::atoi_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::atoi_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::malloc_t* Arena::CreateMaybeMessage< ::libcall_types::malloc_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::malloc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::getmodulehandle_t* Arena::CreateMaybeMessage< ::libcall_types::getmodulehandle_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::getmodulehandle_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::getprocaddress_t* Arena::CreateMaybeMessage< ::libcall_types::getprocaddress_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::getprocaddress_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::getmainargs_t* Arena::CreateMaybeMessage< ::libcall_types::getmainargs_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::getmainargs_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::gethostname_t* Arena::CreateMaybeMessage< ::libcall_types::gethostname_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::gethostname_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::free_t* Arena::CreateMaybeMessage< ::libcall_types::free_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::free_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::memcpy_t* Arena::CreateMaybeMessage< ::libcall_types::memcpy_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::memcpy_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::memset_t* Arena::CreateMaybeMessage< ::libcall_types::memset_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::memset_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::fgetc_t* Arena::CreateMaybeMessage< ::libcall_types::fgetc_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::fgetc_t >(arena);
}
template<> PROTOBUF_NOINLINE ::libcall_types::lseek_t* Arena::CreateMaybeMessage< ::libcall_types::lseek_t >(Arena* arena) {
  return Arena::CreateInternal< ::libcall_types::lseek_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
