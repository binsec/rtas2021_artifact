// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "libcall.pb.h"
#include "syscall.pb.h"
#include "instruction.pb.h"
#include "analysis_config.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto;
namespace configuration {
class call_name_t;
class call_name_tDefaultTypeInternal;
extern call_name_tDefaultTypeInternal _call_name_t_default_instance_;
class configuration;
class configurationDefaultTypeInternal;
extern configurationDefaultTypeInternal _configuration_default_instance_;
class input_t;
class input_tDefaultTypeInternal;
extern input_tDefaultTypeInternal _input_t_default_instance_;
}  // namespace configuration
PROTOBUF_NAMESPACE_OPEN
template<> ::configuration::call_name_t* Arena::CreateMaybeMessage<::configuration::call_name_t>(Arena*);
template<> ::configuration::configuration* Arena::CreateMaybeMessage<::configuration::configuration>(Arena*);
template<> ::configuration::input_t* Arena::CreateMaybeMessage<::configuration::input_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace configuration {

enum input_t_input_kind : int {
  input_t_input_kind_REG = 0,
  input_t_input_kind_MEM = 1,
  input_t_input_kind_INDIRECT = 2
};
bool input_t_input_kind_IsValid(int value);
constexpr input_t_input_kind input_t_input_kind_input_kind_MIN = input_t_input_kind_REG;
constexpr input_t_input_kind input_t_input_kind_input_kind_MAX = input_t_input_kind_INDIRECT;
constexpr int input_t_input_kind_input_kind_ARRAYSIZE = input_t_input_kind_input_kind_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* input_t_input_kind_descriptor();
template<typename T>
inline const std::string& input_t_input_kind_Name(T enum_t_value) {
  static_assert(::std::is_same<T, input_t_input_kind>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function input_t_input_kind_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    input_t_input_kind_descriptor(), enum_t_value);
}
inline bool input_t_input_kind_Parse(
    const std::string& name, input_t_input_kind* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<input_t_input_kind>(
    input_t_input_kind_descriptor(), name, value);
}
enum input_t_when_t : int {
  input_t_when_t_BEFORE = 0,
  input_t_when_t_AFTER = 1
};
bool input_t_when_t_IsValid(int value);
constexpr input_t_when_t input_t_when_t_when_t_MIN = input_t_when_t_BEFORE;
constexpr input_t_when_t input_t_when_t_when_t_MAX = input_t_when_t_AFTER;
constexpr int input_t_when_t_when_t_ARRAYSIZE = input_t_when_t_when_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* input_t_when_t_descriptor();
template<typename T>
inline const std::string& input_t_when_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, input_t_when_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function input_t_when_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    input_t_when_t_descriptor(), enum_t_value);
}
inline bool input_t_when_t_Parse(
    const std::string& name, input_t_when_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<input_t_when_t>(
    input_t_when_t_descriptor(), name, value);
}
// ===================================================================

class call_name_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:configuration.call_name_t) */ {
 public:
  call_name_t();
  virtual ~call_name_t();

  call_name_t(const call_name_t& from);
  call_name_t(call_name_t&& from) noexcept
    : call_name_t() {
    *this = ::std::move(from);
  }

  inline call_name_t& operator=(const call_name_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline call_name_t& operator=(call_name_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const call_name_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const call_name_t* internal_default_instance() {
    return reinterpret_cast<const call_name_t*>(
               &_call_name_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(call_name_t& a, call_name_t& b) {
    a.Swap(&b);
  }
  inline void Swap(call_name_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline call_name_t* New() const final {
    return CreateMaybeMessage<call_name_t>(nullptr);
  }

  call_name_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<call_name_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const call_name_t& from);
  void MergeFrom(const call_name_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(call_name_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "configuration.call_name_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAddressFieldNumber = 1,
  };
  // required string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint64 address = 1;
  bool has_address() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:configuration.call_name_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class configuration :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:configuration.configuration) */ {
 public:
  configuration();
  virtual ~configuration();

  configuration(const configuration& from);
  configuration(configuration&& from) noexcept
    : configuration() {
    *this = ::std::move(from);
  }

  inline configuration& operator=(const configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline configuration& operator=(configuration&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const configuration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const configuration* internal_default_instance() {
    return reinterpret_cast<const configuration*>(
               &_configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(configuration& a, configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(configuration* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline configuration* New() const final {
    return CreateMaybeMessage<configuration>(nullptr);
  }

  configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<configuration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const configuration& from);
  void MergeFrom(const configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(configuration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "configuration.configuration";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallSkipsFieldNumber = 3,
    kFunSkipsFieldNumber = 4,
    kLibcallsFieldNumber = 5,
    kSyscallsFieldNumber = 6,
    kInstrsFieldNumber = 7,
    kPolicyFieldNumber = 8,
    kInputsFieldNumber = 9,
    kCallMapFieldNumber = 10,
    kBreakpointsFieldNumber = 11,
    kInitialStateFieldNumber = 12,
    kAnalysisNameFieldNumber = 15,
    kAdditionalParametersFieldNumber = 25,
    kStartFieldNumber = 1,
    kStopFieldNumber = 2,
    kKstepsFieldNumber = 14,
    kTimeoutFieldNumber = 18,
    kIncrementalFieldNumber = 17,
    kOptimCstpropFieldNumber = 19,
    kOptimRebaseFieldNumber = 20,
    kOptimRowFieldNumber = 21,
    kVerbosityFieldNumber = 24,
    kOptimRowplusFieldNumber = 26,
    kOptimEqpropFieldNumber = 27,
    kDirectionFieldNumber = 13,
    kSolverFieldNumber = 16,
    kCallcvtFieldNumber = 22,
    kDefaultActionFieldNumber = 23,
  };
  // repeated uint64 call_skips = 3;
  int call_skips_size() const;
  void clear_call_skips();
  ::PROTOBUF_NAMESPACE_ID::uint64 call_skips(int index) const;
  void set_call_skips(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_call_skips(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      call_skips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_call_skips();

  // repeated uint64 fun_skips = 4;
  int fun_skips_size() const;
  void clear_fun_skips();
  ::PROTOBUF_NAMESPACE_ID::uint64 fun_skips(int index) const;
  void set_fun_skips(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_fun_skips(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      fun_skips() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_fun_skips();

  // repeated .libcall_types.libcall_pol libcalls = 5;
  int libcalls_size() const;
  void clear_libcalls();
  ::libcall_types::libcall_pol* mutable_libcalls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libcall_types::libcall_pol >*
      mutable_libcalls();
  const ::libcall_types::libcall_pol& libcalls(int index) const;
  ::libcall_types::libcall_pol* add_libcalls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libcall_types::libcall_pol >&
      libcalls() const;

  // repeated .syscall_types.syscall_pol syscalls = 6;
  int syscalls_size() const;
  void clear_syscalls();
  ::syscall_types::syscall_pol* mutable_syscalls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syscall_types::syscall_pol >*
      mutable_syscalls();
  const ::syscall_types::syscall_pol& syscalls(int index) const;
  ::syscall_types::syscall_pol* add_syscalls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syscall_types::syscall_pol >&
      syscalls() const;

  // repeated .instruction_pol.instr_pol instrs = 7;
  int instrs_size() const;
  void clear_instrs();
  ::instruction_pol::instr_pol* mutable_instrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instruction_pol::instr_pol >*
      mutable_instrs();
  const ::instruction_pol::instr_pol& instrs(int index) const;
  ::instruction_pol::instr_pol* add_instrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instruction_pol::instr_pol >&
      instrs() const;

  // repeated string policy = 8;
  int policy_size() const;
  void clear_policy();
  const std::string& policy(int index) const;
  std::string* mutable_policy(int index);
  void set_policy(int index, const std::string& value);
  void set_policy(int index, std::string&& value);
  void set_policy(int index, const char* value);
  void set_policy(int index, const char* value, size_t size);
  std::string* add_policy();
  void add_policy(const std::string& value);
  void add_policy(std::string&& value);
  void add_policy(const char* value);
  void add_policy(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& policy() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_policy();

  // repeated .configuration.input_t inputs = 9;
  int inputs_size() const;
  void clear_inputs();
  ::configuration::input_t* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::input_t >*
      mutable_inputs();
  const ::configuration::input_t& inputs(int index) const;
  ::configuration::input_t* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::input_t >&
      inputs() const;

  // repeated .configuration.call_name_t call_map = 10;
  int call_map_size() const;
  void clear_call_map();
  ::configuration::call_name_t* mutable_call_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::call_name_t >*
      mutable_call_map();
  const ::configuration::call_name_t& call_map(int index) const;
  ::configuration::call_name_t* add_call_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::call_name_t >&
      call_map() const;

  // repeated uint64 breakpoints = 11;
  int breakpoints_size() const;
  void clear_breakpoints();
  ::PROTOBUF_NAMESPACE_ID::uint64 breakpoints(int index) const;
  void set_breakpoints(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_breakpoints(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      breakpoints() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_breakpoints();

  // repeated .common.memory_t initial_state = 12;
  int initial_state_size() const;
  void clear_initial_state();
  ::common::memory_t* mutable_initial_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::memory_t >*
      mutable_initial_state();
  const ::common::memory_t& initial_state(int index) const;
  ::common::memory_t* add_initial_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::memory_t >&
      initial_state() const;

  // optional string analysis_name = 15 [default = ""];
  bool has_analysis_name() const;
  void clear_analysis_name();
  const std::string& analysis_name() const;
  void set_analysis_name(const std::string& value);
  void set_analysis_name(std::string&& value);
  void set_analysis_name(const char* value);
  void set_analysis_name(const char* value, size_t size);
  std::string* mutable_analysis_name();
  std::string* release_analysis_name();
  void set_allocated_analysis_name(std::string* analysis_name);

  // optional .analysis_config.specific_parameters_t additional_parameters = 25;
  bool has_additional_parameters() const;
  void clear_additional_parameters();
  const ::analysis_config::specific_parameters_t& additional_parameters() const;
  ::analysis_config::specific_parameters_t* release_additional_parameters();
  ::analysis_config::specific_parameters_t* mutable_additional_parameters();
  void set_allocated_additional_parameters(::analysis_config::specific_parameters_t* additional_parameters);

  // optional uint64 start = 1;
  bool has_start() const;
  void clear_start();
  ::PROTOBUF_NAMESPACE_ID::uint64 start() const;
  void set_start(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 stop = 2;
  bool has_stop() const;
  void clear_stop();
  ::PROTOBUF_NAMESPACE_ID::uint64 stop() const;
  void set_stop(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 ksteps = 14 [default = 0];
  bool has_ksteps() const;
  void clear_ksteps();
  ::PROTOBUF_NAMESPACE_ID::uint32 ksteps() const;
  void set_ksteps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 timeout = 18 [default = 0];
  bool has_timeout() const;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool incremental = 17 [default = false];
  bool has_incremental() const;
  void clear_incremental();
  bool incremental() const;
  void set_incremental(bool value);

  // optional bool optim_cstprop = 19 [default = false];
  bool has_optim_cstprop() const;
  void clear_optim_cstprop();
  bool optim_cstprop() const;
  void set_optim_cstprop(bool value);

  // optional bool optim_rebase = 20 [default = false];
  bool has_optim_rebase() const;
  void clear_optim_rebase();
  bool optim_rebase() const;
  void set_optim_rebase(bool value);

  // optional bool optim_row = 21 [default = false];
  bool has_optim_row() const;
  void clear_optim_row();
  bool optim_row() const;
  void set_optim_row(bool value);

  // optional uint32 verbosity = 24 [default = 0];
  bool has_verbosity() const;
  void clear_verbosity();
  ::PROTOBUF_NAMESPACE_ID::uint32 verbosity() const;
  void set_verbosity(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional bool optim_rowplus = 26 [default = false];
  bool has_optim_rowplus() const;
  void clear_optim_rowplus();
  bool optim_rowplus() const;
  void set_optim_rowplus(bool value);

  // optional bool optim_eqprop = 27 [default = false];
  bool has_optim_eqprop() const;
  void clear_optim_eqprop();
  bool optim_eqprop() const;
  void set_optim_eqprop(bool value);

  // optional .common.analysis_direction_t direction = 13 [default = FORWARD];
  bool has_direction() const;
  void clear_direction();
  ::common::analysis_direction_t direction() const;
  void set_direction(::common::analysis_direction_t value);

  // optional .common.solver_t solver = 16 [default = Z3];
  bool has_solver() const;
  void clear_solver();
  ::common::solver_t solver() const;
  void set_solver(::common::solver_t value);

  // optional .common.call_convention_t callcvt = 22 [default = CDECL];
  bool has_callcvt() const;
  void clear_callcvt();
  ::common::call_convention_t callcvt() const;
  void set_callcvt(::common::call_convention_t value);

  // optional .common.action default_action = 23 [default = SYMB];
  bool has_default_action() const;
  void clear_default_action();
  ::common::action default_action() const;
  void set_default_action(::common::action value);

  // @@protoc_insertion_point(class_scope:configuration.configuration)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > call_skips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > fun_skips_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libcall_types::libcall_pol > libcalls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syscall_types::syscall_pol > syscalls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instruction_pol::instr_pol > instrs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> policy_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::input_t > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::call_name_t > call_map_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > breakpoints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::memory_t > initial_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr analysis_name_;
  ::analysis_config::specific_parameters_t* additional_parameters_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_;
  ::PROTOBUF_NAMESPACE_ID::uint64 stop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ksteps_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  bool incremental_;
  bool optim_cstprop_;
  bool optim_rebase_;
  bool optim_row_;
  ::PROTOBUF_NAMESPACE_ID::uint32 verbosity_;
  bool optim_rowplus_;
  bool optim_eqprop_;
  int direction_;
  int solver_;
  int callcvt_;
  int default_action_;
  friend struct ::TableStruct_config_2eproto;
};
// -------------------------------------------------------------------

class input_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:configuration.input_t) */ {
 public:
  input_t();
  virtual ~input_t();

  input_t(const input_t& from);
  input_t(input_t&& from) noexcept
    : input_t() {
    *this = ::std::move(from);
  }

  inline input_t& operator=(const input_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline input_t& operator=(input_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const input_t& default_instance();

  enum InputCntCase {
    kReg = 7,
    kMem = 8,
    kIndirect = 9,
    INPUT_CNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const input_t* internal_default_instance() {
    return reinterpret_cast<const input_t*>(
               &_input_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(input_t& a, input_t& b) {
    a.Swap(&b);
  }
  inline void Swap(input_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline input_t* New() const final {
    return CreateMaybeMessage<input_t>(nullptr);
  }

  input_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<input_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const input_t& from);
  void MergeFrom(const input_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(input_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "configuration.input_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_config_2eproto);
    return ::descriptor_table_config_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef input_t_input_kind input_kind;
  static constexpr input_kind REG =
    input_t_input_kind_REG;
  static constexpr input_kind MEM =
    input_t_input_kind_MEM;
  static constexpr input_kind INDIRECT =
    input_t_input_kind_INDIRECT;
  static inline bool input_kind_IsValid(int value) {
    return input_t_input_kind_IsValid(value);
  }
  static constexpr input_kind input_kind_MIN =
    input_t_input_kind_input_kind_MIN;
  static constexpr input_kind input_kind_MAX =
    input_t_input_kind_input_kind_MAX;
  static constexpr int input_kind_ARRAYSIZE =
    input_t_input_kind_input_kind_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  input_kind_descriptor() {
    return input_t_input_kind_descriptor();
  }
  template<typename T>
  static inline const std::string& input_kind_Name(T enum_t_value) {
    static_assert(::std::is_same<T, input_kind>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function input_kind_Name.");
    return input_t_input_kind_Name(enum_t_value);
  }
  static inline bool input_kind_Parse(const std::string& name,
      input_kind* value) {
    return input_t_input_kind_Parse(name, value);
  }

  typedef input_t_when_t when_t;
  static constexpr when_t BEFORE =
    input_t_when_t_BEFORE;
  static constexpr when_t AFTER =
    input_t_when_t_AFTER;
  static inline bool when_t_IsValid(int value) {
    return input_t_when_t_IsValid(value);
  }
  static constexpr when_t when_t_MIN =
    input_t_when_t_when_t_MIN;
  static constexpr when_t when_t_MAX =
    input_t_when_t_when_t_MAX;
  static constexpr int when_t_ARRAYSIZE =
    input_t_when_t_when_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  when_t_descriptor() {
    return input_t_when_t_descriptor();
  }
  template<typename T>
  static inline const std::string& when_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, when_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function when_t_Name.");
    return input_t_when_t_Name(enum_t_value);
  }
  static inline bool when_t_Parse(const std::string& name,
      when_t* value) {
    return input_t_when_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAddressFieldNumber = 2,
    kTypeidFieldNumber = 1,
    kWhenFieldNumber = 3,
    kActionFieldNumber = 4,
    kIterationFieldNumber = 100,
    kRegFieldNumber = 7,
    kMemFieldNumber = 8,
    kIndirectFieldNumber = 9,
  };
  // required uint64 address = 2;
  bool has_address() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required .configuration.input_t.input_kind typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  ::configuration::input_t_input_kind typeid_() const;
  void set_typeid_(::configuration::input_t_input_kind value);

  // required .configuration.input_t.when_t when = 3;
  bool has_when() const;
  void clear_when();
  ::configuration::input_t_when_t when() const;
  void set_when(::configuration::input_t_when_t value);

  // required .common.action action = 4;
  bool has_action() const;
  void clear_action();
  ::common::action action() const;
  void set_action(::common::action value);

  // optional uint32 iteration = 100 [default = 0];
  bool has_iteration() const;
  void clear_iteration();
  ::PROTOBUF_NAMESPACE_ID::uint32 iteration() const;
  void set_iteration(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional .common.register_t reg = 7;
  bool has_reg() const;
  void clear_reg();
  const ::common::register_t& reg() const;
  ::common::register_t* release_reg();
  ::common::register_t* mutable_reg();
  void set_allocated_reg(::common::register_t* reg);

  // optional .common.memory_t mem = 8;
  bool has_mem() const;
  void clear_mem();
  const ::common::memory_t& mem() const;
  ::common::memory_t* release_mem();
  ::common::memory_t* mutable_mem();
  void set_allocated_mem(::common::memory_t* mem);

  // optional .common.indirect_register_t indirect = 9;
  bool has_indirect() const;
  void clear_indirect();
  const ::common::indirect_register_t& indirect() const;
  ::common::indirect_register_t* release_indirect();
  ::common::indirect_register_t* mutable_indirect();
  void set_allocated_indirect(::common::indirect_register_t* indirect);

  void clear_input_cnt();
  InputCntCase input_cnt_case() const;
  // @@protoc_insertion_point(class_scope:configuration.input_t)
 private:
  class _Internal;
  void set_has_reg();
  void set_has_mem();
  void set_has_indirect();

  inline bool has_input_cnt() const;
  inline void clear_has_input_cnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  int typeid__;
  int when_;
  int action_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iteration_;
  union InputCntUnion {
    InputCntUnion() {}
    ::common::register_t* reg_;
    ::common::memory_t* mem_;
    ::common::indirect_register_t* indirect_;
  } input_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_config_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// call_name_t

// required uint64 address = 1;
inline bool call_name_t::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void call_name_t::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 call_name_t::address() const {
  // @@protoc_insertion_point(field_get:configuration.call_name_t.address)
  return address_;
}
inline void call_name_t::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  address_ = value;
  // @@protoc_insertion_point(field_set:configuration.call_name_t.address)
}

// required string name = 2;
inline bool call_name_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void call_name_t::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& call_name_t::name() const {
  // @@protoc_insertion_point(field_get:configuration.call_name_t.name)
  return name_.GetNoArena();
}
inline void call_name_t::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configuration.call_name_t.name)
}
inline void call_name_t::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configuration.call_name_t.name)
}
inline void call_name_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configuration.call_name_t.name)
}
inline void call_name_t::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configuration.call_name_t.name)
}
inline std::string* call_name_t::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:configuration.call_name_t.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* call_name_t::release_name() {
  // @@protoc_insertion_point(field_release:configuration.call_name_t.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void call_name_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:configuration.call_name_t.name)
}

// -------------------------------------------------------------------

// configuration

// optional uint64 start = 1;
inline bool configuration::has_start() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void configuration::clear_start() {
  start_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 configuration::start() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.start)
  return start_;
}
inline void configuration::set_start(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  start_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.start)
}

// optional uint64 stop = 2;
inline bool configuration::has_stop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void configuration::clear_stop() {
  stop_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 configuration::stop() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.stop)
  return stop_;
}
inline void configuration::set_stop(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  stop_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.stop)
}

// repeated uint64 call_skips = 3;
inline int configuration::call_skips_size() const {
  return call_skips_.size();
}
inline void configuration::clear_call_skips() {
  call_skips_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 configuration::call_skips(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.call_skips)
  return call_skips_.Get(index);
}
inline void configuration::set_call_skips(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  call_skips_.Set(index, value);
  // @@protoc_insertion_point(field_set:configuration.configuration.call_skips)
}
inline void configuration::add_call_skips(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  call_skips_.Add(value);
  // @@protoc_insertion_point(field_add:configuration.configuration.call_skips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
configuration::call_skips() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.call_skips)
  return call_skips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
configuration::mutable_call_skips() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.call_skips)
  return &call_skips_;
}

// repeated uint64 fun_skips = 4;
inline int configuration::fun_skips_size() const {
  return fun_skips_.size();
}
inline void configuration::clear_fun_skips() {
  fun_skips_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 configuration::fun_skips(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.fun_skips)
  return fun_skips_.Get(index);
}
inline void configuration::set_fun_skips(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fun_skips_.Set(index, value);
  // @@protoc_insertion_point(field_set:configuration.configuration.fun_skips)
}
inline void configuration::add_fun_skips(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  fun_skips_.Add(value);
  // @@protoc_insertion_point(field_add:configuration.configuration.fun_skips)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
configuration::fun_skips() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.fun_skips)
  return fun_skips_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
configuration::mutable_fun_skips() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.fun_skips)
  return &fun_skips_;
}

// repeated .libcall_types.libcall_pol libcalls = 5;
inline int configuration::libcalls_size() const {
  return libcalls_.size();
}
inline ::libcall_types::libcall_pol* configuration::mutable_libcalls(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.libcalls)
  return libcalls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libcall_types::libcall_pol >*
configuration::mutable_libcalls() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.libcalls)
  return &libcalls_;
}
inline const ::libcall_types::libcall_pol& configuration::libcalls(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.libcalls)
  return libcalls_.Get(index);
}
inline ::libcall_types::libcall_pol* configuration::add_libcalls() {
  // @@protoc_insertion_point(field_add:configuration.configuration.libcalls)
  return libcalls_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::libcall_types::libcall_pol >&
configuration::libcalls() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.libcalls)
  return libcalls_;
}

// repeated .syscall_types.syscall_pol syscalls = 6;
inline int configuration::syscalls_size() const {
  return syscalls_.size();
}
inline ::syscall_types::syscall_pol* configuration::mutable_syscalls(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.syscalls)
  return syscalls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syscall_types::syscall_pol >*
configuration::mutable_syscalls() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.syscalls)
  return &syscalls_;
}
inline const ::syscall_types::syscall_pol& configuration::syscalls(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.syscalls)
  return syscalls_.Get(index);
}
inline ::syscall_types::syscall_pol* configuration::add_syscalls() {
  // @@protoc_insertion_point(field_add:configuration.configuration.syscalls)
  return syscalls_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::syscall_types::syscall_pol >&
configuration::syscalls() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.syscalls)
  return syscalls_;
}

// repeated .instruction_pol.instr_pol instrs = 7;
inline int configuration::instrs_size() const {
  return instrs_.size();
}
inline ::instruction_pol::instr_pol* configuration::mutable_instrs(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.instrs)
  return instrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instruction_pol::instr_pol >*
configuration::mutable_instrs() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.instrs)
  return &instrs_;
}
inline const ::instruction_pol::instr_pol& configuration::instrs(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.instrs)
  return instrs_.Get(index);
}
inline ::instruction_pol::instr_pol* configuration::add_instrs() {
  // @@protoc_insertion_point(field_add:configuration.configuration.instrs)
  return instrs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::instruction_pol::instr_pol >&
configuration::instrs() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.instrs)
  return instrs_;
}

// repeated string policy = 8;
inline int configuration::policy_size() const {
  return policy_.size();
}
inline void configuration::clear_policy() {
  policy_.Clear();
}
inline const std::string& configuration::policy(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.policy)
  return policy_.Get(index);
}
inline std::string* configuration::mutable_policy(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.policy)
  return policy_.Mutable(index);
}
inline void configuration::set_policy(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:configuration.configuration.policy)
  policy_.Mutable(index)->assign(value);
}
inline void configuration::set_policy(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:configuration.configuration.policy)
  policy_.Mutable(index)->assign(std::move(value));
}
inline void configuration::set_policy(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  policy_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:configuration.configuration.policy)
}
inline void configuration::set_policy(int index, const char* value, size_t size) {
  policy_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:configuration.configuration.policy)
}
inline std::string* configuration::add_policy() {
  // @@protoc_insertion_point(field_add_mutable:configuration.configuration.policy)
  return policy_.Add();
}
inline void configuration::add_policy(const std::string& value) {
  policy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:configuration.configuration.policy)
}
inline void configuration::add_policy(std::string&& value) {
  policy_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:configuration.configuration.policy)
}
inline void configuration::add_policy(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  policy_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:configuration.configuration.policy)
}
inline void configuration::add_policy(const char* value, size_t size) {
  policy_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:configuration.configuration.policy)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
configuration::policy() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.policy)
  return policy_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
configuration::mutable_policy() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.policy)
  return &policy_;
}

// repeated .configuration.input_t inputs = 9;
inline int configuration::inputs_size() const {
  return inputs_.size();
}
inline void configuration::clear_inputs() {
  inputs_.Clear();
}
inline ::configuration::input_t* configuration::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::input_t >*
configuration::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.inputs)
  return &inputs_;
}
inline const ::configuration::input_t& configuration::inputs(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.inputs)
  return inputs_.Get(index);
}
inline ::configuration::input_t* configuration::add_inputs() {
  // @@protoc_insertion_point(field_add:configuration.configuration.inputs)
  return inputs_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::input_t >&
configuration::inputs() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.inputs)
  return inputs_;
}

// repeated .configuration.call_name_t call_map = 10;
inline int configuration::call_map_size() const {
  return call_map_.size();
}
inline void configuration::clear_call_map() {
  call_map_.Clear();
}
inline ::configuration::call_name_t* configuration::mutable_call_map(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.call_map)
  return call_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::call_name_t >*
configuration::mutable_call_map() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.call_map)
  return &call_map_;
}
inline const ::configuration::call_name_t& configuration::call_map(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.call_map)
  return call_map_.Get(index);
}
inline ::configuration::call_name_t* configuration::add_call_map() {
  // @@protoc_insertion_point(field_add:configuration.configuration.call_map)
  return call_map_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::configuration::call_name_t >&
configuration::call_map() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.call_map)
  return call_map_;
}

// repeated uint64 breakpoints = 11;
inline int configuration::breakpoints_size() const {
  return breakpoints_.size();
}
inline void configuration::clear_breakpoints() {
  breakpoints_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 configuration::breakpoints(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.breakpoints)
  return breakpoints_.Get(index);
}
inline void configuration::set_breakpoints(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  breakpoints_.Set(index, value);
  // @@protoc_insertion_point(field_set:configuration.configuration.breakpoints)
}
inline void configuration::add_breakpoints(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  breakpoints_.Add(value);
  // @@protoc_insertion_point(field_add:configuration.configuration.breakpoints)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
configuration::breakpoints() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.breakpoints)
  return breakpoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
configuration::mutable_breakpoints() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.breakpoints)
  return &breakpoints_;
}

// repeated .common.memory_t initial_state = 12;
inline int configuration::initial_state_size() const {
  return initial_state_.size();
}
inline ::common::memory_t* configuration::mutable_initial_state(int index) {
  // @@protoc_insertion_point(field_mutable:configuration.configuration.initial_state)
  return initial_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::memory_t >*
configuration::mutable_initial_state() {
  // @@protoc_insertion_point(field_mutable_list:configuration.configuration.initial_state)
  return &initial_state_;
}
inline const ::common::memory_t& configuration::initial_state(int index) const {
  // @@protoc_insertion_point(field_get:configuration.configuration.initial_state)
  return initial_state_.Get(index);
}
inline ::common::memory_t* configuration::add_initial_state() {
  // @@protoc_insertion_point(field_add:configuration.configuration.initial_state)
  return initial_state_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::common::memory_t >&
configuration::initial_state() const {
  // @@protoc_insertion_point(field_list:configuration.configuration.initial_state)
  return initial_state_;
}

// optional .common.analysis_direction_t direction = 13 [default = FORWARD];
inline bool configuration::has_direction() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void configuration::clear_direction() {
  direction_ = 1;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::common::analysis_direction_t configuration::direction() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.direction)
  return static_cast< ::common::analysis_direction_t >(direction_);
}
inline void configuration::set_direction(::common::analysis_direction_t value) {
  assert(::common::analysis_direction_t_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  direction_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.direction)
}

// optional uint32 ksteps = 14 [default = 0];
inline bool configuration::has_ksteps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void configuration::clear_ksteps() {
  ksteps_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configuration::ksteps() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.ksteps)
  return ksteps_;
}
inline void configuration::set_ksteps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  ksteps_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.ksteps)
}

// optional string analysis_name = 15 [default = ""];
inline bool configuration::has_analysis_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void configuration::clear_analysis_name() {
  analysis_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& configuration::analysis_name() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.analysis_name)
  return analysis_name_.GetNoArena();
}
inline void configuration::set_analysis_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  analysis_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:configuration.configuration.analysis_name)
}
inline void configuration::set_analysis_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  analysis_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:configuration.configuration.analysis_name)
}
inline void configuration::set_analysis_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  analysis_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:configuration.configuration.analysis_name)
}
inline void configuration::set_analysis_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  analysis_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:configuration.configuration.analysis_name)
}
inline std::string* configuration::mutable_analysis_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:configuration.configuration.analysis_name)
  return analysis_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* configuration::release_analysis_name() {
  // @@protoc_insertion_point(field_release:configuration.configuration.analysis_name)
  if (!has_analysis_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return analysis_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void configuration::set_allocated_analysis_name(std::string* analysis_name) {
  if (analysis_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  analysis_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), analysis_name);
  // @@protoc_insertion_point(field_set_allocated:configuration.configuration.analysis_name)
}

// optional .common.solver_t solver = 16 [default = Z3];
inline bool configuration::has_solver() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void configuration::clear_solver() {
  solver_ = 1;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::common::solver_t configuration::solver() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.solver)
  return static_cast< ::common::solver_t >(solver_);
}
inline void configuration::set_solver(::common::solver_t value) {
  assert(::common::solver_t_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  solver_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.solver)
}

// optional bool incremental = 17 [default = false];
inline bool configuration::has_incremental() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void configuration::clear_incremental() {
  incremental_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool configuration::incremental() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.incremental)
  return incremental_;
}
inline void configuration::set_incremental(bool value) {
  _has_bits_[0] |= 0x00000040u;
  incremental_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.incremental)
}

// optional uint32 timeout = 18 [default = 0];
inline bool configuration::has_timeout() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void configuration::clear_timeout() {
  timeout_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configuration::timeout() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.timeout)
  return timeout_;
}
inline void configuration::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  timeout_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.timeout)
}

// optional bool optim_cstprop = 19 [default = false];
inline bool configuration::has_optim_cstprop() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void configuration::clear_optim_cstprop() {
  optim_cstprop_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool configuration::optim_cstprop() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.optim_cstprop)
  return optim_cstprop_;
}
inline void configuration::set_optim_cstprop(bool value) {
  _has_bits_[0] |= 0x00000080u;
  optim_cstprop_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.optim_cstprop)
}

// optional bool optim_rebase = 20 [default = false];
inline bool configuration::has_optim_rebase() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void configuration::clear_optim_rebase() {
  optim_rebase_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool configuration::optim_rebase() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.optim_rebase)
  return optim_rebase_;
}
inline void configuration::set_optim_rebase(bool value) {
  _has_bits_[0] |= 0x00000100u;
  optim_rebase_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.optim_rebase)
}

// optional bool optim_row = 21 [default = false];
inline bool configuration::has_optim_row() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void configuration::clear_optim_row() {
  optim_row_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool configuration::optim_row() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.optim_row)
  return optim_row_;
}
inline void configuration::set_optim_row(bool value) {
  _has_bits_[0] |= 0x00000200u;
  optim_row_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.optim_row)
}

// optional bool optim_rowplus = 26 [default = false];
inline bool configuration::has_optim_rowplus() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void configuration::clear_optim_rowplus() {
  optim_rowplus_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool configuration::optim_rowplus() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.optim_rowplus)
  return optim_rowplus_;
}
inline void configuration::set_optim_rowplus(bool value) {
  _has_bits_[0] |= 0x00000800u;
  optim_rowplus_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.optim_rowplus)
}

// optional bool optim_eqprop = 27 [default = false];
inline bool configuration::has_optim_eqprop() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void configuration::clear_optim_eqprop() {
  optim_eqprop_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool configuration::optim_eqprop() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.optim_eqprop)
  return optim_eqprop_;
}
inline void configuration::set_optim_eqprop(bool value) {
  _has_bits_[0] |= 0x00001000u;
  optim_eqprop_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.optim_eqprop)
}

// optional .common.call_convention_t callcvt = 22 [default = CDECL];
inline bool configuration::has_callcvt() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void configuration::clear_callcvt() {
  callcvt_ = 1;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::common::call_convention_t configuration::callcvt() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.callcvt)
  return static_cast< ::common::call_convention_t >(callcvt_);
}
inline void configuration::set_callcvt(::common::call_convention_t value) {
  assert(::common::call_convention_t_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  callcvt_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.callcvt)
}

// optional .common.action default_action = 23 [default = SYMB];
inline bool configuration::has_default_action() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void configuration::clear_default_action() {
  default_action_ = 3;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::common::action configuration::default_action() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.default_action)
  return static_cast< ::common::action >(default_action_);
}
inline void configuration::set_default_action(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00010000u;
  default_action_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.default_action)
}

// optional uint32 verbosity = 24 [default = 0];
inline bool configuration::has_verbosity() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void configuration::clear_verbosity() {
  verbosity_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 configuration::verbosity() const {
  // @@protoc_insertion_point(field_get:configuration.configuration.verbosity)
  return verbosity_;
}
inline void configuration::set_verbosity(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  verbosity_ = value;
  // @@protoc_insertion_point(field_set:configuration.configuration.verbosity)
}

// optional .analysis_config.specific_parameters_t additional_parameters = 25;
inline bool configuration::has_additional_parameters() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::analysis_config::specific_parameters_t& configuration::additional_parameters() const {
  const ::analysis_config::specific_parameters_t* p = additional_parameters_;
  // @@protoc_insertion_point(field_get:configuration.configuration.additional_parameters)
  return p != nullptr ? *p : *reinterpret_cast<const ::analysis_config::specific_parameters_t*>(
      &::analysis_config::_specific_parameters_t_default_instance_);
}
inline ::analysis_config::specific_parameters_t* configuration::release_additional_parameters() {
  // @@protoc_insertion_point(field_release:configuration.configuration.additional_parameters)
  _has_bits_[0] &= ~0x00000002u;
  ::analysis_config::specific_parameters_t* temp = additional_parameters_;
  additional_parameters_ = nullptr;
  return temp;
}
inline ::analysis_config::specific_parameters_t* configuration::mutable_additional_parameters() {
  _has_bits_[0] |= 0x00000002u;
  if (additional_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::analysis_config::specific_parameters_t>(GetArenaNoVirtual());
    additional_parameters_ = p;
  }
  // @@protoc_insertion_point(field_mutable:configuration.configuration.additional_parameters)
  return additional_parameters_;
}
inline void configuration::set_allocated_additional_parameters(::analysis_config::specific_parameters_t* additional_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(additional_parameters_);
  }
  if (additional_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      additional_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, additional_parameters, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  additional_parameters_ = additional_parameters;
  // @@protoc_insertion_point(field_set_allocated:configuration.configuration.additional_parameters)
}

// -------------------------------------------------------------------

// input_t

// required .configuration.input_t.input_kind typeid = 1;
inline bool input_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void input_t::clear_typeid_() {
  typeid__ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::configuration::input_t_input_kind input_t::typeid_() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.typeid)
  return static_cast< ::configuration::input_t_input_kind >(typeid__);
}
inline void input_t::set_typeid_(::configuration::input_t_input_kind value) {
  assert(::configuration::input_t_input_kind_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  typeid__ = value;
  // @@protoc_insertion_point(field_set:configuration.input_t.typeid)
}

// required uint64 address = 2;
inline bool input_t::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void input_t::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 input_t::address() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.address)
  return address_;
}
inline void input_t::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  address_ = value;
  // @@protoc_insertion_point(field_set:configuration.input_t.address)
}

// required .configuration.input_t.when_t when = 3;
inline bool input_t::has_when() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void input_t::clear_when() {
  when_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::configuration::input_t_when_t input_t::when() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.when)
  return static_cast< ::configuration::input_t_when_t >(when_);
}
inline void input_t::set_when(::configuration::input_t_when_t value) {
  assert(::configuration::input_t_when_t_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  when_ = value;
  // @@protoc_insertion_point(field_set:configuration.input_t.when)
}

// required .common.action action = 4;
inline bool input_t::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void input_t::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::common::action input_t::action() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.action)
  return static_cast< ::common::action >(action_);
}
inline void input_t::set_action(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
  // @@protoc_insertion_point(field_set:configuration.input_t.action)
}

// optional uint32 iteration = 100 [default = 0];
inline bool input_t::has_iteration() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void input_t::clear_iteration() {
  iteration_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 input_t::iteration() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.iteration)
  return iteration_;
}
inline void input_t::set_iteration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  iteration_ = value;
  // @@protoc_insertion_point(field_set:configuration.input_t.iteration)
}

// optional .common.register_t reg = 7;
inline bool input_t::has_reg() const {
  return input_cnt_case() == kReg;
}
inline void input_t::set_has_reg() {
  _oneof_case_[0] = kReg;
}
inline ::common::register_t* input_t::release_reg() {
  // @@protoc_insertion_point(field_release:configuration.input_t.reg)
  if (has_reg()) {
    clear_has_input_cnt();
      ::common::register_t* temp = input_cnt_.reg_;
    input_cnt_.reg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::register_t& input_t::reg() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.reg)
  return has_reg()
      ? *input_cnt_.reg_
      : *reinterpret_cast< ::common::register_t*>(&::common::_register_t_default_instance_);
}
inline ::common::register_t* input_t::mutable_reg() {
  if (!has_reg()) {
    clear_input_cnt();
    set_has_reg();
    input_cnt_.reg_ = CreateMaybeMessage< ::common::register_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:configuration.input_t.reg)
  return input_cnt_.reg_;
}

// optional .common.memory_t mem = 8;
inline bool input_t::has_mem() const {
  return input_cnt_case() == kMem;
}
inline void input_t::set_has_mem() {
  _oneof_case_[0] = kMem;
}
inline ::common::memory_t* input_t::release_mem() {
  // @@protoc_insertion_point(field_release:configuration.input_t.mem)
  if (has_mem()) {
    clear_has_input_cnt();
      ::common::memory_t* temp = input_cnt_.mem_;
    input_cnt_.mem_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::memory_t& input_t::mem() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.mem)
  return has_mem()
      ? *input_cnt_.mem_
      : *reinterpret_cast< ::common::memory_t*>(&::common::_memory_t_default_instance_);
}
inline ::common::memory_t* input_t::mutable_mem() {
  if (!has_mem()) {
    clear_input_cnt();
    set_has_mem();
    input_cnt_.mem_ = CreateMaybeMessage< ::common::memory_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:configuration.input_t.mem)
  return input_cnt_.mem_;
}

// optional .common.indirect_register_t indirect = 9;
inline bool input_t::has_indirect() const {
  return input_cnt_case() == kIndirect;
}
inline void input_t::set_has_indirect() {
  _oneof_case_[0] = kIndirect;
}
inline ::common::indirect_register_t* input_t::release_indirect() {
  // @@protoc_insertion_point(field_release:configuration.input_t.indirect)
  if (has_indirect()) {
    clear_has_input_cnt();
      ::common::indirect_register_t* temp = input_cnt_.indirect_;
    input_cnt_.indirect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::indirect_register_t& input_t::indirect() const {
  // @@protoc_insertion_point(field_get:configuration.input_t.indirect)
  return has_indirect()
      ? *input_cnt_.indirect_
      : *reinterpret_cast< ::common::indirect_register_t*>(&::common::_indirect_register_t_default_instance_);
}
inline ::common::indirect_register_t* input_t::mutable_indirect() {
  if (!has_indirect()) {
    clear_input_cnt();
    set_has_indirect();
    input_cnt_.indirect_ = CreateMaybeMessage< ::common::indirect_register_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:configuration.input_t.indirect)
  return input_cnt_.indirect_;
}

inline bool input_t::has_input_cnt() const {
  return input_cnt_case() != INPUT_CNT_NOT_SET;
}
inline void input_t::clear_has_input_cnt() {
  _oneof_case_[0] = INPUT_CNT_NOT_SET;
}
inline input_t::InputCntCase input_t::input_cnt_case() const {
  return input_t::InputCntCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace configuration

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::configuration::input_t_input_kind> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::configuration::input_t_input_kind>() {
  return ::configuration::input_t_input_kind_descriptor();
}
template <> struct is_proto_enum< ::configuration::input_t_when_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::configuration::input_t_when_t>() {
  return ::configuration::input_t_when_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_2eproto
