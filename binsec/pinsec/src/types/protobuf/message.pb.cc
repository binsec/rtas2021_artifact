// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_configuration_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_input_t_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dba_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_dba_list_dba_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_message_decode_instr_instr_entry_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_decode_instr_reply_instr_entry_message_2eproto;
class message_start_execDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_start_exec> _instance;
} _message_start_exec_default_instance_;
class message_bp_reachedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_bp_reached> _instance;
} _message_bp_reached_default_instance_;
class message_patchDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_patch> _instance;
} _message_patch_default_instance_;
class message_infosDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_infos> _instance;
} _message_infos_default_instance_;
class message_decode_instr_instr_entryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_decode_instr_instr_entry> _instance;
} _message_decode_instr_instr_entry_default_instance_;
class message_decode_instrDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_decode_instr> _instance;
} _message_decode_instr_default_instance_;
class message_decode_instr_reply_instr_entryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_decode_instr_reply_instr_entry> _instance;
  const ::dba::dba_list* dba_instrs_;
} _message_decode_instr_reply_instr_entry_default_instance_;
class message_decode_instr_replyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_decode_instr_reply> _instance;
} _message_decode_instr_reply_default_instance_;
class message_start_symb_execDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_start_symb_exec> _instance;
} _message_start_symb_exec_default_instance_;
class message_outputDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<message_output> _instance;
} _message_output_default_instance_;
static void InitDefaultsscc_info_message_bp_reached_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_bp_reached_default_instance_;
    new (ptr) ::message_bp_reached();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_bp_reached::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_message_bp_reached_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_message_bp_reached_message_2eproto}, {}};

static void InitDefaultsscc_info_message_decode_instr_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_decode_instr_default_instance_;
    new (ptr) ::message_decode_instr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_decode_instr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_decode_instr_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_message_decode_instr_message_2eproto}, {
      &scc_info_message_decode_instr_instr_entry_message_2eproto.base,}};

static void InitDefaultsscc_info_message_decode_instr_instr_entry_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_decode_instr_instr_entry_default_instance_;
    new (ptr) ::message_decode_instr_instr_entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_decode_instr_instr_entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_message_decode_instr_instr_entry_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_message_decode_instr_instr_entry_message_2eproto}, {}};

static void InitDefaultsscc_info_message_decode_instr_reply_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_decode_instr_reply_default_instance_;
    new (ptr) ::message_decode_instr_reply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_decode_instr_reply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_decode_instr_reply_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_message_decode_instr_reply_message_2eproto}, {
      &scc_info_message_decode_instr_reply_instr_entry_message_2eproto.base,}};

static void InitDefaultsscc_info_message_decode_instr_reply_instr_entry_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_decode_instr_reply_instr_entry_default_instance_;
    new (ptr) ::message_decode_instr_reply_instr_entry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_decode_instr_reply_instr_entry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_decode_instr_reply_instr_entry_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_message_decode_instr_reply_instr_entry_message_2eproto}, {
      &scc_info_dba_list_dba_2eproto.base,}};

static void InitDefaultsscc_info_message_infos_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_infos_default_instance_;
    new (ptr) ::message_infos();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_infos::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_message_infos_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_message_infos_message_2eproto}, {}};

static void InitDefaultsscc_info_message_output_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_output_default_instance_;
    new (ptr) ::message_output();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_output::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_message_output_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_message_output_message_2eproto}, {}};

static void InitDefaultsscc_info_message_patch_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_patch_default_instance_;
    new (ptr) ::message_patch();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_patch::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_patch_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_message_patch_message_2eproto}, {
      &scc_info_input_t_config_2eproto.base,}};

static void InitDefaultsscc_info_message_start_exec_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_start_exec_default_instance_;
    new (ptr) ::message_start_exec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_start_exec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_start_exec_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_message_start_exec_message_2eproto}, {
      &scc_info_input_t_config_2eproto.base,}};

static void InitDefaultsscc_info_message_start_symb_exec_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_message_start_symb_exec_default_instance_;
    new (ptr) ::message_start_symb_exec();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message_start_symb_exec::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_message_start_symb_exec_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_message_start_symb_exec_message_2eproto}, {
      &scc_info_configuration_config_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[10];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::message_start_exec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_start_exec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_start_exec, start_),
  PROTOBUF_FIELD_OFFSET(::message_start_exec, stop_),
  PROTOBUF_FIELD_OFFSET(::message_start_exec, size_chunks_),
  PROTOBUF_FIELD_OFFSET(::message_start_exec, breakpoints_),
  PROTOBUF_FIELD_OFFSET(::message_start_exec, inputs_),
  PROTOBUF_FIELD_OFFSET(::message_start_exec, skips_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::message_bp_reached, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_bp_reached, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_bp_reached, addr_),
  0,
  PROTOBUF_FIELD_OFFSET(::message_patch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_patch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_patch, patch_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::message_infos, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_infos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_infos, nb_workers_),
  PROTOBUF_FIELD_OFFSET(::message_infos, analyses_),
  PROTOBUF_FIELD_OFFSET(::message_infos, solvers_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_instr_entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_instr_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_instr_entry, instr_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_instr_entry, base_addr_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::message_decode_instr, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_decode_instr, instrs_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr, kind_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr, irkind_),
  ~0u,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply_instr_entry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply_instr_entry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply_instr_entry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply_instr_entry, opcode_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply_instr_entry, irkind_),
  offsetof(::message_decode_instr_reply_instr_entryDefaultTypeInternal, dba_instrs_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply_instr_entry, instrs_cnt_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_decode_instr_reply, instrs_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, trace_type_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, name_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, solver_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, config_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, irkind_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, formula_optim_cstfold_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, formula_optim_rebase_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, formula_optim_row_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, verbose_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, addr_predicate_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, predicate_),
  PROTOBUF_FIELD_OFFSET(::message_start_symb_exec, trace_filename_),
  10,
  0,
  11,
  3,
  9,
  4,
  5,
  6,
  7,
  8,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::message_output, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message_output, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message_output, type_),
  PROTOBUF_FIELD_OFFSET(::message_output, message_),
  PROTOBUF_FIELD_OFFSET(::message_output, ram_total_),
  PROTOBUF_FIELD_OFFSET(::message_output, ram_free_),
  PROTOBUF_FIELD_OFFSET(::message_output, ram_available_),
  4,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::message_start_exec)},
  { 17, 23, sizeof(::message_bp_reached)},
  { 24, 30, sizeof(::message_patch)},
  { 31, 39, sizeof(::message_infos)},
  { 42, 49, sizeof(::message_decode_instr_instr_entry)},
  { 51, 59, sizeof(::message_decode_instr)},
  { 62, 71, sizeof(::message_decode_instr_reply_instr_entry)},
  { 74, 80, sizeof(::message_decode_instr_reply)},
  { 81, 98, sizeof(::message_start_symb_exec)},
  { 110, 120, sizeof(::message_output)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_start_exec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_bp_reached_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_patch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_infos_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_decode_instr_instr_entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_decode_instr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_decode_instr_reply_instr_entry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_decode_instr_reply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_start_symb_exec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_message_output_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\032\014common.proto\032\tdba.proto"
  "\032\014config.proto\"\230\001\n\022message_start_exec\022\r\n"
  "\005start\030\001 \002(\004\022\014\n\004stop\030\002 \002(\004\022\031\n\013size_chunk"
  "s\030\003 \001(\r:\0041000\022\023\n\013breakpoints\030\004 \003(\004\022&\n\006in"
  "puts\030\005 \003(\0132\026.configuration.input_t\022\r\n\005sk"
  "ips\030\006 \003(\004\"\"\n\022message_bp_reached\022\014\n\004addr\030"
  "\001 \002(\004\"6\n\rmessage_patch\022%\n\005patch\030\001 \003(\0132\026."
  "configuration.input_t\"F\n\rmessage_infos\022\022"
  "\n\nnb_workers\030\001 \002(\r\022\020\n\010analyses\030\002 \003(\t\022\017\n\007"
  "solvers\030\003 \003(\t\"\367\001\n\024message_decode_instr\0221"
  "\n\006instrs\030\001 \003(\0132!.message_decode_instr.in"
  "str_entry\0221\n\004kind\030\002 \001(\0162\036.message_decode"
  "_instr.bin_kind:\003BIN\022&\n\006irkind\030\003 \001(\0162\021.c"
  "ommon.ir_kind_t:\003DBA\0322\n\013instr_entry\022\r\n\005i"
  "nstr\030\001 \002(\t\022\024\n\tbase_addr\030\002 \001(\004:\0010\"\035\n\010bin_"
  "kind\022\010\n\004HEXA\020\001\022\007\n\003BIN\020\002\"\312\001\n\032message_deco"
  "de_instr_reply\0227\n\006instrs\030\001 \003(\0132\'.message"
  "_decode_instr_reply.instr_entry\032s\n\013instr"
  "_entry\022\016\n\006opcode\030\001 \002(\t\022!\n\006irkind\030\002 \002(\0162\021"
  ".common.ir_kind_t\022#\n\ndba_instrs\030\003 \001(\0132\r."
  "dba.dba_listH\000B\014\n\ninstrs_cnt\"\254\003\n\027message"
  "_start_symb_exec\0227\n\ntrace_type\030\001 \002(\0162#.m"
  "essage_start_symb_exec.trace_kind\022\014\n\004nam"
  "e\030\002 \002(\t\022$\n\006solver\030\003 \001(\0162\020.common.solver_"
  "t:\002Z3\022,\n\006config\030\004 \001(\0132\034.configuration.co"
  "nfiguration\022&\n\006irkind\030\005 \001(\0162\021.common.ir_"
  "kind_t:\003DBA\022\035\n\025formula_optim_cstfold\030\006 \001"
  "(\010\022\034\n\024formula_optim_rebase\030\007 \001(\010\022\031\n\021form"
  "ula_optim_row\030\010 \001(\010\022\017\n\007verbose\030\t \002(\r\022\026\n\016"
  "addr_predicate\030\n \001(\004\022\021\n\tpredicate\030\013 \001(\t\022"
  "\026\n\016trace_filename\030\014 \001(\t\"\"\n\ntrace_kind\022\010\n"
  "\004FILE\020\001\022\n\n\006STREAM\020\002\"\340\001\n\016message_output\022)"
  "\n\004type\030\001 \002(\0162\033.message_output.output_kin"
  "d\022\017\n\007message\030\002 \002(\t\022\021\n\tram_total\030\003 \001(\r\022\020\n"
  "\010ram_free\030\004 \001(\r\022\025\n\rram_available\030\005 \001(\r\"V"
  "\n\013output_kind\022\013\n\007SUCCESS\020\001\022\n\n\006RESULT\020\002\022\t"
  "\n\005DEBUG\020\003\022\013\n\007WARNING\020\004\022\t\n\005ERROR\020\005\022\013\n\007FAI"
  "LURE\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_config_2eproto,
  &::descriptor_table_dba_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[10] = {
  &scc_info_message_bp_reached_message_2eproto.base,
  &scc_info_message_decode_instr_message_2eproto.base,
  &scc_info_message_decode_instr_instr_entry_message_2eproto.base,
  &scc_info_message_decode_instr_reply_message_2eproto.base,
  &scc_info_message_decode_instr_reply_instr_entry_message_2eproto.base,
  &scc_info_message_infos_message_2eproto.base,
  &scc_info_message_output_message_2eproto.base,
  &scc_info_message_patch_message_2eproto.base,
  &scc_info_message_start_exec_message_2eproto.base,
  &scc_info_message_start_symb_exec_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
static bool descriptor_table_message_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  &descriptor_table_message_2eproto_initialized, descriptor_table_protodef_message_2eproto, "message.proto", 1486,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 10, 3,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 10, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_decode_instr_bin_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool message_decode_instr_bin_kind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr message_decode_instr_bin_kind message_decode_instr::HEXA;
constexpr message_decode_instr_bin_kind message_decode_instr::BIN;
constexpr message_decode_instr_bin_kind message_decode_instr::bin_kind_MIN;
constexpr message_decode_instr_bin_kind message_decode_instr::bin_kind_MAX;
constexpr int message_decode_instr::bin_kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_start_symb_exec_trace_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool message_start_symb_exec_trace_kind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr message_start_symb_exec_trace_kind message_start_symb_exec::FILE;
constexpr message_start_symb_exec_trace_kind message_start_symb_exec::STREAM;
constexpr message_start_symb_exec_trace_kind message_start_symb_exec::trace_kind_MIN;
constexpr message_start_symb_exec_trace_kind message_start_symb_exec::trace_kind_MAX;
constexpr int message_start_symb_exec::trace_kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* message_output_output_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool message_output_output_kind_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr message_output_output_kind message_output::SUCCESS;
constexpr message_output_output_kind message_output::RESULT;
constexpr message_output_output_kind message_output::DEBUG;
constexpr message_output_output_kind message_output::WARNING;
constexpr message_output_output_kind message_output::ERROR;
constexpr message_output_output_kind message_output::FAILURE;
constexpr message_output_output_kind message_output::output_kind_MIN;
constexpr message_output_output_kind message_output::output_kind_MAX;
constexpr int message_output::output_kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void message_start_exec::InitAsDefaultInstance() {
}
class message_start_exec::_Internal {
 public:
  using HasBits = decltype(std::declval<message_start_exec>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_size_chunks(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

void message_start_exec::clear_inputs() {
  inputs_.Clear();
}
message_start_exec::message_start_exec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_start_exec)
}
message_start_exec::message_start_exec(const message_start_exec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      breakpoints_(from.breakpoints_),
      inputs_(from.inputs_),
      skips_(from.skips_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_chunks_) -
    reinterpret_cast<char*>(&start_)) + sizeof(size_chunks_));
  // @@protoc_insertion_point(copy_constructor:message_start_exec)
}

void message_start_exec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_start_exec_message_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_) -
      reinterpret_cast<char*>(&start_)) + sizeof(stop_));
  size_chunks_ = 1000u;
}

message_start_exec::~message_start_exec() {
  // @@protoc_insertion_point(destructor:message_start_exec)
  SharedDtor();
}

void message_start_exec::SharedDtor() {
}

void message_start_exec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_start_exec& message_start_exec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_start_exec_message_2eproto.base);
  return *internal_default_instance();
}


void message_start_exec::Clear() {
// @@protoc_insertion_point(message_clear_start:message_start_exec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  breakpoints_.Clear();
  inputs_.Clear();
  skips_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stop_) -
        reinterpret_cast<char*>(&start_)) + sizeof(stop_));
    size_chunks_ = 1000u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_start_exec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 size_chunks = 3 [default = 1000];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_size_chunks(&has_bits);
          size_chunks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 breakpoints = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_breakpoints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_breakpoints(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .configuration.input_t inputs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated uint64 skips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_skips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 48);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_skips(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_start_exec::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_start_exec)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 stop = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size_chunks = 3 [default = 1000];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_size_chunks(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_chunks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 breakpoints = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_breakpoints())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_breakpoints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .configuration.input_t inputs = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 skips = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_skips())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_skips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_start_exec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_start_exec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_start_exec::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_start_exec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 start = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // required uint64 stop = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->stop(), output);
  }

  // optional uint32 size_chunks = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->size_chunks(), output);
  }

  // repeated uint64 breakpoints = 4;
  for (int i = 0, n = this->breakpoints_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      4, this->breakpoints(i), output);
  }

  // repeated .configuration.input_t inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated uint64 skips = 6;
  for (int i = 0, n = this->skips_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      6, this->skips(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_start_exec)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_start_exec::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_start_exec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }

  // required uint64 stop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->stop(), target);
  }

  // optional uint32 size_chunks = 3 [default = 1000];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->size_chunks(), target);
  }

  // repeated uint64 breakpoints = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->breakpoints_, target);

  // repeated .configuration.input_t inputs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->inputs(static_cast<int>(i)), target);
  }

  // repeated uint64 skips = 6;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->skips_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_start_exec)
  return target;
}

size_t message_start_exec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:message_start_exec)
  size_t total_size = 0;

  if (has_start()) {
    // required uint64 start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start());
  }

  if (has_stop()) {
    // required uint64 stop = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stop());
  }

  return total_size;
}
size_t message_start_exec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_start_exec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 start = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start());

    // required uint64 stop = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->stop());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 breakpoints = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->breakpoints_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->breakpoints_size());
    total_size += data_size;
  }

  // repeated .configuration.input_t inputs = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated uint64 skips = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->skips_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->skips_size());
    total_size += data_size;
  }

  // optional uint32 size_chunks = 3 [default = 1000];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->size_chunks());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_start_exec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_start_exec)
  GOOGLE_DCHECK_NE(&from, this);
  const message_start_exec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_start_exec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_start_exec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_start_exec)
    MergeFrom(*source);
  }
}

void message_start_exec::MergeFrom(const message_start_exec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_start_exec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  breakpoints_.MergeFrom(from.breakpoints_);
  inputs_.MergeFrom(from.inputs_);
  skips_.MergeFrom(from.skips_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    if (cached_has_bits & 0x00000004u) {
      size_chunks_ = from.size_chunks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void message_start_exec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_start_exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_start_exec::CopyFrom(const message_start_exec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_start_exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_start_exec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->inputs())) return false;
  return true;
}

void message_start_exec::InternalSwap(message_start_exec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  breakpoints_.InternalSwap(&other->breakpoints_);
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  skips_.InternalSwap(&other->skips_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  swap(size_chunks_, other->size_chunks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_start_exec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_bp_reached::InitAsDefaultInstance() {
}
class message_bp_reached::_Internal {
 public:
  using HasBits = decltype(std::declval<message_bp_reached>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

message_bp_reached::message_bp_reached()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_bp_reached)
}
message_bp_reached::message_bp_reached(const message_bp_reached& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  addr_ = from.addr_;
  // @@protoc_insertion_point(copy_constructor:message_bp_reached)
}

void message_bp_reached::SharedCtor() {
  addr_ = PROTOBUF_ULONGLONG(0);
}

message_bp_reached::~message_bp_reached() {
  // @@protoc_insertion_point(destructor:message_bp_reached)
  SharedDtor();
}

void message_bp_reached::SharedDtor() {
}

void message_bp_reached::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_bp_reached& message_bp_reached::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_bp_reached_message_2eproto.base);
  return *internal_default_instance();
}


void message_bp_reached::Clear() {
// @@protoc_insertion_point(message_clear_start:message_bp_reached)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_bp_reached::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_bp_reached::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_bp_reached)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_bp_reached)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_bp_reached)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_bp_reached::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_bp_reached)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_bp_reached)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_bp_reached::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_bp_reached)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_bp_reached)
  return target;
}

size_t message_bp_reached::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_bp_reached)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint64 addr = 1;
  if (has_addr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_bp_reached::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_bp_reached)
  GOOGLE_DCHECK_NE(&from, this);
  const message_bp_reached* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_bp_reached>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_bp_reached)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_bp_reached)
    MergeFrom(*source);
  }
}

void message_bp_reached::MergeFrom(const message_bp_reached& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_bp_reached)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_addr()) {
    set_addr(from.addr());
  }
}

void message_bp_reached::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_bp_reached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_bp_reached::CopyFrom(const message_bp_reached& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_bp_reached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_bp_reached::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void message_bp_reached::InternalSwap(message_bp_reached* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(addr_, other->addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_bp_reached::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_patch::InitAsDefaultInstance() {
}
class message_patch::_Internal {
 public:
  using HasBits = decltype(std::declval<message_patch>()._has_bits_);
};

void message_patch::clear_patch() {
  patch_.Clear();
}
message_patch::message_patch()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_patch)
}
message_patch::message_patch(const message_patch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      patch_(from.patch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message_patch)
}

void message_patch::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_patch_message_2eproto.base);
}

message_patch::~message_patch() {
  // @@protoc_insertion_point(destructor:message_patch)
  SharedDtor();
}

void message_patch::SharedDtor() {
}

void message_patch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_patch& message_patch::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_patch_message_2eproto.base);
  return *internal_default_instance();
}


void message_patch::Clear() {
// @@protoc_insertion_point(message_clear_start:message_patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  patch_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_patch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .configuration.input_t patch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_patch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_patch::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_patch)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .configuration.input_t patch = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_patch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_patch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_patch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_patch::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .configuration.input_t patch = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patch_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->patch(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_patch)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_patch::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_patch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .configuration.input_t patch = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->patch_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->patch(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_patch)
  return target;
}

size_t message_patch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_patch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .configuration.input_t patch = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->patch_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->patch(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_patch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_patch)
  GOOGLE_DCHECK_NE(&from, this);
  const message_patch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_patch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_patch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_patch)
    MergeFrom(*source);
  }
}

void message_patch::MergeFrom(const message_patch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_patch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  patch_.MergeFrom(from.patch_);
}

void message_patch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_patch::CopyFrom(const message_patch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_patch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_patch::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->patch())) return false;
  return true;
}

void message_patch::InternalSwap(message_patch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&patch_)->InternalSwap(CastToBase(&other->patch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata message_patch::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_infos::InitAsDefaultInstance() {
}
class message_infos::_Internal {
 public:
  using HasBits = decltype(std::declval<message_infos>()._has_bits_);
  static void set_has_nb_workers(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

message_infos::message_infos()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_infos)
}
message_infos::message_infos(const message_infos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      analyses_(from.analyses_),
      solvers_(from.solvers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nb_workers_ = from.nb_workers_;
  // @@protoc_insertion_point(copy_constructor:message_infos)
}

void message_infos::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_infos_message_2eproto.base);
  nb_workers_ = 0u;
}

message_infos::~message_infos() {
  // @@protoc_insertion_point(destructor:message_infos)
  SharedDtor();
}

void message_infos::SharedDtor() {
}

void message_infos::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_infos& message_infos::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_infos_message_2eproto.base);
  return *internal_default_instance();
}


void message_infos::Clear() {
// @@protoc_insertion_point(message_clear_start:message_infos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  analyses_.Clear();
  solvers_.Clear();
  nb_workers_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_infos::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 nb_workers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_nb_workers(&has_bits);
          nb_workers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string analyses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_analyses(), ptr, ctx, "message_infos.analyses");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 18);
        } else goto handle_unusual;
        continue;
      // repeated string solvers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_solvers(), ptr, ctx, "message_infos.solvers");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 26);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_infos::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_infos)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 nb_workers = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_nb_workers(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nb_workers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string analyses = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_analyses()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->analyses(this->analyses_size() - 1).data(),
            static_cast<int>(this->analyses(this->analyses_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_infos.analyses");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string solvers = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_solvers()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->solvers(this->solvers_size() - 1).data(),
            static_cast<int>(this->solvers(this->solvers_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_infos.solvers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_infos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_infos)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_infos::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_infos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 nb_workers = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->nb_workers(), output);
  }

  // repeated string analyses = 2;
  for (int i = 0, n = this->analyses_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->analyses(i).data(), static_cast<int>(this->analyses(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_infos.analyses");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      2, this->analyses(i), output);
  }

  // repeated string solvers = 3;
  for (int i = 0, n = this->solvers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solvers(i).data(), static_cast<int>(this->solvers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_infos.solvers");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      3, this->solvers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_infos)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_infos::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_infos)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 nb_workers = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->nb_workers(), target);
  }

  // repeated string analyses = 2;
  for (int i = 0, n = this->analyses_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->analyses(i).data(), static_cast<int>(this->analyses(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_infos.analyses");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(2, this->analyses(i), target);
  }

  // repeated string solvers = 3;
  for (int i = 0, n = this->solvers_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->solvers(i).data(), static_cast<int>(this->solvers(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_infos.solvers");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(3, this->solvers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_infos)
  return target;
}

size_t message_infos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_infos)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 nb_workers = 1;
  if (has_nb_workers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->nb_workers());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string analyses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->analyses_size());
  for (int i = 0, n = this->analyses_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->analyses(i));
  }

  // repeated string solvers = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->solvers_size());
  for (int i = 0, n = this->solvers_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->solvers(i));
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_infos::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_infos)
  GOOGLE_DCHECK_NE(&from, this);
  const message_infos* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_infos>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_infos)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_infos)
    MergeFrom(*source);
  }
}

void message_infos::MergeFrom(const message_infos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_infos)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  analyses_.MergeFrom(from.analyses_);
  solvers_.MergeFrom(from.solvers_);
  if (from.has_nb_workers()) {
    set_nb_workers(from.nb_workers());
  }
}

void message_infos::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_infos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_infos::CopyFrom(const message_infos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_infos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_infos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void message_infos::InternalSwap(message_infos* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  analyses_.InternalSwap(CastToBase(&other->analyses_));
  solvers_.InternalSwap(CastToBase(&other->solvers_));
  swap(nb_workers_, other->nb_workers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_infos::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_decode_instr_instr_entry::InitAsDefaultInstance() {
}
class message_decode_instr_instr_entry::_Internal {
 public:
  using HasBits = decltype(std::declval<message_decode_instr_instr_entry>()._has_bits_);
  static void set_has_instr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_base_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

message_decode_instr_instr_entry::message_decode_instr_instr_entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_decode_instr.instr_entry)
}
message_decode_instr_instr_entry::message_decode_instr_instr_entry(const message_decode_instr_instr_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  instr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_instr()) {
    instr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instr_);
  }
  base_addr_ = from.base_addr_;
  // @@protoc_insertion_point(copy_constructor:message_decode_instr.instr_entry)
}

void message_decode_instr_instr_entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_decode_instr_instr_entry_message_2eproto.base);
  instr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_addr_ = PROTOBUF_ULONGLONG(0);
}

message_decode_instr_instr_entry::~message_decode_instr_instr_entry() {
  // @@protoc_insertion_point(destructor:message_decode_instr.instr_entry)
  SharedDtor();
}

void message_decode_instr_instr_entry::SharedDtor() {
  instr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void message_decode_instr_instr_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_decode_instr_instr_entry& message_decode_instr_instr_entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_decode_instr_instr_entry_message_2eproto.base);
  return *internal_default_instance();
}


void message_decode_instr_instr_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:message_decode_instr.instr_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    instr_.ClearNonDefaultToEmptyNoArena();
  }
  base_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_decode_instr_instr_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string instr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_instr(), ptr, ctx, "message_decode_instr.instr_entry.instr");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 base_addr = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_base_addr(&has_bits);
          base_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_decode_instr_instr_entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_decode_instr.instr_entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string instr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_instr()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->instr().data(), static_cast<int>(this->instr().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_decode_instr.instr_entry.instr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 base_addr = 2 [default = 0];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_base_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &base_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_decode_instr.instr_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_decode_instr.instr_entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_decode_instr_instr_entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_decode_instr.instr_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string instr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instr().data(), static_cast<int>(this->instr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_decode_instr.instr_entry.instr");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->instr(), output);
  }

  // optional uint64 base_addr = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->base_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_decode_instr.instr_entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_decode_instr_instr_entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_decode_instr.instr_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string instr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->instr().data(), static_cast<int>(this->instr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_decode_instr.instr_entry.instr");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->instr(), target);
  }

  // optional uint64 base_addr = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->base_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_decode_instr.instr_entry)
  return target;
}

size_t message_decode_instr_instr_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_decode_instr.instr_entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string instr = 1;
  if (has_instr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->instr());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 base_addr = 2 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->base_addr());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_decode_instr_instr_entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_decode_instr.instr_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const message_decode_instr_instr_entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_decode_instr_instr_entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_decode_instr.instr_entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_decode_instr.instr_entry)
    MergeFrom(*source);
  }
}

void message_decode_instr_instr_entry::MergeFrom(const message_decode_instr_instr_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_decode_instr.instr_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      instr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.instr_);
    }
    if (cached_has_bits & 0x00000002u) {
      base_addr_ = from.base_addr_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void message_decode_instr_instr_entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_decode_instr.instr_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_decode_instr_instr_entry::CopyFrom(const message_decode_instr_instr_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_decode_instr.instr_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_decode_instr_instr_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void message_decode_instr_instr_entry::InternalSwap(message_decode_instr_instr_entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  instr_.Swap(&other->instr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(base_addr_, other->base_addr_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_decode_instr_instr_entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_decode_instr::InitAsDefaultInstance() {
}
class message_decode_instr::_Internal {
 public:
  using HasBits = decltype(std::declval<message_decode_instr>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_irkind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

message_decode_instr::message_decode_instr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_decode_instr)
}
message_decode_instr::message_decode_instr(const message_decode_instr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      instrs_(from.instrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&kind_, &from.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&irkind_) -
    reinterpret_cast<char*>(&kind_)) + sizeof(irkind_));
  // @@protoc_insertion_point(copy_constructor:message_decode_instr)
}

void message_decode_instr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_decode_instr_message_2eproto.base);
  kind_ = 2;
  irkind_ = 1;
}

message_decode_instr::~message_decode_instr() {
  // @@protoc_insertion_point(destructor:message_decode_instr)
  SharedDtor();
}

void message_decode_instr::SharedDtor() {
}

void message_decode_instr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_decode_instr& message_decode_instr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_decode_instr_message_2eproto.base);
  return *internal_default_instance();
}


void message_decode_instr::Clear() {
// @@protoc_insertion_point(message_clear_start:message_decode_instr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    kind_ = 2;
    irkind_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_decode_instr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .message_decode_instr.instr_entry instrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_instrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      // optional .message_decode_instr.bin_kind kind = 2 [default = BIN];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::message_decode_instr_bin_kind_IsValid(val))) {
            set_kind(static_cast<::message_decode_instr_bin_kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.ir_kind_t irkind = 3 [default = DBA];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::ir_kind_t_IsValid(val))) {
            set_irkind(static_cast<::common::ir_kind_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_decode_instr::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_decode_instr)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message_decode_instr.instr_entry instrs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_instrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .message_decode_instr.bin_kind kind = 2 [default = BIN];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_decode_instr_bin_kind_IsValid(value)) {
            set_kind(static_cast< ::message_decode_instr_bin_kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.ir_kind_t irkind = 3 [default = DBA];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::ir_kind_t_IsValid(value)) {
            set_irkind(static_cast< ::common::ir_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_decode_instr)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_decode_instr)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_decode_instr::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_decode_instr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message_decode_instr.instr_entry instrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instrs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->instrs(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .message_decode_instr.bin_kind kind = 2 [default = BIN];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // optional .common.ir_kind_t irkind = 3 [default = DBA];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->irkind(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_decode_instr)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_decode_instr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_decode_instr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message_decode_instr.instr_entry instrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instrs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->instrs(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .message_decode_instr.bin_kind kind = 2 [default = BIN];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // optional .common.ir_kind_t irkind = 3 [default = DBA];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->irkind(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_decode_instr)
  return target;
}

size_t message_decode_instr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_decode_instr)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message_decode_instr.instr_entry instrs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->instrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->instrs(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .message_decode_instr.bin_kind kind = 2 [default = BIN];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->kind());
    }

    // optional .common.ir_kind_t irkind = 3 [default = DBA];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->irkind());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_decode_instr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_decode_instr)
  GOOGLE_DCHECK_NE(&from, this);
  const message_decode_instr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_decode_instr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_decode_instr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_decode_instr)
    MergeFrom(*source);
  }
}

void message_decode_instr::MergeFrom(const message_decode_instr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_decode_instr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrs_.MergeFrom(from.instrs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      irkind_ = from.irkind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void message_decode_instr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_decode_instr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_decode_instr::CopyFrom(const message_decode_instr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_decode_instr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_decode_instr::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->instrs())) return false;
  return true;
}

void message_decode_instr::InternalSwap(message_decode_instr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&instrs_)->InternalSwap(CastToBase(&other->instrs_));
  swap(kind_, other->kind_);
  swap(irkind_, other->irkind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_decode_instr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_decode_instr_reply_instr_entry::InitAsDefaultInstance() {
  ::_message_decode_instr_reply_instr_entry_default_instance_.dba_instrs_ = const_cast< ::dba::dba_list*>(
      ::dba::dba_list::internal_default_instance());
}
class message_decode_instr_reply_instr_entry::_Internal {
 public:
  using HasBits = decltype(std::declval<message_decode_instr_reply_instr_entry>()._has_bits_);
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_irkind(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::dba::dba_list& dba_instrs(const message_decode_instr_reply_instr_entry* msg);
};

const ::dba::dba_list&
message_decode_instr_reply_instr_entry::_Internal::dba_instrs(const message_decode_instr_reply_instr_entry* msg) {
  return *msg->instrs_cnt_.dba_instrs_;
}
void message_decode_instr_reply_instr_entry::set_allocated_dba_instrs(::dba::dba_list* dba_instrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_instrs_cnt();
  if (dba_instrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dba_instrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dba_instrs, submessage_arena);
    }
    set_has_dba_instrs();
    instrs_cnt_.dba_instrs_ = dba_instrs;
  }
  // @@protoc_insertion_point(field_set_allocated:message_decode_instr_reply.instr_entry.dba_instrs)
}
void message_decode_instr_reply_instr_entry::clear_dba_instrs() {
  if (has_dba_instrs()) {
    delete instrs_cnt_.dba_instrs_;
    clear_has_instrs_cnt();
  }
}
message_decode_instr_reply_instr_entry::message_decode_instr_reply_instr_entry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_decode_instr_reply.instr_entry)
}
message_decode_instr_reply_instr_entry::message_decode_instr_reply_instr_entry(const message_decode_instr_reply_instr_entry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_opcode()) {
    opcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opcode_);
  }
  irkind_ = from.irkind_;
  clear_has_instrs_cnt();
  switch (from.instrs_cnt_case()) {
    case kDbaInstrs: {
      mutable_dba_instrs()->::dba::dba_list::MergeFrom(from.dba_instrs());
      break;
    }
    case INSTRS_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:message_decode_instr_reply.instr_entry)
}

void message_decode_instr_reply_instr_entry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_decode_instr_reply_instr_entry_message_2eproto.base);
  opcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  irkind_ = 1;
  clear_has_instrs_cnt();
}

message_decode_instr_reply_instr_entry::~message_decode_instr_reply_instr_entry() {
  // @@protoc_insertion_point(destructor:message_decode_instr_reply.instr_entry)
  SharedDtor();
}

void message_decode_instr_reply_instr_entry::SharedDtor() {
  opcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_instrs_cnt()) {
    clear_instrs_cnt();
  }
}

void message_decode_instr_reply_instr_entry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_decode_instr_reply_instr_entry& message_decode_instr_reply_instr_entry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_decode_instr_reply_instr_entry_message_2eproto.base);
  return *internal_default_instance();
}


void message_decode_instr_reply_instr_entry::clear_instrs_cnt() {
// @@protoc_insertion_point(one_of_clear_start:message_decode_instr_reply.instr_entry)
  switch (instrs_cnt_case()) {
    case kDbaInstrs: {
      delete instrs_cnt_.dba_instrs_;
      break;
    }
    case INSTRS_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTRS_CNT_NOT_SET;
}


void message_decode_instr_reply_instr_entry::Clear() {
// @@protoc_insertion_point(message_clear_start:message_decode_instr_reply.instr_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opcode_.ClearNonDefaultToEmptyNoArena();
    }
    irkind_ = 1;
  }
  clear_instrs_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_decode_instr_reply_instr_entry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string opcode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_opcode(), ptr, ctx, "message_decode_instr_reply.instr_entry.opcode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .common.ir_kind_t irkind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::ir_kind_t_IsValid(val))) {
            set_irkind(static_cast<::common::ir_kind_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .dba.dba_list dba_instrs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_dba_instrs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_decode_instr_reply_instr_entry::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_decode_instr_reply.instr_entry)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string opcode = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opcode().data(), static_cast<int>(this->opcode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_decode_instr_reply.instr_entry.opcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.ir_kind_t irkind = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::ir_kind_t_IsValid(value)) {
            set_irkind(static_cast< ::common::ir_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .dba.dba_list dba_instrs = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_dba_instrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_decode_instr_reply.instr_entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_decode_instr_reply.instr_entry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_decode_instr_reply_instr_entry::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_decode_instr_reply.instr_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), static_cast<int>(this->opcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_decode_instr_reply.instr_entry.opcode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->opcode(), output);
  }

  // required .common.ir_kind_t irkind = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->irkind(), output);
  }

  // optional .dba.dba_list dba_instrs = 3;
  if (has_dba_instrs()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::dba_instrs(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_decode_instr_reply.instr_entry)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_decode_instr_reply_instr_entry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_decode_instr_reply.instr_entry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string opcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), static_cast<int>(this->opcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_decode_instr_reply.instr_entry.opcode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->opcode(), target);
  }

  // required .common.ir_kind_t irkind = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->irkind(), target);
  }

  // optional .dba.dba_list dba_instrs = 3;
  if (has_dba_instrs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::dba_instrs(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_decode_instr_reply.instr_entry)
  return target;
}

size_t message_decode_instr_reply_instr_entry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:message_decode_instr_reply.instr_entry)
  size_t total_size = 0;

  if (has_opcode()) {
    // required string opcode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->opcode());
  }

  if (has_irkind()) {
    // required .common.ir_kind_t irkind = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->irkind());
  }

  return total_size;
}
size_t message_decode_instr_reply_instr_entry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_decode_instr_reply.instr_entry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string opcode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->opcode());

    // required .common.ir_kind_t irkind = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->irkind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (instrs_cnt_case()) {
    // optional .dba.dba_list dba_instrs = 3;
    case kDbaInstrs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instrs_cnt_.dba_instrs_);
      break;
    }
    case INSTRS_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_decode_instr_reply_instr_entry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_decode_instr_reply.instr_entry)
  GOOGLE_DCHECK_NE(&from, this);
  const message_decode_instr_reply_instr_entry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_decode_instr_reply_instr_entry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_decode_instr_reply.instr_entry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_decode_instr_reply.instr_entry)
    MergeFrom(*source);
  }
}

void message_decode_instr_reply_instr_entry::MergeFrom(const message_decode_instr_reply_instr_entry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_decode_instr_reply.instr_entry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      opcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opcode_);
    }
    if (cached_has_bits & 0x00000002u) {
      irkind_ = from.irkind_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.instrs_cnt_case()) {
    case kDbaInstrs: {
      mutable_dba_instrs()->::dba::dba_list::MergeFrom(from.dba_instrs());
      break;
    }
    case INSTRS_CNT_NOT_SET: {
      break;
    }
  }
}

void message_decode_instr_reply_instr_entry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_decode_instr_reply.instr_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_decode_instr_reply_instr_entry::CopyFrom(const message_decode_instr_reply_instr_entry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_decode_instr_reply.instr_entry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_decode_instr_reply_instr_entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  switch (instrs_cnt_case()) {
    case kDbaInstrs: {
      if (has_dba_instrs()) {
        if (!this->dba_instrs().IsInitialized()) return false;
      }
      break;
    }
    case INSTRS_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void message_decode_instr_reply_instr_entry::InternalSwap(message_decode_instr_reply_instr_entry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opcode_.Swap(&other->opcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(irkind_, other->irkind_);
  swap(instrs_cnt_, other->instrs_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_decode_instr_reply_instr_entry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_decode_instr_reply::InitAsDefaultInstance() {
}
class message_decode_instr_reply::_Internal {
 public:
  using HasBits = decltype(std::declval<message_decode_instr_reply>()._has_bits_);
};

message_decode_instr_reply::message_decode_instr_reply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_decode_instr_reply)
}
message_decode_instr_reply::message_decode_instr_reply(const message_decode_instr_reply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      instrs_(from.instrs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:message_decode_instr_reply)
}

void message_decode_instr_reply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_decode_instr_reply_message_2eproto.base);
}

message_decode_instr_reply::~message_decode_instr_reply() {
  // @@protoc_insertion_point(destructor:message_decode_instr_reply)
  SharedDtor();
}

void message_decode_instr_reply::SharedDtor() {
}

void message_decode_instr_reply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_decode_instr_reply& message_decode_instr_reply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_decode_instr_reply_message_2eproto.base);
  return *internal_default_instance();
}


void message_decode_instr_reply::Clear() {
// @@protoc_insertion_point(message_clear_start:message_decode_instr_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instrs_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_decode_instr_reply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .message_decode_instr_reply.instr_entry instrs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_instrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_decode_instr_reply::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_decode_instr_reply)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .message_decode_instr_reply.instr_entry instrs = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_instrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_decode_instr_reply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_decode_instr_reply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_decode_instr_reply::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_decode_instr_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message_decode_instr_reply.instr_entry instrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instrs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->instrs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_decode_instr_reply)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_decode_instr_reply::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_decode_instr_reply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .message_decode_instr_reply.instr_entry instrs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instrs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->instrs(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_decode_instr_reply)
  return target;
}

size_t message_decode_instr_reply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_decode_instr_reply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .message_decode_instr_reply.instr_entry instrs = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->instrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->instrs(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_decode_instr_reply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_decode_instr_reply)
  GOOGLE_DCHECK_NE(&from, this);
  const message_decode_instr_reply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_decode_instr_reply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_decode_instr_reply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_decode_instr_reply)
    MergeFrom(*source);
  }
}

void message_decode_instr_reply::MergeFrom(const message_decode_instr_reply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_decode_instr_reply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instrs_.MergeFrom(from.instrs_);
}

void message_decode_instr_reply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_decode_instr_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_decode_instr_reply::CopyFrom(const message_decode_instr_reply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_decode_instr_reply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_decode_instr_reply::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->instrs())) return false;
  return true;
}

void message_decode_instr_reply::InternalSwap(message_decode_instr_reply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&instrs_)->InternalSwap(CastToBase(&other->instrs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata message_decode_instr_reply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_start_symb_exec::InitAsDefaultInstance() {
  ::_message_start_symb_exec_default_instance_._instance.get_mutable()->config_ = const_cast< ::configuration::configuration*>(
      ::configuration::configuration::internal_default_instance());
}
class message_start_symb_exec::_Internal {
 public:
  using HasBits = decltype(std::declval<message_start_symb_exec>()._has_bits_);
  static void set_has_trace_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solver(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::configuration::configuration& config(const message_start_symb_exec* msg);
  static void set_has_config(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_irkind(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_formula_optim_cstfold(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_formula_optim_rebase(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_formula_optim_row(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_verbose(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_addr_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_predicate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_trace_filename(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::configuration::configuration&
message_start_symb_exec::_Internal::config(const message_start_symb_exec* msg) {
  return *msg->config_;
}
void message_start_symb_exec::clear_config() {
  if (config_ != nullptr) config_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
message_start_symb_exec::message_start_symb_exec()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_start_symb_exec)
}
message_start_symb_exec::message_start_symb_exec(const message_start_symb_exec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_predicate()) {
    predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
  }
  trace_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_trace_filename()) {
    trace_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_filename_);
  }
  if (from.has_config()) {
    config_ = new ::configuration::configuration(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&formula_optim_cstfold_, &from.formula_optim_cstfold_,
    static_cast<size_t>(reinterpret_cast<char*>(&solver_) -
    reinterpret_cast<char*>(&formula_optim_cstfold_)) + sizeof(solver_));
  // @@protoc_insertion_point(copy_constructor:message_start_symb_exec)
}

void message_start_symb_exec::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_start_symb_exec_message_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addr_predicate_) -
      reinterpret_cast<char*>(&config_)) + sizeof(addr_predicate_));
  irkind_ = 1;
  trace_type_ = 1;
  solver_ = 1;
}

message_start_symb_exec::~message_start_symb_exec() {
  // @@protoc_insertion_point(destructor:message_start_symb_exec)
  SharedDtor();
}

void message_start_symb_exec::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  predicate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete config_;
}

void message_start_symb_exec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_start_symb_exec& message_start_symb_exec::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_start_symb_exec_message_2eproto.base);
  return *internal_default_instance();
}


void message_start_symb_exec::Clear() {
// @@protoc_insertion_point(message_clear_start:message_start_symb_exec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      predicate_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      trace_filename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(config_ != nullptr);
      config_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&formula_optim_cstfold_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&verbose_) -
        reinterpret_cast<char*>(&formula_optim_cstfold_)) + sizeof(verbose_));
  }
  if (cached_has_bits & 0x00000f00u) {
    addr_predicate_ = PROTOBUF_ULONGLONG(0);
    irkind_ = 1;
    trace_type_ = 1;
    solver_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_start_symb_exec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .message_start_symb_exec.trace_kind trace_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::message_start_symb_exec_trace_kind_IsValid(val))) {
            set_trace_type(static_cast<::message_start_symb_exec_trace_kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "message_start_symb_exec.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .common.solver_t solver = 3 [default = Z3];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::solver_t_IsValid(val))) {
            set_solver(static_cast<::common::solver_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .configuration.configuration config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .common.ir_kind_t irkind = 5 [default = DBA];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::ir_kind_t_IsValid(val))) {
            set_irkind(static_cast<::common::ir_kind_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool formula_optim_cstfold = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_formula_optim_cstfold(&has_bits);
          formula_optim_cstfold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool formula_optim_rebase = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_formula_optim_rebase(&has_bits);
          formula_optim_rebase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool formula_optim_row = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_formula_optim_row(&has_bits);
          formula_optim_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 verbose = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_verbose(&has_bits);
          verbose_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 addr_predicate = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_addr_predicate(&has_bits);
          addr_predicate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string predicate = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_predicate(), ptr, ctx, "message_start_symb_exec.predicate");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string trace_filename = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_trace_filename(), ptr, ctx, "message_start_symb_exec.trace_filename");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_start_symb_exec::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_start_symb_exec)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message_start_symb_exec.trace_kind trace_type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_start_symb_exec_trace_kind_IsValid(value)) {
            set_trace_type(static_cast< ::message_start_symb_exec_trace_kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_start_symb_exec.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.solver_t solver = 3 [default = Z3];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::solver_t_IsValid(value)) {
            set_solver(static_cast< ::common::solver_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .configuration.configuration config = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.ir_kind_t irkind = 5 [default = DBA];
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::ir_kind_t_IsValid(value)) {
            set_irkind(static_cast< ::common::ir_kind_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool formula_optim_cstfold = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_formula_optim_cstfold(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &formula_optim_cstfold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool formula_optim_rebase = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_formula_optim_rebase(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &formula_optim_rebase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool formula_optim_row = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_formula_optim_row(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &formula_optim_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 verbose = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_verbose(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verbose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 addr_predicate = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (80 & 0xFF)) {
          _Internal::set_has_addr_predicate(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_predicate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string predicate = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_predicate()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predicate().data(), static_cast<int>(this->predicate().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_start_symb_exec.predicate");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string trace_filename = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_trace_filename()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->trace_filename().data(), static_cast<int>(this->trace_filename().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_start_symb_exec.trace_filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_start_symb_exec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_start_symb_exec)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_start_symb_exec::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_start_symb_exec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .message_start_symb_exec.trace_kind trace_type = 1;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->trace_type(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_start_symb_exec.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .common.solver_t solver = 3 [default = Z3];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->solver(), output);
  }

  // optional .configuration.configuration config = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::config(this), output);
  }

  // optional .common.ir_kind_t irkind = 5 [default = DBA];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      5, this->irkind(), output);
  }

  // optional bool formula_optim_cstfold = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(6, this->formula_optim_cstfold(), output);
  }

  // optional bool formula_optim_rebase = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(7, this->formula_optim_rebase(), output);
  }

  // optional bool formula_optim_row = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(8, this->formula_optim_row(), output);
  }

  // required uint32 verbose = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->verbose(), output);
  }

  // optional uint64 addr_predicate = 10;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(10, this->addr_predicate(), output);
  }

  // optional string predicate = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predicate().data(), static_cast<int>(this->predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_start_symb_exec.predicate");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->predicate(), output);
  }

  // optional string trace_filename = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_filename().data(), static_cast<int>(this->trace_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_start_symb_exec.trace_filename");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->trace_filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_start_symb_exec)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_start_symb_exec::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_start_symb_exec)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .message_start_symb_exec.trace_kind trace_type = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->trace_type(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_start_symb_exec.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .common.solver_t solver = 3 [default = Z3];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->solver(), target);
  }

  // optional .configuration.configuration config = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::config(this), target);
  }

  // optional .common.ir_kind_t irkind = 5 [default = DBA];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->irkind(), target);
  }

  // optional bool formula_optim_cstfold = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->formula_optim_cstfold(), target);
  }

  // optional bool formula_optim_rebase = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->formula_optim_rebase(), target);
  }

  // optional bool formula_optim_row = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->formula_optim_row(), target);
  }

  // required uint32 verbose = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->verbose(), target);
  }

  // optional uint64 addr_predicate = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(10, this->addr_predicate(), target);
  }

  // optional string predicate = 11;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predicate().data(), static_cast<int>(this->predicate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_start_symb_exec.predicate");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        11, this->predicate(), target);
  }

  // optional string trace_filename = 12;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->trace_filename().data(), static_cast<int>(this->trace_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_start_symb_exec.trace_filename");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        12, this->trace_filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_start_symb_exec)
  return target;
}

size_t message_start_symb_exec::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:message_start_symb_exec)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_verbose()) {
    // required uint32 verbose = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->verbose());
  }

  if (has_trace_type()) {
    // required .message_start_symb_exec.trace_kind trace_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trace_type());
  }

  return total_size;
}
size_t message_start_symb_exec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_start_symb_exec)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000481) ^ 0x00000481) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 verbose = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->verbose());

    // required .message_start_symb_exec.trace_kind trace_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trace_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007eu) {
    // optional string predicate = 11;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->predicate());
    }

    // optional string trace_filename = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->trace_filename());
    }

    // optional .configuration.configuration config = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *config_);
    }

    // optional bool formula_optim_cstfold = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool formula_optim_rebase = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool formula_optim_row = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint64 addr_predicate = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->addr_predicate());
    }

    // optional .common.ir_kind_t irkind = 5 [default = DBA];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->irkind());
    }

  }
  // optional .common.solver_t solver = 3 [default = Z3];
  if (cached_has_bits & 0x00000800u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->solver());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_start_symb_exec::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_start_symb_exec)
  GOOGLE_DCHECK_NE(&from, this);
  const message_start_symb_exec* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_start_symb_exec>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_start_symb_exec)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_start_symb_exec)
    MergeFrom(*source);
  }
}

void message_start_symb_exec::MergeFrom(const message_start_symb_exec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_start_symb_exec)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      predicate_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.predicate_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      trace_filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.trace_filename_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_config()->::configuration::configuration::MergeFrom(from.config());
    }
    if (cached_has_bits & 0x00000010u) {
      formula_optim_cstfold_ = from.formula_optim_cstfold_;
    }
    if (cached_has_bits & 0x00000020u) {
      formula_optim_rebase_ = from.formula_optim_rebase_;
    }
    if (cached_has_bits & 0x00000040u) {
      formula_optim_row_ = from.formula_optim_row_;
    }
    if (cached_has_bits & 0x00000080u) {
      verbose_ = from.verbose_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      addr_predicate_ = from.addr_predicate_;
    }
    if (cached_has_bits & 0x00000200u) {
      irkind_ = from.irkind_;
    }
    if (cached_has_bits & 0x00000400u) {
      trace_type_ = from.trace_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      solver_ = from.solver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void message_start_symb_exec::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_start_symb_exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_start_symb_exec::CopyFrom(const message_start_symb_exec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_start_symb_exec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_start_symb_exec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000481) != 0x00000481) return false;
  if (has_config()) {
    if (!this->config_->IsInitialized()) return false;
  }
  return true;
}

void message_start_symb_exec::InternalSwap(message_start_symb_exec* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  predicate_.Swap(&other->predicate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trace_filename_.Swap(&other->trace_filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(config_, other->config_);
  swap(formula_optim_cstfold_, other->formula_optim_cstfold_);
  swap(formula_optim_rebase_, other->formula_optim_rebase_);
  swap(formula_optim_row_, other->formula_optim_row_);
  swap(verbose_, other->verbose_);
  swap(addr_predicate_, other->addr_predicate_);
  swap(irkind_, other->irkind_);
  swap(trace_type_, other->trace_type_);
  swap(solver_, other->solver_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_start_symb_exec::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void message_output::InitAsDefaultInstance() {
}
class message_output::_Internal {
 public:
  using HasBits = decltype(std::declval<message_output>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ram_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ram_free(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ram_available(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

message_output::message_output()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message_output)
}
message_output::message_output(const message_output& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&ram_total_, &from.ram_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&ram_total_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:message_output)
}

void message_output::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_message_output_message_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ram_total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ram_available_) -
      reinterpret_cast<char*>(&ram_total_)) + sizeof(ram_available_));
  type_ = 1;
}

message_output::~message_output() {
  // @@protoc_insertion_point(destructor:message_output)
  SharedDtor();
}

void message_output::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void message_output::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const message_output& message_output::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_message_output_message_2eproto.base);
  return *internal_default_instance();
}


void message_output::Clear() {
// @@protoc_insertion_point(message_clear_start:message_output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&ram_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ram_available_) -
        reinterpret_cast<char*>(&ram_total_)) + sizeof(ram_available_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* message_output::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .message_output.output_kind type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::message_output_output_kind_IsValid(val))) {
            set_type(static_cast<::message_output_output_kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_message(), ptr, ctx, "message_output.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ram_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ram_total(&has_bits);
          ram_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ram_free = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_ram_free(&has_bits);
          ram_free_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ram_available = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_ram_available(&has_bits);
          ram_available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool message_output::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:message_output)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .message_output.output_kind type = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::message_output_output_kind_IsValid(value)) {
            set_type(static_cast< ::message_output_output_kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string message = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "message_output.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ram_total = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ram_total(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ram_total_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ram_free = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_ram_free(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ram_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ram_available = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_ram_available(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ram_available_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:message_output)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:message_output)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void message_output::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:message_output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .message_output.output_kind type = 1;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_output.message");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional uint32 ram_total = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ram_total(), output);
  }

  // optional uint32 ram_free = 4;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->ram_free(), output);
  }

  // optional uint32 ram_available = 5;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->ram_available(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:message_output)
}

::PROTOBUF_NAMESPACE_ID::uint8* message_output::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:message_output)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .message_output.output_kind type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "message_output.message");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional uint32 ram_total = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->ram_total(), target);
  }

  // optional uint32 ram_free = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->ram_free(), target);
  }

  // optional uint32 ram_available = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->ram_available(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message_output)
  return target;
}

size_t message_output::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:message_output)
  size_t total_size = 0;

  if (has_message()) {
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());
  }

  if (has_type()) {
    // required .message_output.output_kind type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t message_output::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message_output)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000011) ^ 0x00000011) == 0) {  // All required fields are present.
    // required string message = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->message());

    // required .message_output.output_kind type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 ram_total = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ram_total());
    }

    // optional uint32 ram_free = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ram_free());
    }

    // optional uint32 ram_available = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ram_available());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void message_output::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message_output)
  GOOGLE_DCHECK_NE(&from, this);
  const message_output* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<message_output>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message_output)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message_output)
    MergeFrom(*source);
  }
}

void message_output::MergeFrom(const message_output& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message_output)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      ram_total_ = from.ram_total_;
    }
    if (cached_has_bits & 0x00000004u) {
      ram_free_ = from.ram_free_;
    }
    if (cached_has_bits & 0x00000008u) {
      ram_available_ = from.ram_available_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void message_output::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message_output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void message_output::CopyFrom(const message_output& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message_output)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool message_output::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000011) != 0x00000011) return false;
  return true;
}

void message_output::InternalSwap(message_output* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ram_total_, other->ram_total_);
  swap(ram_free_, other->ram_free_);
  swap(ram_available_, other->ram_available_);
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata message_output::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message_start_exec* Arena::CreateMaybeMessage< ::message_start_exec >(Arena* arena) {
  return Arena::CreateInternal< ::message_start_exec >(arena);
}
template<> PROTOBUF_NOINLINE ::message_bp_reached* Arena::CreateMaybeMessage< ::message_bp_reached >(Arena* arena) {
  return Arena::CreateInternal< ::message_bp_reached >(arena);
}
template<> PROTOBUF_NOINLINE ::message_patch* Arena::CreateMaybeMessage< ::message_patch >(Arena* arena) {
  return Arena::CreateInternal< ::message_patch >(arena);
}
template<> PROTOBUF_NOINLINE ::message_infos* Arena::CreateMaybeMessage< ::message_infos >(Arena* arena) {
  return Arena::CreateInternal< ::message_infos >(arena);
}
template<> PROTOBUF_NOINLINE ::message_decode_instr_instr_entry* Arena::CreateMaybeMessage< ::message_decode_instr_instr_entry >(Arena* arena) {
  return Arena::CreateInternal< ::message_decode_instr_instr_entry >(arena);
}
template<> PROTOBUF_NOINLINE ::message_decode_instr* Arena::CreateMaybeMessage< ::message_decode_instr >(Arena* arena) {
  return Arena::CreateInternal< ::message_decode_instr >(arena);
}
template<> PROTOBUF_NOINLINE ::message_decode_instr_reply_instr_entry* Arena::CreateMaybeMessage< ::message_decode_instr_reply_instr_entry >(Arena* arena) {
  return Arena::CreateInternal< ::message_decode_instr_reply_instr_entry >(arena);
}
template<> PROTOBUF_NOINLINE ::message_decode_instr_reply* Arena::CreateMaybeMessage< ::message_decode_instr_reply >(Arena* arena) {
  return Arena::CreateInternal< ::message_decode_instr_reply >(arena);
}
template<> PROTOBUF_NOINLINE ::message_start_symb_exec* Arena::CreateMaybeMessage< ::message_start_symb_exec >(Arena* arena) {
  return Arena::CreateInternal< ::message_start_symb_exec >(arena);
}
template<> PROTOBUF_NOINLINE ::message_output* Arena::CreateMaybeMessage< ::message_output >(Arena* arena) {
  return Arena::CreateInternal< ::message_output >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
