// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trace.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trace_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trace_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "dba.pb.h"
#include "common.pb.h"
#include "syscall.pb.h"
#include "libcall.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trace_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trace_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trace_2eproto;
namespace trace_format {
class body_t;
class body_tDefaultTypeInternal;
extern body_tDefaultTypeInternal _body_t_default_instance_;
class chunk_t;
class chunk_tDefaultTypeInternal;
extern chunk_tDefaultTypeInternal _chunk_t_default_instance_;
class header_t;
class header_tDefaultTypeInternal;
extern header_tDefaultTypeInternal _header_t_default_instance_;
class ins_con_info_t;
class ins_con_info_tDefaultTypeInternal;
extern ins_con_info_tDefaultTypeInternal _ins_con_info_t_default_instance_;
class instruction_t;
class instruction_tDefaultTypeInternal;
extern instruction_tDefaultTypeInternal _instruction_t_default_instance_;
class metadata_t;
class metadata_tDefaultTypeInternal;
extern metadata_tDefaultTypeInternal _metadata_t_default_instance_;
class metadata_t_exception_t;
class metadata_t_exception_tDefaultTypeInternal;
extern metadata_t_exception_tDefaultTypeInternal _metadata_t_exception_t_default_instance_;
class trace_t;
class trace_tDefaultTypeInternal;
extern trace_tDefaultTypeInternal _trace_t_default_instance_;
}  // namespace trace_format
PROTOBUF_NAMESPACE_OPEN
template<> ::trace_format::body_t* Arena::CreateMaybeMessage<::trace_format::body_t>(Arena*);
template<> ::trace_format::chunk_t* Arena::CreateMaybeMessage<::trace_format::chunk_t>(Arena*);
template<> ::trace_format::header_t* Arena::CreateMaybeMessage<::trace_format::header_t>(Arena*);
template<> ::trace_format::ins_con_info_t* Arena::CreateMaybeMessage<::trace_format::ins_con_info_t>(Arena*);
template<> ::trace_format::instruction_t* Arena::CreateMaybeMessage<::trace_format::instruction_t>(Arena*);
template<> ::trace_format::metadata_t* Arena::CreateMaybeMessage<::trace_format::metadata_t>(Arena*);
template<> ::trace_format::metadata_t_exception_t* Arena::CreateMaybeMessage<::trace_format::metadata_t_exception_t>(Arena*);
template<> ::trace_format::trace_t* Arena::CreateMaybeMessage<::trace_format::trace_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace trace_format {

enum header_t_architecture_t : int {
  header_t_architecture_t_X86 = 0,
  header_t_architecture_t_X86_64 = 1
};
bool header_t_architecture_t_IsValid(int value);
constexpr header_t_architecture_t header_t_architecture_t_architecture_t_MIN = header_t_architecture_t_X86;
constexpr header_t_architecture_t header_t_architecture_t_architecture_t_MAX = header_t_architecture_t_X86_64;
constexpr int header_t_architecture_t_architecture_t_ARRAYSIZE = header_t_architecture_t_architecture_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* header_t_architecture_t_descriptor();
template<typename T>
inline const std::string& header_t_architecture_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, header_t_architecture_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function header_t_architecture_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    header_t_architecture_t_descriptor(), enum_t_value);
}
inline bool header_t_architecture_t_Parse(
    const std::string& name, header_t_architecture_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<header_t_architecture_t>(
    header_t_architecture_t_descriptor(), name, value);
}
enum metadata_t_typeid_metadata_t : int {
  metadata_t_typeid_metadata_t_INVALID_METADATA = 0,
  metadata_t_typeid_metadata_t_EXCEPTION_TYPE = 1,
  metadata_t_typeid_metadata_t_MODULE_TYPE = 2,
  metadata_t_typeid_metadata_t_WAVE_TYPE = 3
};
bool metadata_t_typeid_metadata_t_IsValid(int value);
constexpr metadata_t_typeid_metadata_t metadata_t_typeid_metadata_t_typeid_metadata_t_MIN = metadata_t_typeid_metadata_t_INVALID_METADATA;
constexpr metadata_t_typeid_metadata_t metadata_t_typeid_metadata_t_typeid_metadata_t_MAX = metadata_t_typeid_metadata_t_WAVE_TYPE;
constexpr int metadata_t_typeid_metadata_t_typeid_metadata_t_ARRAYSIZE = metadata_t_typeid_metadata_t_typeid_metadata_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* metadata_t_typeid_metadata_t_descriptor();
template<typename T>
inline const std::string& metadata_t_typeid_metadata_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, metadata_t_typeid_metadata_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function metadata_t_typeid_metadata_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    metadata_t_typeid_metadata_t_descriptor(), enum_t_value);
}
inline bool metadata_t_typeid_metadata_t_Parse(
    const std::string& name, metadata_t_typeid_metadata_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<metadata_t_typeid_metadata_t>(
    metadata_t_typeid_metadata_t_descriptor(), name, value);
}
enum ins_con_info_t_typeid_con_info_t : int {
  ins_con_info_t_typeid_con_info_t_INVALID = 0,
  ins_con_info_t_typeid_con_info_t_REGREAD = 1,
  ins_con_info_t_typeid_con_info_t_REGWRITE = 2,
  ins_con_info_t_typeid_con_info_t_MEMLOAD = 3,
  ins_con_info_t_typeid_con_info_t_MEMSTORE = 4,
  ins_con_info_t_typeid_con_info_t_CALL = 5,
  ins_con_info_t_typeid_con_info_t_SYSCALL = 6,
  ins_con_info_t_typeid_con_info_t_NOT_RETRIEVED = 7,
  ins_con_info_t_typeid_con_info_t_NEXT_ADDRESS = 8,
  ins_con_info_t_typeid_con_info_t_COMMENT = 9,
  ins_con_info_t_typeid_con_info_t_WAVE = 10
};
bool ins_con_info_t_typeid_con_info_t_IsValid(int value);
constexpr ins_con_info_t_typeid_con_info_t ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MIN = ins_con_info_t_typeid_con_info_t_INVALID;
constexpr ins_con_info_t_typeid_con_info_t ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MAX = ins_con_info_t_typeid_con_info_t_WAVE;
constexpr int ins_con_info_t_typeid_con_info_t_typeid_con_info_t_ARRAYSIZE = ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ins_con_info_t_typeid_con_info_t_descriptor();
template<typename T>
inline const std::string& ins_con_info_t_typeid_con_info_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ins_con_info_t_typeid_con_info_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ins_con_info_t_typeid_con_info_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ins_con_info_t_typeid_con_info_t_descriptor(), enum_t_value);
}
inline bool ins_con_info_t_typeid_con_info_t_Parse(
    const std::string& name, ins_con_info_t_typeid_con_info_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ins_con_info_t_typeid_con_info_t>(
    ins_con_info_t_typeid_con_info_t_descriptor(), name, value);
}
enum body_t_typeid_body_t : int {
  body_t_typeid_body_t_METADATA = 0,
  body_t_typeid_body_t_INSTRUCTION = 1
};
bool body_t_typeid_body_t_IsValid(int value);
constexpr body_t_typeid_body_t body_t_typeid_body_t_typeid_body_t_MIN = body_t_typeid_body_t_METADATA;
constexpr body_t_typeid_body_t body_t_typeid_body_t_typeid_body_t_MAX = body_t_typeid_body_t_INSTRUCTION;
constexpr int body_t_typeid_body_t_typeid_body_t_ARRAYSIZE = body_t_typeid_body_t_typeid_body_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* body_t_typeid_body_t_descriptor();
template<typename T>
inline const std::string& body_t_typeid_body_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, body_t_typeid_body_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function body_t_typeid_body_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    body_t_typeid_body_t_descriptor(), enum_t_value);
}
inline bool body_t_typeid_body_t_Parse(
    const std::string& name, body_t_typeid_body_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<body_t_typeid_body_t>(
    body_t_typeid_body_t_descriptor(), name, value);
}
// ===================================================================

class header_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.header_t) */ {
 public:
  header_t();
  virtual ~header_t();

  header_t(const header_t& from);
  header_t(header_t&& from) noexcept
    : header_t() {
    *this = ::std::move(from);
  }

  inline header_t& operator=(const header_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline header_t& operator=(header_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const header_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const header_t* internal_default_instance() {
    return reinterpret_cast<const header_t*>(
               &_header_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(header_t& a, header_t& b) {
    a.Swap(&b);
  }
  inline void Swap(header_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline header_t* New() const final {
    return CreateMaybeMessage<header_t>(nullptr);
  }

  header_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<header_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const header_t& from);
  void MergeFrom(const header_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(header_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.header_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef header_t_architecture_t architecture_t;
  static constexpr architecture_t X86 =
    header_t_architecture_t_X86;
  static constexpr architecture_t X86_64 =
    header_t_architecture_t_X86_64;
  static inline bool architecture_t_IsValid(int value) {
    return header_t_architecture_t_IsValid(value);
  }
  static constexpr architecture_t architecture_t_MIN =
    header_t_architecture_t_architecture_t_MIN;
  static constexpr architecture_t architecture_t_MAX =
    header_t_architecture_t_architecture_t_MAX;
  static constexpr int architecture_t_ARRAYSIZE =
    header_t_architecture_t_architecture_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  architecture_t_descriptor() {
    return header_t_architecture_t_descriptor();
  }
  template<typename T>
  static inline const std::string& architecture_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, architecture_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function architecture_t_Name.");
    return header_t_architecture_t_Name(enum_t_value);
  }
  static inline bool architecture_t_Parse(const std::string& name,
      architecture_t* value) {
    return header_t_architecture_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArchitectureFieldNumber = 1,
    kAddressSizeFieldNumber = 2,
    kKindFieldNumber = 3,
  };
  // required .trace_format.header_t.architecture_t architecture = 1;
  bool has_architecture() const;
  void clear_architecture();
  ::trace_format::header_t_architecture_t architecture() const;
  void set_architecture(::trace_format::header_t_architecture_t value);

  // required .common.proto_size_t address_size = 2;
  bool has_address_size() const;
  void clear_address_size();
  ::common::proto_size_t address_size() const;
  void set_address_size(::common::proto_size_t value);

  // optional .common.ir_kind_t kind = 3 [default = DBA];
  bool has_kind() const;
  void clear_kind();
  ::common::ir_kind_t kind() const;
  void set_kind(::common::ir_kind_t value);

  // @@protoc_insertion_point(class_scope:trace_format.header_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int architecture_;
  int address_size_;
  int kind_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class metadata_t_exception_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.metadata_t.exception_t) */ {
 public:
  metadata_t_exception_t();
  virtual ~metadata_t_exception_t();

  metadata_t_exception_t(const metadata_t_exception_t& from);
  metadata_t_exception_t(metadata_t_exception_t&& from) noexcept
    : metadata_t_exception_t() {
    *this = ::std::move(from);
  }

  inline metadata_t_exception_t& operator=(const metadata_t_exception_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline metadata_t_exception_t& operator=(metadata_t_exception_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const metadata_t_exception_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const metadata_t_exception_t* internal_default_instance() {
    return reinterpret_cast<const metadata_t_exception_t*>(
               &_metadata_t_exception_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(metadata_t_exception_t& a, metadata_t_exception_t& b) {
    a.Swap(&b);
  }
  inline void Swap(metadata_t_exception_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline metadata_t_exception_t* New() const final {
    return CreateMaybeMessage<metadata_t_exception_t>(nullptr);
  }

  metadata_t_exception_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<metadata_t_exception_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const metadata_t_exception_t& from);
  void MergeFrom(const metadata_t_exception_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(metadata_t_exception_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.metadata_t.exception_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHandlerFieldNumber = 2,
    kTypeExceptionFieldNumber = 1,
  };
  // required uint64 handler = 2;
  bool has_handler() const;
  void clear_handler();
  ::PROTOBUF_NAMESPACE_ID::uint64 handler() const;
  void set_handler(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 type_exception = 1;
  bool has_type_exception() const;
  void clear_type_exception();
  ::PROTOBUF_NAMESPACE_ID::uint32 type_exception() const;
  void set_type_exception(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:trace_format.metadata_t.exception_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 handler_;
  ::PROTOBUF_NAMESPACE_ID::uint32 type_exception_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class metadata_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.metadata_t) */ {
 public:
  metadata_t();
  virtual ~metadata_t();

  metadata_t(const metadata_t& from);
  metadata_t(metadata_t&& from) noexcept
    : metadata_t() {
    *this = ::std::move(from);
  }

  inline metadata_t& operator=(const metadata_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline metadata_t& operator=(metadata_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const metadata_t& default_instance();

  enum MetadataContentCase {
    kModuleMetadata = 2,
    kExceptionMetadata = 3,
    kWaveMetadata = 4,
    METADATA_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const metadata_t* internal_default_instance() {
    return reinterpret_cast<const metadata_t*>(
               &_metadata_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(metadata_t& a, metadata_t& b) {
    a.Swap(&b);
  }
  inline void Swap(metadata_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline metadata_t* New() const final {
    return CreateMaybeMessage<metadata_t>(nullptr);
  }

  metadata_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<metadata_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const metadata_t& from);
  void MergeFrom(const metadata_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(metadata_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.metadata_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef metadata_t_exception_t exception_t;

  typedef metadata_t_typeid_metadata_t typeid_metadata_t;
  static constexpr typeid_metadata_t INVALID_METADATA =
    metadata_t_typeid_metadata_t_INVALID_METADATA;
  static constexpr typeid_metadata_t EXCEPTION_TYPE =
    metadata_t_typeid_metadata_t_EXCEPTION_TYPE;
  static constexpr typeid_metadata_t MODULE_TYPE =
    metadata_t_typeid_metadata_t_MODULE_TYPE;
  static constexpr typeid_metadata_t WAVE_TYPE =
    metadata_t_typeid_metadata_t_WAVE_TYPE;
  static inline bool typeid_metadata_t_IsValid(int value) {
    return metadata_t_typeid_metadata_t_IsValid(value);
  }
  static constexpr typeid_metadata_t typeid_metadata_t_MIN =
    metadata_t_typeid_metadata_t_typeid_metadata_t_MIN;
  static constexpr typeid_metadata_t typeid_metadata_t_MAX =
    metadata_t_typeid_metadata_t_typeid_metadata_t_MAX;
  static constexpr int typeid_metadata_t_ARRAYSIZE =
    metadata_t_typeid_metadata_t_typeid_metadata_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  typeid_metadata_t_descriptor() {
    return metadata_t_typeid_metadata_t_descriptor();
  }
  template<typename T>
  static inline const std::string& typeid_metadata_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, typeid_metadata_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function typeid_metadata_t_Name.");
    return metadata_t_typeid_metadata_t_Name(enum_t_value);
  }
  static inline bool typeid_metadata_t_Parse(const std::string& name,
      typeid_metadata_t* value) {
    return metadata_t_typeid_metadata_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeidFieldNumber = 1,
    kModuleMetadataFieldNumber = 2,
    kExceptionMetadataFieldNumber = 3,
    kWaveMetadataFieldNumber = 4,
  };
  // required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  ::trace_format::metadata_t_typeid_metadata_t typeid_() const;
  void set_typeid_(::trace_format::metadata_t_typeid_metadata_t value);

  // optional string module_metadata = 2;
  bool has_module_metadata() const;
  void clear_module_metadata();
  const std::string& module_metadata() const;
  void set_module_metadata(const std::string& value);
  void set_module_metadata(std::string&& value);
  void set_module_metadata(const char* value);
  void set_module_metadata(const char* value, size_t size);
  std::string* mutable_module_metadata();
  std::string* release_module_metadata();
  void set_allocated_module_metadata(std::string* module_metadata);

  // optional .trace_format.metadata_t.exception_t exception_metadata = 3;
  bool has_exception_metadata() const;
  void clear_exception_metadata();
  const ::trace_format::metadata_t_exception_t& exception_metadata() const;
  ::trace_format::metadata_t_exception_t* release_exception_metadata();
  ::trace_format::metadata_t_exception_t* mutable_exception_metadata();
  void set_allocated_exception_metadata(::trace_format::metadata_t_exception_t* exception_metadata);

  // optional uint32 wave_metadata = 4;
  bool has_wave_metadata() const;
  void clear_wave_metadata();
  ::PROTOBUF_NAMESPACE_ID::uint32 wave_metadata() const;
  void set_wave_metadata(::PROTOBUF_NAMESPACE_ID::uint32 value);

  void clear_metadata_content();
  MetadataContentCase metadata_content_case() const;
  // @@protoc_insertion_point(class_scope:trace_format.metadata_t)
 private:
  class _Internal;
  void set_has_module_metadata();
  void set_has_exception_metadata();
  void set_has_wave_metadata();

  inline bool has_metadata_content() const;
  inline void clear_has_metadata_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int typeid__;
  union MetadataContentUnion {
    MetadataContentUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_metadata_;
    ::trace_format::metadata_t_exception_t* exception_metadata_;
    ::PROTOBUF_NAMESPACE_ID::uint32 wave_metadata_;
  } metadata_content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class ins_con_info_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.ins_con_info_t) */ {
 public:
  ins_con_info_t();
  virtual ~ins_con_info_t();

  ins_con_info_t(const ins_con_info_t& from);
  ins_con_info_t(ins_con_info_t&& from) noexcept
    : ins_con_info_t() {
    *this = ::std::move(from);
  }

  inline ins_con_info_t& operator=(const ins_con_info_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline ins_con_info_t& operator=(ins_con_info_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ins_con_info_t& default_instance();

  enum ConcInfoContentCase {
    kReadRegister = 2,
    kWriteRegister = 3,
    kLoadMemory = 4,
    kStoreMemory = 5,
    kCall = 6,
    kSystemCall = 8,
    kNextAddress = 9,
    kReservedComment = 10,
    kWave = 11,
    CONC_INFO_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ins_con_info_t* internal_default_instance() {
    return reinterpret_cast<const ins_con_info_t*>(
               &_ins_con_info_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ins_con_info_t& a, ins_con_info_t& b) {
    a.Swap(&b);
  }
  inline void Swap(ins_con_info_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ins_con_info_t* New() const final {
    return CreateMaybeMessage<ins_con_info_t>(nullptr);
  }

  ins_con_info_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ins_con_info_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ins_con_info_t& from);
  void MergeFrom(const ins_con_info_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ins_con_info_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.ins_con_info_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ins_con_info_t_typeid_con_info_t typeid_con_info_t;
  static constexpr typeid_con_info_t INVALID =
    ins_con_info_t_typeid_con_info_t_INVALID;
  static constexpr typeid_con_info_t REGREAD =
    ins_con_info_t_typeid_con_info_t_REGREAD;
  static constexpr typeid_con_info_t REGWRITE =
    ins_con_info_t_typeid_con_info_t_REGWRITE;
  static constexpr typeid_con_info_t MEMLOAD =
    ins_con_info_t_typeid_con_info_t_MEMLOAD;
  static constexpr typeid_con_info_t MEMSTORE =
    ins_con_info_t_typeid_con_info_t_MEMSTORE;
  static constexpr typeid_con_info_t CALL =
    ins_con_info_t_typeid_con_info_t_CALL;
  static constexpr typeid_con_info_t SYSCALL =
    ins_con_info_t_typeid_con_info_t_SYSCALL;
  static constexpr typeid_con_info_t NOT_RETRIEVED =
    ins_con_info_t_typeid_con_info_t_NOT_RETRIEVED;
  static constexpr typeid_con_info_t NEXT_ADDRESS =
    ins_con_info_t_typeid_con_info_t_NEXT_ADDRESS;
  static constexpr typeid_con_info_t COMMENT =
    ins_con_info_t_typeid_con_info_t_COMMENT;
  static constexpr typeid_con_info_t WAVE =
    ins_con_info_t_typeid_con_info_t_WAVE;
  static inline bool typeid_con_info_t_IsValid(int value) {
    return ins_con_info_t_typeid_con_info_t_IsValid(value);
  }
  static constexpr typeid_con_info_t typeid_con_info_t_MIN =
    ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MIN;
  static constexpr typeid_con_info_t typeid_con_info_t_MAX =
    ins_con_info_t_typeid_con_info_t_typeid_con_info_t_MAX;
  static constexpr int typeid_con_info_t_ARRAYSIZE =
    ins_con_info_t_typeid_con_info_t_typeid_con_info_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  typeid_con_info_t_descriptor() {
    return ins_con_info_t_typeid_con_info_t_descriptor();
  }
  template<typename T>
  static inline const std::string& typeid_con_info_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, typeid_con_info_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function typeid_con_info_t_Name.");
    return ins_con_info_t_typeid_con_info_t_Name(enum_t_value);
  }
  static inline bool typeid_con_info_t_Parse(const std::string& name,
      typeid_con_info_t* value) {
    return ins_con_info_t_typeid_con_info_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeidFieldNumber = 1,
    kReadRegisterFieldNumber = 2,
    kWriteRegisterFieldNumber = 3,
    kLoadMemoryFieldNumber = 4,
    kStoreMemoryFieldNumber = 5,
    kCallFieldNumber = 6,
    kSystemCallFieldNumber = 8,
    kNextAddressFieldNumber = 9,
    kReservedCommentFieldNumber = 10,
    kWaveFieldNumber = 11,
  };
  // required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  ::trace_format::ins_con_info_t_typeid_con_info_t typeid_() const;
  void set_typeid_(::trace_format::ins_con_info_t_typeid_con_info_t value);

  // optional .common.register_t read_register = 2;
  bool has_read_register() const;
  void clear_read_register();
  const ::common::register_t& read_register() const;
  ::common::register_t* release_read_register();
  ::common::register_t* mutable_read_register();
  void set_allocated_read_register(::common::register_t* read_register);

  // optional .common.register_t write_register = 3;
  bool has_write_register() const;
  void clear_write_register();
  const ::common::register_t& write_register() const;
  ::common::register_t* release_write_register();
  ::common::register_t* mutable_write_register();
  void set_allocated_write_register(::common::register_t* write_register);

  // optional .common.memory_t load_memory = 4;
  bool has_load_memory() const;
  void clear_load_memory();
  const ::common::memory_t& load_memory() const;
  ::common::memory_t* release_load_memory();
  ::common::memory_t* mutable_load_memory();
  void set_allocated_load_memory(::common::memory_t* load_memory);

  // optional .common.memory_t store_memory = 5;
  bool has_store_memory() const;
  void clear_store_memory();
  const ::common::memory_t& store_memory() const;
  ::common::memory_t* release_store_memory();
  ::common::memory_t* mutable_store_memory();
  void set_allocated_store_memory(::common::memory_t* store_memory);

  // optional .libcall_types.libcall_t call = 6;
  bool has_call() const;
  void clear_call();
  const ::libcall_types::libcall_t& call() const;
  ::libcall_types::libcall_t* release_call();
  ::libcall_types::libcall_t* mutable_call();
  void set_allocated_call(::libcall_types::libcall_t* call);

  // optional .syscall_types.syscall_t system_call = 8;
  bool has_system_call() const;
  void clear_system_call();
  const ::syscall_types::syscall_t& system_call() const;
  ::syscall_types::syscall_t* release_system_call();
  ::syscall_types::syscall_t* mutable_system_call();
  void set_allocated_system_call(::syscall_types::syscall_t* system_call);

  // optional uint64 next_address = 9;
  bool has_next_address() const;
  void clear_next_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 next_address() const;
  void set_next_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional string reserved_comment = 10;
  bool has_reserved_comment() const;
  void clear_reserved_comment();
  const std::string& reserved_comment() const;
  void set_reserved_comment(const std::string& value);
  void set_reserved_comment(std::string&& value);
  void set_reserved_comment(const char* value);
  void set_reserved_comment(const char* value, size_t size);
  std::string* mutable_reserved_comment();
  std::string* release_reserved_comment();
  void set_allocated_reserved_comment(std::string* reserved_comment);

  // optional uint32 wave = 11;
  bool has_wave() const;
  void clear_wave();
  ::PROTOBUF_NAMESPACE_ID::uint32 wave() const;
  void set_wave(::PROTOBUF_NAMESPACE_ID::uint32 value);

  void clear_conc_info_content();
  ConcInfoContentCase conc_info_content_case() const;
  // @@protoc_insertion_point(class_scope:trace_format.ins_con_info_t)
 private:
  class _Internal;
  void set_has_read_register();
  void set_has_write_register();
  void set_has_load_memory();
  void set_has_store_memory();
  void set_has_call();
  void set_has_system_call();
  void set_has_next_address();
  void set_has_reserved_comment();
  void set_has_wave();

  inline bool has_conc_info_content() const;
  inline void clear_has_conc_info_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int typeid__;
  union ConcInfoContentUnion {
    ConcInfoContentUnion() {}
    ::common::register_t* read_register_;
    ::common::register_t* write_register_;
    ::common::memory_t* load_memory_;
    ::common::memory_t* store_memory_;
    ::libcall_types::libcall_t* call_;
    ::syscall_types::syscall_t* system_call_;
    ::PROTOBUF_NAMESPACE_ID::uint64 next_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reserved_comment_;
    ::PROTOBUF_NAMESPACE_ID::uint32 wave_;
  } conc_info_content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class instruction_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.instruction_t) */ {
 public:
  instruction_t();
  virtual ~instruction_t();

  instruction_t(const instruction_t& from);
  instruction_t(instruction_t&& from) noexcept
    : instruction_t() {
    *this = ::std::move(from);
  }

  inline instruction_t& operator=(const instruction_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline instruction_t& operator=(instruction_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const instruction_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const instruction_t* internal_default_instance() {
    return reinterpret_cast<const instruction_t*>(
               &_instruction_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(instruction_t& a, instruction_t& b) {
    a.Swap(&b);
  }
  inline void Swap(instruction_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline instruction_t* New() const final {
    return CreateMaybeMessage<instruction_t>(nullptr);
  }

  instruction_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<instruction_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const instruction_t& from);
  void MergeFrom(const instruction_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(instruction_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.instruction_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConcreteInfosFieldNumber = 4,
    kOpcodeFieldNumber = 3,
    kDbaInstrsFieldNumber = 5,
    kAddressFieldNumber = 2,
    kThreadIdFieldNumber = 1,
  };
  // repeated .trace_format.ins_con_info_t concrete_infos = 4;
  int concrete_infos_size() const;
  void clear_concrete_infos();
  ::trace_format::ins_con_info_t* mutable_concrete_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::ins_con_info_t >*
      mutable_concrete_infos();
  const ::trace_format::ins_con_info_t& concrete_infos(int index) const;
  ::trace_format::ins_con_info_t* add_concrete_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::ins_con_info_t >&
      concrete_infos() const;

  // required bytes opcode = 3;
  bool has_opcode() const;
  void clear_opcode();
  const std::string& opcode() const;
  void set_opcode(const std::string& value);
  void set_opcode(std::string&& value);
  void set_opcode(const char* value);
  void set_opcode(const void* value, size_t size);
  std::string* mutable_opcode();
  std::string* release_opcode();
  void set_allocated_opcode(std::string* opcode);

  // optional .dba.dba_list dba_instrs = 5;
  bool has_dba_instrs() const;
  void clear_dba_instrs();
  const ::dba::dba_list& dba_instrs() const;
  ::dba::dba_list* release_dba_instrs();
  ::dba::dba_list* mutable_dba_instrs();
  void set_allocated_dba_instrs(::dba::dba_list* dba_instrs);

  // required uint64 address = 2;
  bool has_address() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 thread_id = 1;
  bool has_thread_id() const;
  void clear_thread_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id() const;
  void set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:trace_format.instruction_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::ins_con_info_t > concrete_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opcode_;
  ::dba::dba_list* dba_instrs_;
  ::PROTOBUF_NAMESPACE_ID::uint64 address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 thread_id_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class body_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.body_t) */ {
 public:
  body_t();
  virtual ~body_t();

  body_t(const body_t& from);
  body_t(body_t&& from) noexcept
    : body_t() {
    *this = ::std::move(from);
  }

  inline body_t& operator=(const body_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline body_t& operator=(body_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const body_t& default_instance();

  enum BodyContentCase {
    kMetadata = 2,
    kInstruction = 3,
    BODY_CONTENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const body_t* internal_default_instance() {
    return reinterpret_cast<const body_t*>(
               &_body_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(body_t& a, body_t& b) {
    a.Swap(&b);
  }
  inline void Swap(body_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline body_t* New() const final {
    return CreateMaybeMessage<body_t>(nullptr);
  }

  body_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<body_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const body_t& from);
  void MergeFrom(const body_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(body_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.body_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef body_t_typeid_body_t typeid_body_t;
  static constexpr typeid_body_t METADATA =
    body_t_typeid_body_t_METADATA;
  static constexpr typeid_body_t INSTRUCTION =
    body_t_typeid_body_t_INSTRUCTION;
  static inline bool typeid_body_t_IsValid(int value) {
    return body_t_typeid_body_t_IsValid(value);
  }
  static constexpr typeid_body_t typeid_body_t_MIN =
    body_t_typeid_body_t_typeid_body_t_MIN;
  static constexpr typeid_body_t typeid_body_t_MAX =
    body_t_typeid_body_t_typeid_body_t_MAX;
  static constexpr int typeid_body_t_ARRAYSIZE =
    body_t_typeid_body_t_typeid_body_t_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  typeid_body_t_descriptor() {
    return body_t_typeid_body_t_descriptor();
  }
  template<typename T>
  static inline const std::string& typeid_body_t_Name(T enum_t_value) {
    static_assert(::std::is_same<T, typeid_body_t>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function typeid_body_t_Name.");
    return body_t_typeid_body_t_Name(enum_t_value);
  }
  static inline bool typeid_body_t_Parse(const std::string& name,
      typeid_body_t* value) {
    return body_t_typeid_body_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeidFieldNumber = 1,
    kMetadataFieldNumber = 2,
    kInstructionFieldNumber = 3,
  };
  // required .trace_format.body_t.typeid_body_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  ::trace_format::body_t_typeid_body_t typeid_() const;
  void set_typeid_(::trace_format::body_t_typeid_body_t value);

  // optional .trace_format.metadata_t metadata = 2;
  bool has_metadata() const;
  void clear_metadata();
  const ::trace_format::metadata_t& metadata() const;
  ::trace_format::metadata_t* release_metadata();
  ::trace_format::metadata_t* mutable_metadata();
  void set_allocated_metadata(::trace_format::metadata_t* metadata);

  // optional .trace_format.instruction_t instruction = 3;
  bool has_instruction() const;
  void clear_instruction();
  const ::trace_format::instruction_t& instruction() const;
  ::trace_format::instruction_t* release_instruction();
  ::trace_format::instruction_t* mutable_instruction();
  void set_allocated_instruction(::trace_format::instruction_t* instruction);

  void clear_body_content();
  BodyContentCase body_content_case() const;
  // @@protoc_insertion_point(class_scope:trace_format.body_t)
 private:
  class _Internal;
  void set_has_metadata();
  void set_has_instruction();

  inline bool has_body_content() const;
  inline void clear_has_body_content();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int typeid__;
  union BodyContentUnion {
    BodyContentUnion() {}
    ::trace_format::metadata_t* metadata_;
    ::trace_format::instruction_t* instruction_;
  } body_content_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class chunk_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.chunk_t) */ {
 public:
  chunk_t();
  virtual ~chunk_t();

  chunk_t(const chunk_t& from);
  chunk_t(chunk_t&& from) noexcept
    : chunk_t() {
    *this = ::std::move(from);
  }

  inline chunk_t& operator=(const chunk_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline chunk_t& operator=(chunk_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const chunk_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const chunk_t* internal_default_instance() {
    return reinterpret_cast<const chunk_t*>(
               &_chunk_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(chunk_t& a, chunk_t& b) {
    a.Swap(&b);
  }
  inline void Swap(chunk_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline chunk_t* New() const final {
    return CreateMaybeMessage<chunk_t>(nullptr);
  }

  chunk_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<chunk_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const chunk_t& from);
  void MergeFrom(const chunk_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(chunk_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.chunk_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 1,
  };
  // repeated .trace_format.body_t body = 1;
  int body_size() const;
  void clear_body();
  ::trace_format::body_t* mutable_body(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >*
      mutable_body();
  const ::trace_format::body_t& body(int index) const;
  ::trace_format::body_t* add_body();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >&
      body() const;

  // @@protoc_insertion_point(class_scope:trace_format.chunk_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t > body_;
  friend struct ::TableStruct_trace_2eproto;
};
// -------------------------------------------------------------------

class trace_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:trace_format.trace_t) */ {
 public:
  trace_t();
  virtual ~trace_t();

  trace_t(const trace_t& from);
  trace_t(trace_t&& from) noexcept
    : trace_t() {
    *this = ::std::move(from);
  }

  inline trace_t& operator=(const trace_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline trace_t& operator=(trace_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const trace_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const trace_t* internal_default_instance() {
    return reinterpret_cast<const trace_t*>(
               &_trace_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(trace_t& a, trace_t& b) {
    a.Swap(&b);
  }
  inline void Swap(trace_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline trace_t* New() const final {
    return CreateMaybeMessage<trace_t>(nullptr);
  }

  trace_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<trace_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const trace_t& from);
  void MergeFrom(const trace_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(trace_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "trace_format.trace_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_trace_2eproto);
    return ::descriptor_table_trace_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .trace_format.body_t body = 2;
  int body_size() const;
  void clear_body();
  ::trace_format::body_t* mutable_body(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >*
      mutable_body();
  const ::trace_format::body_t& body(int index) const;
  ::trace_format::body_t* add_body();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >&
      body() const;

  // required .trace_format.header_t header = 1;
  bool has_header() const;
  void clear_header();
  const ::trace_format::header_t& header() const;
  ::trace_format::header_t* release_header();
  ::trace_format::header_t* mutable_header();
  void set_allocated_header(::trace_format::header_t* header);

  // @@protoc_insertion_point(class_scope:trace_format.trace_t)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t > body_;
  ::trace_format::header_t* header_;
  friend struct ::TableStruct_trace_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// header_t

// required .trace_format.header_t.architecture_t architecture = 1;
inline bool header_t::has_architecture() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void header_t::clear_architecture() {
  architecture_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trace_format::header_t_architecture_t header_t::architecture() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.architecture)
  return static_cast< ::trace_format::header_t_architecture_t >(architecture_);
}
inline void header_t::set_architecture(::trace_format::header_t_architecture_t value) {
  assert(::trace_format::header_t_architecture_t_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  architecture_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.architecture)
}

// required .common.proto_size_t address_size = 2;
inline bool header_t::has_address_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void header_t::clear_address_size() {
  address_size_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::common::proto_size_t header_t::address_size() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.address_size)
  return static_cast< ::common::proto_size_t >(address_size_);
}
inline void header_t::set_address_size(::common::proto_size_t value) {
  assert(::common::proto_size_t_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  address_size_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.address_size)
}

// optional .common.ir_kind_t kind = 3 [default = DBA];
inline bool header_t::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void header_t::clear_kind() {
  kind_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::common::ir_kind_t header_t::kind() const {
  // @@protoc_insertion_point(field_get:trace_format.header_t.kind)
  return static_cast< ::common::ir_kind_t >(kind_);
}
inline void header_t::set_kind(::common::ir_kind_t value) {
  assert(::common::ir_kind_t_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  kind_ = value;
  // @@protoc_insertion_point(field_set:trace_format.header_t.kind)
}

// -------------------------------------------------------------------

// metadata_t_exception_t

// required uint32 type_exception = 1;
inline bool metadata_t_exception_t::has_type_exception() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void metadata_t_exception_t::clear_type_exception() {
  type_exception_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 metadata_t_exception_t::type_exception() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_t.type_exception)
  return type_exception_;
}
inline void metadata_t_exception_t::set_type_exception(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  type_exception_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.exception_t.type_exception)
}

// required uint64 handler = 2;
inline bool metadata_t_exception_t::has_handler() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void metadata_t_exception_t::clear_handler() {
  handler_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 metadata_t_exception_t::handler() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_t.handler)
  return handler_;
}
inline void metadata_t_exception_t::set_handler(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  handler_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.exception_t.handler)
}

// -------------------------------------------------------------------

// metadata_t

// required .trace_format.metadata_t.typeid_metadata_t typeid = 1;
inline bool metadata_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void metadata_t::clear_typeid_() {
  typeid__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trace_format::metadata_t_typeid_metadata_t metadata_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.typeid)
  return static_cast< ::trace_format::metadata_t_typeid_metadata_t >(typeid__);
}
inline void metadata_t::set_typeid_(::trace_format::metadata_t_typeid_metadata_t value) {
  assert(::trace_format::metadata_t_typeid_metadata_t_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.typeid)
}

// optional string module_metadata = 2;
inline bool metadata_t::has_module_metadata() const {
  return metadata_content_case() == kModuleMetadata;
}
inline void metadata_t::set_has_module_metadata() {
  _oneof_case_[0] = kModuleMetadata;
}
inline void metadata_t::clear_module_metadata() {
  if (has_module_metadata()) {
    metadata_content_.module_metadata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_metadata_content();
  }
}
inline const std::string& metadata_t::module_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.module_metadata)
  if (has_module_metadata()) {
    return metadata_content_.module_metadata_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void metadata_t::set_module_metadata(const std::string& value) {
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
}
inline void metadata_t::set_module_metadata(std::string&& value) {
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.module_metadata)
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.metadata_t.module_metadata)
}
inline void metadata_t::set_module_metadata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.metadata_t.module_metadata)
}
inline void metadata_t::set_module_metadata(const char* value, size_t size) {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  metadata_content_.module_metadata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.metadata_t.module_metadata)
}
inline std::string* metadata_t::mutable_module_metadata() {
  if (!has_module_metadata()) {
    clear_metadata_content();
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.metadata_t.module_metadata)
  return metadata_content_.module_metadata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* metadata_t::release_module_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.metadata_t.module_metadata)
  if (has_module_metadata()) {
    clear_has_metadata_content();
    return metadata_content_.module_metadata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void metadata_t::set_allocated_module_metadata(std::string* module_metadata) {
  if (has_metadata_content()) {
    clear_metadata_content();
  }
  if (module_metadata != nullptr) {
    set_has_module_metadata();
    metadata_content_.module_metadata_.UnsafeSetDefault(module_metadata);
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.metadata_t.module_metadata)
}

// optional .trace_format.metadata_t.exception_t exception_metadata = 3;
inline bool metadata_t::has_exception_metadata() const {
  return metadata_content_case() == kExceptionMetadata;
}
inline void metadata_t::set_has_exception_metadata() {
  _oneof_case_[0] = kExceptionMetadata;
}
inline void metadata_t::clear_exception_metadata() {
  if (has_exception_metadata()) {
    delete metadata_content_.exception_metadata_;
    clear_has_metadata_content();
  }
}
inline ::trace_format::metadata_t_exception_t* metadata_t::release_exception_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.metadata_t.exception_metadata)
  if (has_exception_metadata()) {
    clear_has_metadata_content();
      ::trace_format::metadata_t_exception_t* temp = metadata_content_.exception_metadata_;
    metadata_content_.exception_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace_format::metadata_t_exception_t& metadata_t::exception_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.exception_metadata)
  return has_exception_metadata()
      ? *metadata_content_.exception_metadata_
      : *reinterpret_cast< ::trace_format::metadata_t_exception_t*>(&::trace_format::_metadata_t_exception_t_default_instance_);
}
inline ::trace_format::metadata_t_exception_t* metadata_t::mutable_exception_metadata() {
  if (!has_exception_metadata()) {
    clear_metadata_content();
    set_has_exception_metadata();
    metadata_content_.exception_metadata_ = CreateMaybeMessage< ::trace_format::metadata_t_exception_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.metadata_t.exception_metadata)
  return metadata_content_.exception_metadata_;
}

// optional uint32 wave_metadata = 4;
inline bool metadata_t::has_wave_metadata() const {
  return metadata_content_case() == kWaveMetadata;
}
inline void metadata_t::set_has_wave_metadata() {
  _oneof_case_[0] = kWaveMetadata;
}
inline void metadata_t::clear_wave_metadata() {
  if (has_wave_metadata()) {
    metadata_content_.wave_metadata_ = 0u;
    clear_has_metadata_content();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 metadata_t::wave_metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.metadata_t.wave_metadata)
  if (has_wave_metadata()) {
    return metadata_content_.wave_metadata_;
  }
  return 0u;
}
inline void metadata_t::set_wave_metadata(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_wave_metadata()) {
    clear_metadata_content();
    set_has_wave_metadata();
  }
  metadata_content_.wave_metadata_ = value;
  // @@protoc_insertion_point(field_set:trace_format.metadata_t.wave_metadata)
}

inline bool metadata_t::has_metadata_content() const {
  return metadata_content_case() != METADATA_CONTENT_NOT_SET;
}
inline void metadata_t::clear_has_metadata_content() {
  _oneof_case_[0] = METADATA_CONTENT_NOT_SET;
}
inline metadata_t::MetadataContentCase metadata_t::metadata_content_case() const {
  return metadata_t::MetadataContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ins_con_info_t

// required .trace_format.ins_con_info_t.typeid_con_info_t typeid = 1;
inline bool ins_con_info_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ins_con_info_t::clear_typeid_() {
  typeid__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trace_format::ins_con_info_t_typeid_con_info_t ins_con_info_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.typeid)
  return static_cast< ::trace_format::ins_con_info_t_typeid_con_info_t >(typeid__);
}
inline void ins_con_info_t::set_typeid_(::trace_format::ins_con_info_t_typeid_con_info_t value) {
  assert(::trace_format::ins_con_info_t_typeid_con_info_t_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.typeid)
}

// optional .common.register_t read_register = 2;
inline bool ins_con_info_t::has_read_register() const {
  return conc_info_content_case() == kReadRegister;
}
inline void ins_con_info_t::set_has_read_register() {
  _oneof_case_[0] = kReadRegister;
}
inline ::common::register_t* ins_con_info_t::release_read_register() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.read_register)
  if (has_read_register()) {
    clear_has_conc_info_content();
      ::common::register_t* temp = conc_info_content_.read_register_;
    conc_info_content_.read_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::register_t& ins_con_info_t::read_register() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.read_register)
  return has_read_register()
      ? *conc_info_content_.read_register_
      : *reinterpret_cast< ::common::register_t*>(&::common::_register_t_default_instance_);
}
inline ::common::register_t* ins_con_info_t::mutable_read_register() {
  if (!has_read_register()) {
    clear_conc_info_content();
    set_has_read_register();
    conc_info_content_.read_register_ = CreateMaybeMessage< ::common::register_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.read_register)
  return conc_info_content_.read_register_;
}

// optional .common.register_t write_register = 3;
inline bool ins_con_info_t::has_write_register() const {
  return conc_info_content_case() == kWriteRegister;
}
inline void ins_con_info_t::set_has_write_register() {
  _oneof_case_[0] = kWriteRegister;
}
inline ::common::register_t* ins_con_info_t::release_write_register() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.write_register)
  if (has_write_register()) {
    clear_has_conc_info_content();
      ::common::register_t* temp = conc_info_content_.write_register_;
    conc_info_content_.write_register_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::register_t& ins_con_info_t::write_register() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.write_register)
  return has_write_register()
      ? *conc_info_content_.write_register_
      : *reinterpret_cast< ::common::register_t*>(&::common::_register_t_default_instance_);
}
inline ::common::register_t* ins_con_info_t::mutable_write_register() {
  if (!has_write_register()) {
    clear_conc_info_content();
    set_has_write_register();
    conc_info_content_.write_register_ = CreateMaybeMessage< ::common::register_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.write_register)
  return conc_info_content_.write_register_;
}

// optional .common.memory_t load_memory = 4;
inline bool ins_con_info_t::has_load_memory() const {
  return conc_info_content_case() == kLoadMemory;
}
inline void ins_con_info_t::set_has_load_memory() {
  _oneof_case_[0] = kLoadMemory;
}
inline ::common::memory_t* ins_con_info_t::release_load_memory() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.load_memory)
  if (has_load_memory()) {
    clear_has_conc_info_content();
      ::common::memory_t* temp = conc_info_content_.load_memory_;
    conc_info_content_.load_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::memory_t& ins_con_info_t::load_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.load_memory)
  return has_load_memory()
      ? *conc_info_content_.load_memory_
      : *reinterpret_cast< ::common::memory_t*>(&::common::_memory_t_default_instance_);
}
inline ::common::memory_t* ins_con_info_t::mutable_load_memory() {
  if (!has_load_memory()) {
    clear_conc_info_content();
    set_has_load_memory();
    conc_info_content_.load_memory_ = CreateMaybeMessage< ::common::memory_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.load_memory)
  return conc_info_content_.load_memory_;
}

// optional .common.memory_t store_memory = 5;
inline bool ins_con_info_t::has_store_memory() const {
  return conc_info_content_case() == kStoreMemory;
}
inline void ins_con_info_t::set_has_store_memory() {
  _oneof_case_[0] = kStoreMemory;
}
inline ::common::memory_t* ins_con_info_t::release_store_memory() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.store_memory)
  if (has_store_memory()) {
    clear_has_conc_info_content();
      ::common::memory_t* temp = conc_info_content_.store_memory_;
    conc_info_content_.store_memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::common::memory_t& ins_con_info_t::store_memory() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.store_memory)
  return has_store_memory()
      ? *conc_info_content_.store_memory_
      : *reinterpret_cast< ::common::memory_t*>(&::common::_memory_t_default_instance_);
}
inline ::common::memory_t* ins_con_info_t::mutable_store_memory() {
  if (!has_store_memory()) {
    clear_conc_info_content();
    set_has_store_memory();
    conc_info_content_.store_memory_ = CreateMaybeMessage< ::common::memory_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.store_memory)
  return conc_info_content_.store_memory_;
}

// optional .libcall_types.libcall_t call = 6;
inline bool ins_con_info_t::has_call() const {
  return conc_info_content_case() == kCall;
}
inline void ins_con_info_t::set_has_call() {
  _oneof_case_[0] = kCall;
}
inline ::libcall_types::libcall_t* ins_con_info_t::release_call() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.call)
  if (has_call()) {
    clear_has_conc_info_content();
      ::libcall_types::libcall_t* temp = conc_info_content_.call_;
    conc_info_content_.call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::libcall_types::libcall_t& ins_con_info_t::call() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.call)
  return has_call()
      ? *conc_info_content_.call_
      : *reinterpret_cast< ::libcall_types::libcall_t*>(&::libcall_types::_libcall_t_default_instance_);
}
inline ::libcall_types::libcall_t* ins_con_info_t::mutable_call() {
  if (!has_call()) {
    clear_conc_info_content();
    set_has_call();
    conc_info_content_.call_ = CreateMaybeMessage< ::libcall_types::libcall_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.call)
  return conc_info_content_.call_;
}

// optional .syscall_types.syscall_t system_call = 8;
inline bool ins_con_info_t::has_system_call() const {
  return conc_info_content_case() == kSystemCall;
}
inline void ins_con_info_t::set_has_system_call() {
  _oneof_case_[0] = kSystemCall;
}
inline ::syscall_types::syscall_t* ins_con_info_t::release_system_call() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.system_call)
  if (has_system_call()) {
    clear_has_conc_info_content();
      ::syscall_types::syscall_t* temp = conc_info_content_.system_call_;
    conc_info_content_.system_call_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::syscall_types::syscall_t& ins_con_info_t::system_call() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.system_call)
  return has_system_call()
      ? *conc_info_content_.system_call_
      : *reinterpret_cast< ::syscall_types::syscall_t*>(&::syscall_types::_syscall_t_default_instance_);
}
inline ::syscall_types::syscall_t* ins_con_info_t::mutable_system_call() {
  if (!has_system_call()) {
    clear_conc_info_content();
    set_has_system_call();
    conc_info_content_.system_call_ = CreateMaybeMessage< ::syscall_types::syscall_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.system_call)
  return conc_info_content_.system_call_;
}

// optional uint64 next_address = 9;
inline bool ins_con_info_t::has_next_address() const {
  return conc_info_content_case() == kNextAddress;
}
inline void ins_con_info_t::set_has_next_address() {
  _oneof_case_[0] = kNextAddress;
}
inline void ins_con_info_t::clear_next_address() {
  if (has_next_address()) {
    conc_info_content_.next_address_ = PROTOBUF_ULONGLONG(0);
    clear_has_conc_info_content();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ins_con_info_t::next_address() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.next_address)
  if (has_next_address()) {
    return conc_info_content_.next_address_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void ins_con_info_t::set_next_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_next_address()) {
    clear_conc_info_content();
    set_has_next_address();
  }
  conc_info_content_.next_address_ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.next_address)
}

// optional string reserved_comment = 10;
inline bool ins_con_info_t::has_reserved_comment() const {
  return conc_info_content_case() == kReservedComment;
}
inline void ins_con_info_t::set_has_reserved_comment() {
  _oneof_case_[0] = kReservedComment;
}
inline void ins_con_info_t::clear_reserved_comment() {
  if (has_reserved_comment()) {
    conc_info_content_.reserved_comment_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_conc_info_content();
  }
}
inline const std::string& ins_con_info_t::reserved_comment() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.reserved_comment)
  if (has_reserved_comment()) {
    return conc_info_content_.reserved_comment_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ins_con_info_t::set_reserved_comment(const std::string& value) {
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
}
inline void ins_con_info_t::set_reserved_comment(std::string&& value) {
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.reserved_comment)
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.ins_con_info_t.reserved_comment)
}
inline void ins_con_info_t::set_reserved_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.ins_con_info_t.reserved_comment)
}
inline void ins_con_info_t::set_reserved_comment(const char* value, size_t size) {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  conc_info_content_.reserved_comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.ins_con_info_t.reserved_comment)
}
inline std::string* ins_con_info_t::mutable_reserved_comment() {
  if (!has_reserved_comment()) {
    clear_conc_info_content();
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.ins_con_info_t.reserved_comment)
  return conc_info_content_.reserved_comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ins_con_info_t::release_reserved_comment() {
  // @@protoc_insertion_point(field_release:trace_format.ins_con_info_t.reserved_comment)
  if (has_reserved_comment()) {
    clear_has_conc_info_content();
    return conc_info_content_.reserved_comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void ins_con_info_t::set_allocated_reserved_comment(std::string* reserved_comment) {
  if (has_conc_info_content()) {
    clear_conc_info_content();
  }
  if (reserved_comment != nullptr) {
    set_has_reserved_comment();
    conc_info_content_.reserved_comment_.UnsafeSetDefault(reserved_comment);
  }
  // @@protoc_insertion_point(field_set_allocated:trace_format.ins_con_info_t.reserved_comment)
}

// optional uint32 wave = 11;
inline bool ins_con_info_t::has_wave() const {
  return conc_info_content_case() == kWave;
}
inline void ins_con_info_t::set_has_wave() {
  _oneof_case_[0] = kWave;
}
inline void ins_con_info_t::clear_wave() {
  if (has_wave()) {
    conc_info_content_.wave_ = 0u;
    clear_has_conc_info_content();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ins_con_info_t::wave() const {
  // @@protoc_insertion_point(field_get:trace_format.ins_con_info_t.wave)
  if (has_wave()) {
    return conc_info_content_.wave_;
  }
  return 0u;
}
inline void ins_con_info_t::set_wave(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_wave()) {
    clear_conc_info_content();
    set_has_wave();
  }
  conc_info_content_.wave_ = value;
  // @@protoc_insertion_point(field_set:trace_format.ins_con_info_t.wave)
}

inline bool ins_con_info_t::has_conc_info_content() const {
  return conc_info_content_case() != CONC_INFO_CONTENT_NOT_SET;
}
inline void ins_con_info_t::clear_has_conc_info_content() {
  _oneof_case_[0] = CONC_INFO_CONTENT_NOT_SET;
}
inline ins_con_info_t::ConcInfoContentCase ins_con_info_t::conc_info_content_case() const {
  return ins_con_info_t::ConcInfoContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// instruction_t

// required uint32 thread_id = 1;
inline bool instruction_t::has_thread_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void instruction_t::clear_thread_id() {
  thread_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 instruction_t::thread_id() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.thread_id)
  return thread_id_;
}
inline void instruction_t::set_thread_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.thread_id)
}

// required uint64 address = 2;
inline bool instruction_t::has_address() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void instruction_t::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 instruction_t::address() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.address)
  return address_;
}
inline void instruction_t::set_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000004u;
  address_ = value;
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.address)
}

// required bytes opcode = 3;
inline bool instruction_t::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instruction_t::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& instruction_t::opcode() const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.opcode)
  return opcode_.GetNoArena();
}
inline void instruction_t::set_opcode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trace_format.instruction_t.opcode)
}
inline void instruction_t::set_opcode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trace_format.instruction_t.opcode)
}
inline void instruction_t::set_opcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trace_format.instruction_t.opcode)
}
inline void instruction_t::set_opcode(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trace_format.instruction_t.opcode)
}
inline std::string* instruction_t::mutable_opcode() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.opcode)
  return opcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* instruction_t::release_opcode() {
  // @@protoc_insertion_point(field_release:trace_format.instruction_t.opcode)
  if (!has_opcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opcode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void instruction_t::set_allocated_opcode(std::string* opcode) {
  if (opcode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.opcode)
}

// repeated .trace_format.ins_con_info_t concrete_infos = 4;
inline int instruction_t::concrete_infos_size() const {
  return concrete_infos_.size();
}
inline void instruction_t::clear_concrete_infos() {
  concrete_infos_.Clear();
}
inline ::trace_format::ins_con_info_t* instruction_t::mutable_concrete_infos(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::ins_con_info_t >*
instruction_t::mutable_concrete_infos() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.instruction_t.concrete_infos)
  return &concrete_infos_;
}
inline const ::trace_format::ins_con_info_t& instruction_t::concrete_infos(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Get(index);
}
inline ::trace_format::ins_con_info_t* instruction_t::add_concrete_infos() {
  // @@protoc_insertion_point(field_add:trace_format.instruction_t.concrete_infos)
  return concrete_infos_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::ins_con_info_t >&
instruction_t::concrete_infos() const {
  // @@protoc_insertion_point(field_list:trace_format.instruction_t.concrete_infos)
  return concrete_infos_;
}

// optional .dba.dba_list dba_instrs = 5;
inline bool instruction_t::has_dba_instrs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::dba::dba_list& instruction_t::dba_instrs() const {
  const ::dba::dba_list* p = dba_instrs_;
  // @@protoc_insertion_point(field_get:trace_format.instruction_t.dba_instrs)
  return p != nullptr ? *p : *reinterpret_cast<const ::dba::dba_list*>(
      &::dba::_dba_list_default_instance_);
}
inline ::dba::dba_list* instruction_t::release_dba_instrs() {
  // @@protoc_insertion_point(field_release:trace_format.instruction_t.dba_instrs)
  _has_bits_[0] &= ~0x00000002u;
  ::dba::dba_list* temp = dba_instrs_;
  dba_instrs_ = nullptr;
  return temp;
}
inline ::dba::dba_list* instruction_t::mutable_dba_instrs() {
  _has_bits_[0] |= 0x00000002u;
  if (dba_instrs_ == nullptr) {
    auto* p = CreateMaybeMessage<::dba::dba_list>(GetArenaNoVirtual());
    dba_instrs_ = p;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.instruction_t.dba_instrs)
  return dba_instrs_;
}
inline void instruction_t::set_allocated_dba_instrs(::dba::dba_list* dba_instrs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(dba_instrs_);
  }
  if (dba_instrs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dba_instrs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dba_instrs, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  dba_instrs_ = dba_instrs;
  // @@protoc_insertion_point(field_set_allocated:trace_format.instruction_t.dba_instrs)
}

// -------------------------------------------------------------------

// body_t

// required .trace_format.body_t.typeid_body_t typeid = 1;
inline bool body_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void body_t::clear_typeid_() {
  typeid__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::trace_format::body_t_typeid_body_t body_t::typeid_() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.typeid)
  return static_cast< ::trace_format::body_t_typeid_body_t >(typeid__);
}
inline void body_t::set_typeid_(::trace_format::body_t_typeid_body_t value) {
  assert(::trace_format::body_t_typeid_body_t_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  typeid__ = value;
  // @@protoc_insertion_point(field_set:trace_format.body_t.typeid)
}

// optional .trace_format.metadata_t metadata = 2;
inline bool body_t::has_metadata() const {
  return body_content_case() == kMetadata;
}
inline void body_t::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
inline void body_t::clear_metadata() {
  if (has_metadata()) {
    delete body_content_.metadata_;
    clear_has_body_content();
  }
}
inline ::trace_format::metadata_t* body_t::release_metadata() {
  // @@protoc_insertion_point(field_release:trace_format.body_t.metadata)
  if (has_metadata()) {
    clear_has_body_content();
      ::trace_format::metadata_t* temp = body_content_.metadata_;
    body_content_.metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace_format::metadata_t& body_t::metadata() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.metadata)
  return has_metadata()
      ? *body_content_.metadata_
      : *reinterpret_cast< ::trace_format::metadata_t*>(&::trace_format::_metadata_t_default_instance_);
}
inline ::trace_format::metadata_t* body_t::mutable_metadata() {
  if (!has_metadata()) {
    clear_body_content();
    set_has_metadata();
    body_content_.metadata_ = CreateMaybeMessage< ::trace_format::metadata_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.body_t.metadata)
  return body_content_.metadata_;
}

// optional .trace_format.instruction_t instruction = 3;
inline bool body_t::has_instruction() const {
  return body_content_case() == kInstruction;
}
inline void body_t::set_has_instruction() {
  _oneof_case_[0] = kInstruction;
}
inline void body_t::clear_instruction() {
  if (has_instruction()) {
    delete body_content_.instruction_;
    clear_has_body_content();
  }
}
inline ::trace_format::instruction_t* body_t::release_instruction() {
  // @@protoc_insertion_point(field_release:trace_format.body_t.instruction)
  if (has_instruction()) {
    clear_has_body_content();
      ::trace_format::instruction_t* temp = body_content_.instruction_;
    body_content_.instruction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::trace_format::instruction_t& body_t::instruction() const {
  // @@protoc_insertion_point(field_get:trace_format.body_t.instruction)
  return has_instruction()
      ? *body_content_.instruction_
      : *reinterpret_cast< ::trace_format::instruction_t*>(&::trace_format::_instruction_t_default_instance_);
}
inline ::trace_format::instruction_t* body_t::mutable_instruction() {
  if (!has_instruction()) {
    clear_body_content();
    set_has_instruction();
    body_content_.instruction_ = CreateMaybeMessage< ::trace_format::instruction_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:trace_format.body_t.instruction)
  return body_content_.instruction_;
}

inline bool body_t::has_body_content() const {
  return body_content_case() != BODY_CONTENT_NOT_SET;
}
inline void body_t::clear_has_body_content() {
  _oneof_case_[0] = BODY_CONTENT_NOT_SET;
}
inline body_t::BodyContentCase body_t::body_content_case() const {
  return body_t::BodyContentCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// chunk_t

// repeated .trace_format.body_t body = 1;
inline int chunk_t::body_size() const {
  return body_.size();
}
inline void chunk_t::clear_body() {
  body_.Clear();
}
inline ::trace_format::body_t* chunk_t::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.chunk_t.body)
  return body_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >*
chunk_t::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.chunk_t.body)
  return &body_;
}
inline const ::trace_format::body_t& chunk_t::body(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.chunk_t.body)
  return body_.Get(index);
}
inline ::trace_format::body_t* chunk_t::add_body() {
  // @@protoc_insertion_point(field_add:trace_format.chunk_t.body)
  return body_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >&
chunk_t::body() const {
  // @@protoc_insertion_point(field_list:trace_format.chunk_t.body)
  return body_;
}

// -------------------------------------------------------------------

// trace_t

// required .trace_format.header_t header = 1;
inline bool trace_t::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void trace_t::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::trace_format::header_t& trace_t::header() const {
  const ::trace_format::header_t* p = header_;
  // @@protoc_insertion_point(field_get:trace_format.trace_t.header)
  return p != nullptr ? *p : *reinterpret_cast<const ::trace_format::header_t*>(
      &::trace_format::_header_t_default_instance_);
}
inline ::trace_format::header_t* trace_t::release_header() {
  // @@protoc_insertion_point(field_release:trace_format.trace_t.header)
  _has_bits_[0] &= ~0x00000001u;
  ::trace_format::header_t* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::trace_format::header_t* trace_t::mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::trace_format::header_t>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:trace_format.trace_t.header)
  return header_;
}
inline void trace_t::set_allocated_header(::trace_format::header_t* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:trace_format.trace_t.header)
}

// repeated .trace_format.body_t body = 2;
inline int trace_t::body_size() const {
  return body_.size();
}
inline void trace_t::clear_body() {
  body_.Clear();
}
inline ::trace_format::body_t* trace_t::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:trace_format.trace_t.body)
  return body_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >*
trace_t::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:trace_format.trace_t.body)
  return &body_;
}
inline const ::trace_format::body_t& trace_t::body(int index) const {
  // @@protoc_insertion_point(field_get:trace_format.trace_t.body)
  return body_.Get(index);
}
inline ::trace_format::body_t* trace_t::add_body() {
  // @@protoc_insertion_point(field_add:trace_format.trace_t.body)
  return body_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::trace_format::body_t >&
trace_t::body() const {
  // @@protoc_insertion_point(field_list:trace_format.trace_t.body)
  return body_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trace_format

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::trace_format::header_t_architecture_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::header_t_architecture_t>() {
  return ::trace_format::header_t_architecture_t_descriptor();
}
template <> struct is_proto_enum< ::trace_format::metadata_t_typeid_metadata_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::metadata_t_typeid_metadata_t>() {
  return ::trace_format::metadata_t_typeid_metadata_t_descriptor();
}
template <> struct is_proto_enum< ::trace_format::ins_con_info_t_typeid_con_info_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::ins_con_info_t_typeid_con_info_t>() {
  return ::trace_format::ins_con_info_t_typeid_con_info_t_descriptor();
}
template <> struct is_proto_enum< ::trace_format::body_t_typeid_body_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::trace_format::body_t_typeid_body_t>() {
  return ::trace_format::body_t_typeid_body_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trace_2eproto
