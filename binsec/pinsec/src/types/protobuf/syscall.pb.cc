// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscall.proto

#include "syscall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_syscall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_open_t_syscall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_syscall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_read_pol_syscall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_syscall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_read_t_syscall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_syscall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_write_t_syscall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_syscall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sys_generic_t_syscall_2eproto;
namespace syscall_types {
class syscall_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<syscall_pol> _instance;
  const ::syscall_types::nr_read_pol* nr_read_;
} _syscall_pol_default_instance_;
class syscall_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<syscall_t> _instance;
  const ::syscall_types::nr_open_t* open_syscall_;
  const ::syscall_types::nr_read_t* read_syscall_;
  const ::syscall_types::nr_write_t* write_sycall_;
  const ::syscall_types::sys_generic_t* generic_sycall_;
} _syscall_t_default_instance_;
class nr_read_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nr_read_pol> _instance;
} _nr_read_pol_default_instance_;
class nr_open_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nr_open_t> _instance;
} _nr_open_t_default_instance_;
class nr_read_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nr_read_t> _instance;
} _nr_read_t_default_instance_;
class nr_write_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<nr_write_t> _instance;
} _nr_write_t_default_instance_;
class sys_generic_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<sys_generic_t> _instance;
} _sys_generic_t_default_instance_;
}  // namespace syscall_types
static void InitDefaultsscc_info_nr_open_t_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_nr_open_t_default_instance_;
    new (ptr) ::syscall_types::nr_open_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::nr_open_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_open_t_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_nr_open_t_syscall_2eproto}, {}};

static void InitDefaultsscc_info_nr_read_pol_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_nr_read_pol_default_instance_;
    new (ptr) ::syscall_types::nr_read_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::nr_read_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_read_pol_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_nr_read_pol_syscall_2eproto}, {}};

static void InitDefaultsscc_info_nr_read_t_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_nr_read_t_default_instance_;
    new (ptr) ::syscall_types::nr_read_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::nr_read_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_read_t_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_nr_read_t_syscall_2eproto}, {}};

static void InitDefaultsscc_info_nr_write_t_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_nr_write_t_default_instance_;
    new (ptr) ::syscall_types::nr_write_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::nr_write_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_nr_write_t_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_nr_write_t_syscall_2eproto}, {}};

static void InitDefaultsscc_info_sys_generic_t_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_sys_generic_t_default_instance_;
    new (ptr) ::syscall_types::sys_generic_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::sys_generic_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_sys_generic_t_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_sys_generic_t_syscall_2eproto}, {}};

static void InitDefaultsscc_info_syscall_pol_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_syscall_pol_default_instance_;
    new (ptr) ::syscall_types::syscall_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::syscall_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_syscall_pol_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_syscall_pol_syscall_2eproto}, {
      &scc_info_nr_read_pol_syscall_2eproto.base,}};

static void InitDefaultsscc_info_syscall_t_syscall_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::syscall_types::_syscall_t_default_instance_;
    new (ptr) ::syscall_types::syscall_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::syscall_types::syscall_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_syscall_t_syscall_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsscc_info_syscall_t_syscall_2eproto}, {
      &scc_info_nr_open_t_syscall_2eproto.base,
      &scc_info_nr_read_t_syscall_2eproto.base,
      &scc_info_nr_write_t_syscall_2eproto.base,
      &scc_info_sys_generic_t_syscall_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_syscall_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_syscall_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_syscall_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_syscall_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, id_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, name_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, ident_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, action_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, restrict_addresses_),
  offsetof(::syscall_types::syscall_polDefaultTypeInternal, nr_read_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_pol, syscall_pol_cnt_),
  1,
  0,
  2,
  3,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_t, id_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_t, ident_),
  offsetof(::syscall_types::syscall_tDefaultTypeInternal, open_syscall_),
  offsetof(::syscall_types::syscall_tDefaultTypeInternal, read_syscall_),
  offsetof(::syscall_types::syscall_tDefaultTypeInternal, write_sycall_),
  offsetof(::syscall_types::syscall_tDefaultTypeInternal, generic_sycall_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::syscall_t, syscall_t_cnt_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_pol, name_),
  0,
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_open_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_open_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_open_t, file_name_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_open_t, flags_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_open_t, mode_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_open_t, file_descriptor_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, file_descriptor_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, buffer_address_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, count_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, buffer_data_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_read_t, count_effective_),
  2,
  1,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, file_descriptor_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, buffer_address_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, count_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, buffer_data_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::nr_write_t, count_effective_),
  2,
  1,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::syscall_types::sys_generic_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::sys_generic_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::syscall_types::sys_generic_t, name_),
  PROTOBUF_FIELD_OFFSET(::syscall_types::sys_generic_t, address_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::syscall_types::syscall_pol)},
  { 18, 30, sizeof(::syscall_types::syscall_t)},
  { 36, 42, sizeof(::syscall_types::nr_read_pol)},
  { 43, 52, sizeof(::syscall_types::nr_open_t)},
  { 56, 66, sizeof(::syscall_types::nr_read_t)},
  { 71, 81, sizeof(::syscall_types::nr_write_t)},
  { 86, 93, sizeof(::syscall_types::sys_generic_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_syscall_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_syscall_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_nr_read_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_nr_open_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_nr_read_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_nr_write_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::syscall_types::_sys_generic_t_default_instance_),
};

const char descriptor_table_protodef_syscall_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsyscall.proto\022\rsyscall_types\032\014common.p"
  "roto\"\332\001\n\013syscall_pol\022\n\n\002id\030\001 \002(\r\022\014\n\004name"
  "\030\002 \002(\t\022+\n\005ident\030\003 \002(\0162\034.syscall_types.sy"
  "scall_ident\022&\n\006action\030\004 \002(\0162\026.common.tra"
  "cing_action\022\032\n\022restrict_addresses\030\005 \003(\004\022"
  "-\n\007nr_read\030\006 \001(\0132\032.syscall_types.nr_read"
  "_polH\000B\021\n\017syscall_pol_cnt\"\244\002\n\tsyscall_t\022"
  "\n\n\002id\030\001 \002(\r\022+\n\005ident\030\002 \002(\0162\034.syscall_typ"
  "es.syscall_ident\0220\n\014open_syscall\030\003 \001(\0132\030"
  ".syscall_types.nr_open_tH\000\0220\n\014read_sysca"
  "ll\030\004 \001(\0132\030.syscall_types.nr_read_tH\000\0221\n\014"
  "write_sycall\030\005 \001(\0132\031.syscall_types.nr_wr"
  "ite_tH\000\0226\n\016generic_sycall\030\006 \001(\0132\034.syscal"
  "l_types.sys_generic_tH\000B\017\n\rsyscall_t_cnt"
  "\"\033\n\013nr_read_pol\022\014\n\004name\030\001 \002(\t\"T\n\tnr_open"
  "_t\022\021\n\tfile_name\030\001 \002(\t\022\r\n\005flags\030\002 \002(\021\022\014\n\004"
  "mode\030\003 \002(\r\022\027\n\017file_descriptor\030\004 \002(\005\"y\n\tn"
  "r_read_t\022\027\n\017file_descriptor\030\001 \002(\r\022\026\n\016buf"
  "fer_address\030\002 \002(\004\022\r\n\005count\030\003 \002(\r\022\023\n\013buff"
  "er_data\030\004 \002(\014\022\027\n\017count_effective\030\005 \002(\r\"z"
  "\n\nnr_write_t\022\027\n\017file_descriptor\030\001 \002(\r\022\026\n"
  "\016buffer_address\030\002 \002(\004\022\r\n\005count\030\003 \002(\r\022\023\n\013"
  "buffer_data\030\004 \002(\014\022\027\n\017count_effective\030\005 \002"
  "(\r\".\n\rsys_generic_t\022\014\n\004name\030\001 \002(\t\022\017\n\007add"
  "ress\030\002 \002(\r*D\n\rsyscall_ident\022\013\n\007NR_READ\020\000"
  "\022\014\n\010NR_WRITE\020\001\022\013\n\007NR_OPEN\020\002\022\013\n\007GENERIC\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_syscall_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_syscall_2eproto_sccs[7] = {
  &scc_info_nr_open_t_syscall_2eproto.base,
  &scc_info_nr_read_pol_syscall_2eproto.base,
  &scc_info_nr_read_t_syscall_2eproto.base,
  &scc_info_nr_write_t_syscall_2eproto.base,
  &scc_info_sys_generic_t_syscall_2eproto.base,
  &scc_info_syscall_pol_syscall_2eproto.base,
  &scc_info_syscall_t_syscall_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_syscall_2eproto_once;
static bool descriptor_table_syscall_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_syscall_2eproto = {
  &descriptor_table_syscall_2eproto_initialized, descriptor_table_protodef_syscall_2eproto, "syscall.proto", 1040,
  &descriptor_table_syscall_2eproto_once, descriptor_table_syscall_2eproto_sccs, descriptor_table_syscall_2eproto_deps, 7, 1,
  schemas, file_default_instances, TableStruct_syscall_2eproto::offsets,
  file_level_metadata_syscall_2eproto, 7, file_level_enum_descriptors_syscall_2eproto, file_level_service_descriptors_syscall_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_syscall_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_syscall_2eproto), true);
namespace syscall_types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* syscall_ident_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_syscall_2eproto);
  return file_level_enum_descriptors_syscall_2eproto[0];
}
bool syscall_ident_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void syscall_pol::InitAsDefaultInstance() {
  ::syscall_types::_syscall_pol_default_instance_.nr_read_ = const_cast< ::syscall_types::nr_read_pol*>(
      ::syscall_types::nr_read_pol::internal_default_instance());
}
class syscall_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<syscall_pol>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::syscall_types::nr_read_pol& nr_read(const syscall_pol* msg);
};

const ::syscall_types::nr_read_pol&
syscall_pol::_Internal::nr_read(const syscall_pol* msg) {
  return *msg->syscall_pol_cnt_.nr_read_;
}
void syscall_pol::set_allocated_nr_read(::syscall_types::nr_read_pol* nr_read) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_syscall_pol_cnt();
  if (nr_read) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      nr_read = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nr_read, submessage_arena);
    }
    set_has_nr_read();
    syscall_pol_cnt_.nr_read_ = nr_read;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_pol.nr_read)
}
syscall_pol::syscall_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.syscall_pol)
}
syscall_pol::syscall_pol(const syscall_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      restrict_addresses_(from.restrict_addresses_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&id_)) + sizeof(action_));
  clear_has_syscall_pol_cnt();
  switch (from.syscall_pol_cnt_case()) {
    case kNrRead: {
      mutable_nr_read()->::syscall_types::nr_read_pol::MergeFrom(from.nr_read());
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:syscall_types.syscall_pol)
}

void syscall_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_syscall_pol_syscall_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_) -
      reinterpret_cast<char*>(&id_)) + sizeof(action_));
  clear_has_syscall_pol_cnt();
}

syscall_pol::~syscall_pol() {
  // @@protoc_insertion_point(destructor:syscall_types.syscall_pol)
  SharedDtor();
}

void syscall_pol::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_syscall_pol_cnt()) {
    clear_syscall_pol_cnt();
  }
}

void syscall_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const syscall_pol& syscall_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_syscall_pol_syscall_2eproto.base);
  return *internal_default_instance();
}


void syscall_pol::clear_syscall_pol_cnt() {
// @@protoc_insertion_point(one_of_clear_start:syscall_types.syscall_pol)
  switch (syscall_pol_cnt_case()) {
    case kNrRead: {
      delete syscall_pol_cnt_.nr_read_;
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SYSCALL_POL_CNT_NOT_SET;
}


void syscall_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.syscall_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  restrict_addresses_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&action_) -
        reinterpret_cast<char*>(&id_)) + sizeof(action_));
  }
  clear_syscall_pol_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* syscall_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "syscall_types.syscall_pol.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .syscall_types.syscall_ident ident = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::syscall_types::syscall_ident_IsValid(val))) {
            set_ident(static_cast<::syscall_types::syscall_ident>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.tracing_action action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::tracing_action_IsValid(val))) {
            set_action(static_cast<::common::tracing_action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint64 restrict_addresses = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_restrict_addresses(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 40);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_restrict_addresses(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .syscall_types.nr_read_pol nr_read = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_nr_read(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool syscall_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.syscall_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "syscall_types.syscall_pol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .syscall_types.syscall_ident ident = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::syscall_types::syscall_ident_IsValid(value)) {
            set_ident(static_cast< ::syscall_types::syscall_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.tracing_action action = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::tracing_action_IsValid(value)) {
            set_action(static_cast< ::common::tracing_action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 restrict_addresses = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_restrict_addresses())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_restrict_addresses())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_read_pol nr_read = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_nr_read()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.syscall_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.syscall_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void syscall_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.syscall_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.syscall_pol.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required .syscall_types.syscall_ident ident = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ident(), output);
  }

  // required .common.tracing_action action = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  // repeated uint64 restrict_addresses = 5;
  for (int i = 0, n = this->restrict_addresses_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      5, this->restrict_addresses(i), output);
  }

  // optional .syscall_types.nr_read_pol nr_read = 6;
  if (has_nr_read()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::nr_read(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.syscall_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* syscall_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.syscall_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.syscall_pol.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required .syscall_types.syscall_ident ident = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ident(), target);
  }

  // required .common.tracing_action action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  // repeated uint64 restrict_addresses = 5;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->restrict_addresses_, target);

  // optional .syscall_types.nr_read_pol nr_read = 6;
  if (has_nr_read()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::nr_read(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.syscall_pol)
  return target;
}

size_t syscall_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.syscall_pol)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_ident()) {
    // required .syscall_types.syscall_ident ident = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());
  }

  if (has_action()) {
    // required .common.tracing_action action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t syscall_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.syscall_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .syscall_types.syscall_ident ident = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());

    // required .common.tracing_action action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 restrict_addresses = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->restrict_addresses_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->restrict_addresses_size());
    total_size += data_size;
  }

  switch (syscall_pol_cnt_case()) {
    // optional .syscall_types.nr_read_pol nr_read = 6;
    case kNrRead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *syscall_pol_cnt_.nr_read_);
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void syscall_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.syscall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const syscall_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<syscall_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.syscall_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.syscall_pol)
    MergeFrom(*source);
  }
}

void syscall_pol::MergeFrom(const syscall_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.syscall_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  restrict_addresses_.MergeFrom(from.restrict_addresses_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      ident_ = from.ident_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.syscall_pol_cnt_case()) {
    case kNrRead: {
      mutable_nr_read()->::syscall_types::nr_read_pol::MergeFrom(from.nr_read());
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
}

void syscall_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.syscall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_pol::CopyFrom(const syscall_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.syscall_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  switch (syscall_pol_cnt_case()) {
    case kNrRead: {
      if (has_nr_read()) {
        if (!this->nr_read().IsInitialized()) return false;
      }
      break;
    }
    case SYSCALL_POL_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void syscall_pol::InternalSwap(syscall_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  restrict_addresses_.InternalSwap(&other->restrict_addresses_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(ident_, other->ident_);
  swap(action_, other->action_);
  swap(syscall_pol_cnt_, other->syscall_pol_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata syscall_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void syscall_t::InitAsDefaultInstance() {
  ::syscall_types::_syscall_t_default_instance_.open_syscall_ = const_cast< ::syscall_types::nr_open_t*>(
      ::syscall_types::nr_open_t::internal_default_instance());
  ::syscall_types::_syscall_t_default_instance_.read_syscall_ = const_cast< ::syscall_types::nr_read_t*>(
      ::syscall_types::nr_read_t::internal_default_instance());
  ::syscall_types::_syscall_t_default_instance_.write_sycall_ = const_cast< ::syscall_types::nr_write_t*>(
      ::syscall_types::nr_write_t::internal_default_instance());
  ::syscall_types::_syscall_t_default_instance_.generic_sycall_ = const_cast< ::syscall_types::sys_generic_t*>(
      ::syscall_types::sys_generic_t::internal_default_instance());
}
class syscall_t::_Internal {
 public:
  using HasBits = decltype(std::declval<syscall_t>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::syscall_types::nr_open_t& open_syscall(const syscall_t* msg);
  static const ::syscall_types::nr_read_t& read_syscall(const syscall_t* msg);
  static const ::syscall_types::nr_write_t& write_sycall(const syscall_t* msg);
  static const ::syscall_types::sys_generic_t& generic_sycall(const syscall_t* msg);
};

const ::syscall_types::nr_open_t&
syscall_t::_Internal::open_syscall(const syscall_t* msg) {
  return *msg->syscall_t_cnt_.open_syscall_;
}
const ::syscall_types::nr_read_t&
syscall_t::_Internal::read_syscall(const syscall_t* msg) {
  return *msg->syscall_t_cnt_.read_syscall_;
}
const ::syscall_types::nr_write_t&
syscall_t::_Internal::write_sycall(const syscall_t* msg) {
  return *msg->syscall_t_cnt_.write_sycall_;
}
const ::syscall_types::sys_generic_t&
syscall_t::_Internal::generic_sycall(const syscall_t* msg) {
  return *msg->syscall_t_cnt_.generic_sycall_;
}
void syscall_t::set_allocated_open_syscall(::syscall_types::nr_open_t* open_syscall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_syscall_t_cnt();
  if (open_syscall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      open_syscall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, open_syscall, submessage_arena);
    }
    set_has_open_syscall();
    syscall_t_cnt_.open_syscall_ = open_syscall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.open_syscall)
}
void syscall_t::set_allocated_read_syscall(::syscall_types::nr_read_t* read_syscall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_syscall_t_cnt();
  if (read_syscall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      read_syscall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, read_syscall, submessage_arena);
    }
    set_has_read_syscall();
    syscall_t_cnt_.read_syscall_ = read_syscall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.read_syscall)
}
void syscall_t::set_allocated_write_sycall(::syscall_types::nr_write_t* write_sycall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_syscall_t_cnt();
  if (write_sycall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      write_sycall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, write_sycall, submessage_arena);
    }
    set_has_write_sycall();
    syscall_t_cnt_.write_sycall_ = write_sycall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.write_sycall)
}
void syscall_t::set_allocated_generic_sycall(::syscall_types::sys_generic_t* generic_sycall) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_syscall_t_cnt();
  if (generic_sycall) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generic_sycall = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_sycall, submessage_arena);
    }
    set_has_generic_sycall();
    syscall_t_cnt_.generic_sycall_ = generic_sycall;
  }
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_t.generic_sycall)
}
syscall_t::syscall_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.syscall_t)
}
syscall_t::syscall_t(const syscall_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ident_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ident_));
  clear_has_syscall_t_cnt();
  switch (from.syscall_t_cnt_case()) {
    case kOpenSyscall: {
      mutable_open_syscall()->::syscall_types::nr_open_t::MergeFrom(from.open_syscall());
      break;
    }
    case kReadSyscall: {
      mutable_read_syscall()->::syscall_types::nr_read_t::MergeFrom(from.read_syscall());
      break;
    }
    case kWriteSycall: {
      mutable_write_sycall()->::syscall_types::nr_write_t::MergeFrom(from.write_sycall());
      break;
    }
    case kGenericSycall: {
      mutable_generic_sycall()->::syscall_types::sys_generic_t::MergeFrom(from.generic_sycall());
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:syscall_types.syscall_t)
}

void syscall_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_syscall_t_syscall_2eproto.base);
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ident_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ident_));
  clear_has_syscall_t_cnt();
}

syscall_t::~syscall_t() {
  // @@protoc_insertion_point(destructor:syscall_types.syscall_t)
  SharedDtor();
}

void syscall_t::SharedDtor() {
  if (has_syscall_t_cnt()) {
    clear_syscall_t_cnt();
  }
}

void syscall_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const syscall_t& syscall_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_syscall_t_syscall_2eproto.base);
  return *internal_default_instance();
}


void syscall_t::clear_syscall_t_cnt() {
// @@protoc_insertion_point(one_of_clear_start:syscall_types.syscall_t)
  switch (syscall_t_cnt_case()) {
    case kOpenSyscall: {
      delete syscall_t_cnt_.open_syscall_;
      break;
    }
    case kReadSyscall: {
      delete syscall_t_cnt_.read_syscall_;
      break;
    }
    case kWriteSycall: {
      delete syscall_t_cnt_.write_sycall_;
      break;
    }
    case kGenericSycall: {
      delete syscall_t_cnt_.generic_sycall_;
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SYSCALL_T_CNT_NOT_SET;
}


void syscall_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.syscall_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ident_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ident_));
  }
  clear_syscall_t_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* syscall_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .syscall_types.syscall_ident ident = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::syscall_types::syscall_ident_IsValid(val))) {
            set_ident(static_cast<::syscall_types::syscall_ident>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .syscall_types.nr_open_t open_syscall = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_open_syscall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .syscall_types.nr_read_t read_syscall = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_read_syscall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .syscall_types.nr_write_t write_sycall = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_write_sycall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .syscall_types.sys_generic_t generic_sycall = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_generic_sycall(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool syscall_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.syscall_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_id(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .syscall_types.syscall_ident ident = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::syscall_types::syscall_ident_IsValid(value)) {
            set_ident(static_cast< ::syscall_types::syscall_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_open_t open_syscall = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_open_syscall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_read_t read_syscall = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_read_syscall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.nr_write_t write_sycall = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_write_sycall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .syscall_types.sys_generic_t generic_sycall = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generic_sycall()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.syscall_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.syscall_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void syscall_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.syscall_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .syscall_types.syscall_ident ident = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ident(), output);
  }

  switch (syscall_t_cnt_case()) {
    case kOpenSyscall:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::open_syscall(this), output);
      break;
    case kReadSyscall:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        4, _Internal::read_syscall(this), output);
      break;
    case kWriteSycall:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        5, _Internal::write_sycall(this), output);
      break;
    case kGenericSycall:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        6, _Internal::generic_sycall(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.syscall_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* syscall_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.syscall_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .syscall_types.syscall_ident ident = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ident(), target);
  }

  switch (syscall_t_cnt_case()) {
    case kOpenSyscall:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::open_syscall(this), target);
      break;
    case kReadSyscall:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          4, _Internal::read_syscall(this), target);
      break;
    case kWriteSycall:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          5, _Internal::write_sycall(this), target);
      break;
    case kGenericSycall:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          6, _Internal::generic_sycall(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.syscall_t)
  return target;
}

size_t syscall_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.syscall_t)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_ident()) {
    // required .syscall_types.syscall_ident ident = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());
  }

  return total_size;
}
size_t syscall_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.syscall_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .syscall_types.syscall_ident ident = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (syscall_t_cnt_case()) {
    // optional .syscall_types.nr_open_t open_syscall = 3;
    case kOpenSyscall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *syscall_t_cnt_.open_syscall_);
      break;
    }
    // optional .syscall_types.nr_read_t read_syscall = 4;
    case kReadSyscall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *syscall_t_cnt_.read_syscall_);
      break;
    }
    // optional .syscall_types.nr_write_t write_sycall = 5;
    case kWriteSycall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *syscall_t_cnt_.write_sycall_);
      break;
    }
    // optional .syscall_types.sys_generic_t generic_sycall = 6;
    case kGenericSycall: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *syscall_t_cnt_.generic_sycall_);
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void syscall_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.syscall_t)
  GOOGLE_DCHECK_NE(&from, this);
  const syscall_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<syscall_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.syscall_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.syscall_t)
    MergeFrom(*source);
  }
}

void syscall_t::MergeFrom(const syscall_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.syscall_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ident_ = from.ident_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.syscall_t_cnt_case()) {
    case kOpenSyscall: {
      mutable_open_syscall()->::syscall_types::nr_open_t::MergeFrom(from.open_syscall());
      break;
    }
    case kReadSyscall: {
      mutable_read_syscall()->::syscall_types::nr_read_t::MergeFrom(from.read_syscall());
      break;
    }
    case kWriteSycall: {
      mutable_write_sycall()->::syscall_types::nr_write_t::MergeFrom(from.write_sycall());
      break;
    }
    case kGenericSycall: {
      mutable_generic_sycall()->::syscall_types::sys_generic_t::MergeFrom(from.generic_sycall());
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
}

void syscall_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.syscall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void syscall_t::CopyFrom(const syscall_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.syscall_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool syscall_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  switch (syscall_t_cnt_case()) {
    case kOpenSyscall: {
      if (has_open_syscall()) {
        if (!this->open_syscall().IsInitialized()) return false;
      }
      break;
    }
    case kReadSyscall: {
      if (has_read_syscall()) {
        if (!this->read_syscall().IsInitialized()) return false;
      }
      break;
    }
    case kWriteSycall: {
      if (has_write_sycall()) {
        if (!this->write_sycall().IsInitialized()) return false;
      }
      break;
    }
    case kGenericSycall: {
      if (has_generic_sycall()) {
        if (!this->generic_sycall().IsInitialized()) return false;
      }
      break;
    }
    case SYSCALL_T_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void syscall_t::InternalSwap(syscall_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(id_, other->id_);
  swap(ident_, other->ident_);
  swap(syscall_t_cnt_, other->syscall_t_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata syscall_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nr_read_pol::InitAsDefaultInstance() {
}
class nr_read_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<nr_read_pol>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

nr_read_pol::nr_read_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_read_pol)
}
nr_read_pol::nr_read_pol(const nr_read_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_read_pol)
}

void nr_read_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nr_read_pol_syscall_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

nr_read_pol::~nr_read_pol() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_read_pol)
  SharedDtor();
}

void nr_read_pol::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void nr_read_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nr_read_pol& nr_read_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nr_read_pol_syscall_2eproto.base);
  return *internal_default_instance();
}


void nr_read_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_read_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* nr_read_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "syscall_types.nr_read_pol.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool nr_read_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_read_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "syscall_types.nr_read_pol.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_read_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_read_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void nr_read_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_read_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_read_pol.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_read_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* nr_read_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_read_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_read_pol.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_read_pol)
  return target;
}

size_t nr_read_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_read_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nr_read_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_read_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nr_read_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_read_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_read_pol)
    MergeFrom(*source);
  }
}

void nr_read_pol::MergeFrom(const nr_read_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_read_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    _has_bits_[0] |= 0x00000001u;
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void nr_read_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_read_pol::CopyFrom(const nr_read_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_read_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_read_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void nr_read_pol::InternalSwap(nr_read_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata nr_read_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nr_open_t::InitAsDefaultInstance() {
}
class nr_open_t::_Internal {
 public:
  using HasBits = decltype(std::declval<nr_open_t>()._has_bits_);
  static void set_has_file_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flags(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_file_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

nr_open_t::nr_open_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_open_t)
}
nr_open_t::nr_open_t(const nr_open_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&flags_, &from.flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_descriptor_) -
    reinterpret_cast<char*>(&flags_)) + sizeof(file_descriptor_));
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_open_t)
}

void nr_open_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nr_open_t_syscall_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_descriptor_) -
      reinterpret_cast<char*>(&flags_)) + sizeof(file_descriptor_));
}

nr_open_t::~nr_open_t() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_open_t)
  SharedDtor();
}

void nr_open_t::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void nr_open_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nr_open_t& nr_open_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nr_open_t_syscall_2eproto.base);
  return *internal_default_instance();
}


void nr_open_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_open_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&flags_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_descriptor_) -
        reinterpret_cast<char*>(&flags_)) + sizeof(file_descriptor_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* nr_open_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_file_name(), ptr, ctx, "syscall_types.nr_open_t.file_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_flags(&has_bits);
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mode(&has_bits);
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 file_descriptor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_file_descriptor(&has_bits);
          file_descriptor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool nr_open_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_open_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string file_name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "syscall_types.nr_open_t.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required sint32 flags = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_flags(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_SINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 mode = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_mode(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 file_descriptor = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_file_descriptor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_descriptor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_open_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_open_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void nr_open_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_open_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_open_t.file_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // required sint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32(2, this->flags(), output);
  }

  // required uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }

  // required int32 file_descriptor = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(4, this->file_descriptor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_open_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* nr_open_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_open_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.nr_open_t.file_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // required sint32 flags = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->flags(), target);
  }

  // required uint32 mode = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->mode(), target);
  }

  // required int32 file_descriptor = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->file_descriptor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_open_t)
  return target;
}

size_t nr_open_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.nr_open_t)
  size_t total_size = 0;

  if (has_file_name()) {
    // required string file_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  if (has_flags()) {
    // required sint32 flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->flags());
  }

  if (has_mode()) {
    // required uint32 mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->mode());
  }

  if (has_file_descriptor()) {
    // required int32 file_descriptor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_descriptor());
  }

  return total_size;
}
size_t nr_open_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_open_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string file_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_name());

    // required sint32 flags = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->flags());

    // required uint32 mode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->mode());

    // required int32 file_descriptor = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->file_descriptor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nr_open_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_open_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_open_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nr_open_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_open_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_open_t)
    MergeFrom(*source);
  }
}

void nr_open_t::MergeFrom(const nr_open_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_open_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000004u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000008u) {
      file_descriptor_ = from.file_descriptor_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nr_open_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_open_t::CopyFrom(const nr_open_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_open_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_open_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void nr_open_t::InternalSwap(nr_open_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(flags_, other->flags_);
  swap(mode_, other->mode_);
  swap(file_descriptor_, other->file_descriptor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata nr_open_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nr_read_t::InitAsDefaultInstance() {
}
class nr_read_t::_Internal {
 public:
  using HasBits = decltype(std::declval<nr_read_t>()._has_bits_);
  static void set_has_file_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buffer_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count_effective(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

nr_read_t::nr_read_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_read_t)
}
nr_read_t::nr_read_t(const nr_read_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer_data()) {
    buffer_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
  }
  ::memcpy(&buffer_address_, &from.buffer_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_effective_) -
    reinterpret_cast<char*>(&buffer_address_)) + sizeof(count_effective_));
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_read_t)
}

void nr_read_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nr_read_t_syscall_2eproto.base);
  buffer_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buffer_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_effective_) -
      reinterpret_cast<char*>(&buffer_address_)) + sizeof(count_effective_));
}

nr_read_t::~nr_read_t() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_read_t)
  SharedDtor();
}

void nr_read_t::SharedDtor() {
  buffer_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void nr_read_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nr_read_t& nr_read_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nr_read_t_syscall_2eproto.base);
  return *internal_default_instance();
}


void nr_read_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_read_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buffer_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&buffer_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_effective_) -
        reinterpret_cast<char*>(&buffer_address_)) + sizeof(count_effective_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* nr_read_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 file_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_descriptor(&has_bits);
          file_descriptor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 buffer_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_buffer_address(&has_bits);
          buffer_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes buffer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buffer_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count_effective = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count_effective(&has_bits);
          count_effective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool nr_read_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_read_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 file_descriptor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_file_descriptor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_descriptor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 buffer_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_buffer_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buffer_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count_effective = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_count_effective(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_effective_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_read_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_read_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void nr_read_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_read_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 file_descriptor = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->file_descriptor(), output);
  }

  // required uint64 buffer_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->buffer_address(), output);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required bytes buffer_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer_data(), output);
  }

  // required uint32 count_effective = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->count_effective(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_read_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* nr_read_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_read_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 file_descriptor = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_descriptor(), target);
  }

  // required uint64 buffer_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->buffer_address(), target);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required bytes buffer_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer_data(), target);
  }

  // required uint32 count_effective = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_effective(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_read_t)
  return target;
}

size_t nr_read_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.nr_read_t)
  size_t total_size = 0;

  if (has_buffer_data()) {
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buffer_data());
  }

  if (has_buffer_address()) {
    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->buffer_address());
  }

  if (has_file_descriptor()) {
    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_count_effective()) {
    // required uint32 count_effective = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count_effective());
  }

  return total_size;
}
size_t nr_read_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_read_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buffer_data());

    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->buffer_address());

    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());

    // required uint32 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 count_effective = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count_effective());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nr_read_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_read_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_read_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nr_read_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_read_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_read_t)
    MergeFrom(*source);
  }
}

void nr_read_t::MergeFrom(const nr_read_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_read_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buffer_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_address_ = from.buffer_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_descriptor_ = from.file_descriptor_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_effective_ = from.count_effective_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nr_read_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_read_t::CopyFrom(const nr_read_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_read_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_read_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void nr_read_t::InternalSwap(nr_read_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_data_.Swap(&other->buffer_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buffer_address_, other->buffer_address_);
  swap(file_descriptor_, other->file_descriptor_);
  swap(count_, other->count_);
  swap(count_effective_, other->count_effective_);
}

::PROTOBUF_NAMESPACE_ID::Metadata nr_read_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void nr_write_t::InitAsDefaultInstance() {
}
class nr_write_t::_Internal {
 public:
  using HasBits = decltype(std::declval<nr_write_t>()._has_bits_);
  static void set_has_file_descriptor(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_buffer_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_buffer_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_count_effective(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

nr_write_t::nr_write_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.nr_write_t)
}
nr_write_t::nr_write_t(const nr_write_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  buffer_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_buffer_data()) {
    buffer_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
  }
  ::memcpy(&buffer_address_, &from.buffer_address_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_effective_) -
    reinterpret_cast<char*>(&buffer_address_)) + sizeof(count_effective_));
  // @@protoc_insertion_point(copy_constructor:syscall_types.nr_write_t)
}

void nr_write_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_nr_write_t_syscall_2eproto.base);
  buffer_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&buffer_address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_effective_) -
      reinterpret_cast<char*>(&buffer_address_)) + sizeof(count_effective_));
}

nr_write_t::~nr_write_t() {
  // @@protoc_insertion_point(destructor:syscall_types.nr_write_t)
  SharedDtor();
}

void nr_write_t::SharedDtor() {
  buffer_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void nr_write_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const nr_write_t& nr_write_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_nr_write_t_syscall_2eproto.base);
  return *internal_default_instance();
}


void nr_write_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.nr_write_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    buffer_data_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&buffer_address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&count_effective_) -
        reinterpret_cast<char*>(&buffer_address_)) + sizeof(count_effective_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* nr_write_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 file_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_file_descriptor(&has_bits);
          file_descriptor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 buffer_address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_buffer_address(&has_bits);
          buffer_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_count(&has_bits);
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes buffer_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(mutable_buffer_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 count_effective = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_count_effective(&has_bits);
          count_effective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool nr_write_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.nr_write_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 file_descriptor = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_file_descriptor(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_descriptor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 buffer_address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_buffer_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffer_address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes buffer_data = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->mutable_buffer_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 count_effective = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_count_effective(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_effective_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.nr_write_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.nr_write_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void nr_write_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.nr_write_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 file_descriptor = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(1, this->file_descriptor(), output);
  }

  // required uint64 buffer_address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->buffer_address(), output);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // required bytes buffer_data = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->buffer_data(), output);
  }

  // required uint32 count_effective = 5;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->count_effective(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.nr_write_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* nr_write_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.nr_write_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 file_descriptor = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->file_descriptor(), target);
  }

  // required uint64 buffer_address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->buffer_address(), target);
  }

  // required uint32 count = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // required bytes buffer_data = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBytesToArray(
        4, this->buffer_data(), target);
  }

  // required uint32 count_effective = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->count_effective(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.nr_write_t)
  return target;
}

size_t nr_write_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.nr_write_t)
  size_t total_size = 0;

  if (has_buffer_data()) {
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buffer_data());
  }

  if (has_buffer_address()) {
    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->buffer_address());
  }

  if (has_file_descriptor()) {
    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());
  }

  if (has_count()) {
    // required uint32 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());
  }

  if (has_count_effective()) {
    // required uint32 count_effective = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count_effective());
  }

  return total_size;
}
size_t nr_write_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.nr_write_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes buffer_data = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->buffer_data());

    // required uint64 buffer_address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->buffer_address());

    // required uint32 file_descriptor = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->file_descriptor());

    // required uint32 count = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count());

    // required uint32 count_effective = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->count_effective());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void nr_write_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.nr_write_t)
  GOOGLE_DCHECK_NE(&from, this);
  const nr_write_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<nr_write_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.nr_write_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.nr_write_t)
    MergeFrom(*source);
  }
}

void nr_write_t::MergeFrom(const nr_write_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.nr_write_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      buffer_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.buffer_data_);
    }
    if (cached_has_bits & 0x00000002u) {
      buffer_address_ = from.buffer_address_;
    }
    if (cached_has_bits & 0x00000004u) {
      file_descriptor_ = from.file_descriptor_;
    }
    if (cached_has_bits & 0x00000008u) {
      count_ = from.count_;
    }
    if (cached_has_bits & 0x00000010u) {
      count_effective_ = from.count_effective_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void nr_write_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.nr_write_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void nr_write_t::CopyFrom(const nr_write_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.nr_write_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool nr_write_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void nr_write_t::InternalSwap(nr_write_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  buffer_data_.Swap(&other->buffer_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(buffer_address_, other->buffer_address_);
  swap(file_descriptor_, other->file_descriptor_);
  swap(count_, other->count_);
  swap(count_effective_, other->count_effective_);
}

::PROTOBUF_NAMESPACE_ID::Metadata nr_write_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void sys_generic_t::InitAsDefaultInstance() {
}
class sys_generic_t::_Internal {
 public:
  using HasBits = decltype(std::declval<sys_generic_t>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

sys_generic_t::sys_generic_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:syscall_types.sys_generic_t)
}
sys_generic_t::sys_generic_t(const sys_generic_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:syscall_types.sys_generic_t)
}

void sys_generic_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_sys_generic_t_syscall_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_ = 0u;
}

sys_generic_t::~sys_generic_t() {
  // @@protoc_insertion_point(destructor:syscall_types.sys_generic_t)
  SharedDtor();
}

void sys_generic_t::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void sys_generic_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const sys_generic_t& sys_generic_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_sys_generic_t_syscall_2eproto.base);
  return *internal_default_instance();
}


void sys_generic_t::Clear() {
// @@protoc_insertion_point(message_clear_start:syscall_types.sys_generic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  address_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* sys_generic_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "syscall_types.sys_generic_t.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_address(&has_bits);
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool sys_generic_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:syscall_types.sys_generic_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "syscall_types.sys_generic_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:syscall_types.sys_generic_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:syscall_types.sys_generic_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void sys_generic_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:syscall_types.sys_generic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.sys_generic_t.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 address = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(2, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:syscall_types.sys_generic_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* sys_generic_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:syscall_types.sys_generic_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "syscall_types.sys_generic_t.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 address = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:syscall_types.sys_generic_t)
  return target;
}

size_t sys_generic_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:syscall_types.sys_generic_t)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_address()) {
    // required uint32 address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->address());
  }

  return total_size;
}
size_t sys_generic_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:syscall_types.sys_generic_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void sys_generic_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:syscall_types.sys_generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  const sys_generic_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<sys_generic_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:syscall_types.sys_generic_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:syscall_types.sys_generic_t)
    MergeFrom(*source);
  }
}

void sys_generic_t::MergeFrom(const sys_generic_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:syscall_types.sys_generic_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      address_ = from.address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void sys_generic_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:syscall_types.sys_generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sys_generic_t::CopyFrom(const sys_generic_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:syscall_types.sys_generic_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sys_generic_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void sys_generic_t::InternalSwap(sys_generic_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata sys_generic_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace syscall_types
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::syscall_types::syscall_pol* Arena::CreateMaybeMessage< ::syscall_types::syscall_pol >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::syscall_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::syscall_types::syscall_t* Arena::CreateMaybeMessage< ::syscall_types::syscall_t >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::syscall_t >(arena);
}
template<> PROTOBUF_NOINLINE ::syscall_types::nr_read_pol* Arena::CreateMaybeMessage< ::syscall_types::nr_read_pol >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::nr_read_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::syscall_types::nr_open_t* Arena::CreateMaybeMessage< ::syscall_types::nr_open_t >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::nr_open_t >(arena);
}
template<> PROTOBUF_NOINLINE ::syscall_types::nr_read_t* Arena::CreateMaybeMessage< ::syscall_types::nr_read_t >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::nr_read_t >(arena);
}
template<> PROTOBUF_NOINLINE ::syscall_types::nr_write_t* Arena::CreateMaybeMessage< ::syscall_types::nr_write_t >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::nr_write_t >(arena);
}
template<> PROTOBUF_NOINLINE ::syscall_types::sys_generic_t* Arena::CreateMaybeMessage< ::syscall_types::sys_generic_t >(Arena* arena) {
  return Arena::CreateInternal< ::syscall_types::sys_generic_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
