// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_instruction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_instruction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_instruction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_instruction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instruction_2eproto;
namespace instruction_pol {
class cpuid_pol;
class cpuid_polDefaultTypeInternal;
extern cpuid_polDefaultTypeInternal _cpuid_pol_default_instance_;
class instr_pol;
class instr_polDefaultTypeInternal;
extern instr_polDefaultTypeInternal _instr_pol_default_instance_;
}  // namespace instruction_pol
PROTOBUF_NAMESPACE_OPEN
template<> ::instruction_pol::cpuid_pol* Arena::CreateMaybeMessage<::instruction_pol::cpuid_pol>(Arena*);
template<> ::instruction_pol::instr_pol* Arena::CreateMaybeMessage<::instruction_pol::instr_pol>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace instruction_pol {

enum instr_ident : int {
  INVALID_INST = 0,
  CPUID = 1
};
bool instr_ident_IsValid(int value);
constexpr instr_ident instr_ident_MIN = INVALID_INST;
constexpr instr_ident instr_ident_MAX = CPUID;
constexpr int instr_ident_ARRAYSIZE = instr_ident_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* instr_ident_descriptor();
template<typename T>
inline const std::string& instr_ident_Name(T enum_t_value) {
  static_assert(::std::is_same<T, instr_ident>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function instr_ident_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    instr_ident_descriptor(), enum_t_value);
}
inline bool instr_ident_Parse(
    const std::string& name, instr_ident* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<instr_ident>(
    instr_ident_descriptor(), name, value);
}
// ===================================================================

class instr_pol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruction_pol.instr_pol) */ {
 public:
  instr_pol();
  virtual ~instr_pol();

  instr_pol(const instr_pol& from);
  instr_pol(instr_pol&& from) noexcept
    : instr_pol() {
    *this = ::std::move(from);
  }

  inline instr_pol& operator=(const instr_pol& from) {
    CopyFrom(from);
    return *this;
  }
  inline instr_pol& operator=(instr_pol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const instr_pol& default_instance();

  enum InstrCntCase {
    kCpuid = 3,
    INSTR_CNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const instr_pol* internal_default_instance() {
    return reinterpret_cast<const instr_pol*>(
               &_instr_pol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(instr_pol& a, instr_pol& b) {
    a.Swap(&b);
  }
  inline void Swap(instr_pol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline instr_pol* New() const final {
    return CreateMaybeMessage<instr_pol>(nullptr);
  }

  instr_pol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<instr_pol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const instr_pol& from);
  void MergeFrom(const instr_pol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(instr_pol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruction_pol.instr_pol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruction_2eproto);
    return ::descriptor_table_instruction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpcodeFieldNumber = 2,
    kIdentFieldNumber = 1,
    kCpuidFieldNumber = 3,
  };
  // required string opcode = 2;
  bool has_opcode() const;
  void clear_opcode();
  const std::string& opcode() const;
  void set_opcode(const std::string& value);
  void set_opcode(std::string&& value);
  void set_opcode(const char* value);
  void set_opcode(const char* value, size_t size);
  std::string* mutable_opcode();
  std::string* release_opcode();
  void set_allocated_opcode(std::string* opcode);

  // required .instruction_pol.instr_ident ident = 1;
  bool has_ident() const;
  void clear_ident();
  ::instruction_pol::instr_ident ident() const;
  void set_ident(::instruction_pol::instr_ident value);

  // optional .instruction_pol.cpuid_pol cpuid = 3;
  bool has_cpuid() const;
  void clear_cpuid();
  const ::instruction_pol::cpuid_pol& cpuid() const;
  ::instruction_pol::cpuid_pol* release_cpuid();
  ::instruction_pol::cpuid_pol* mutable_cpuid();
  void set_allocated_cpuid(::instruction_pol::cpuid_pol* cpuid);

  void clear_instr_cnt();
  InstrCntCase instr_cnt_case() const;
  // @@protoc_insertion_point(class_scope:instruction_pol.instr_pol)
 private:
  class _Internal;
  void set_has_cpuid();

  inline bool has_instr_cnt() const;
  inline void clear_has_instr_cnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opcode_;
  int ident_;
  union InstrCntUnion {
    InstrCntUnion() {}
    ::instruction_pol::cpuid_pol* cpuid_;
  } instr_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_instruction_2eproto;
};
// -------------------------------------------------------------------

class cpuid_pol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:instruction_pol.cpuid_pol) */ {
 public:
  cpuid_pol();
  virtual ~cpuid_pol();

  cpuid_pol(const cpuid_pol& from);
  cpuid_pol(cpuid_pol&& from) noexcept
    : cpuid_pol() {
    *this = ::std::move(from);
  }

  inline cpuid_pol& operator=(const cpuid_pol& from) {
    CopyFrom(from);
    return *this;
  }
  inline cpuid_pol& operator=(cpuid_pol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const cpuid_pol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const cpuid_pol* internal_default_instance() {
    return reinterpret_cast<const cpuid_pol*>(
               &_cpuid_pol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(cpuid_pol& a, cpuid_pol& b) {
    a.Swap(&b);
  }
  inline void Swap(cpuid_pol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline cpuid_pol* New() const final {
    return CreateMaybeMessage<cpuid_pol>(nullptr);
  }

  cpuid_pol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<cpuid_pol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const cpuid_pol& from);
  void MergeFrom(const cpuid_pol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(cpuid_pol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "instruction_pol.cpuid_pol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_instruction_2eproto);
    return ::descriptor_table_instruction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEaxFieldNumber = 1,
    kEbxFieldNumber = 2,
    kEcxFieldNumber = 3,
    kEdxFieldNumber = 4,
  };
  // optional .common.action eax = 1 [default = DEFAULT];
  bool has_eax() const;
  void clear_eax();
  ::common::action eax() const;
  void set_eax(::common::action value);

  // optional .common.action ebx = 2 [default = DEFAULT];
  bool has_ebx() const;
  void clear_ebx();
  ::common::action ebx() const;
  void set_ebx(::common::action value);

  // optional .common.action ecx = 3 [default = DEFAULT];
  bool has_ecx() const;
  void clear_ecx();
  ::common::action ecx() const;
  void set_ecx(::common::action value);

  // optional .common.action edx = 4 [default = DEFAULT];
  bool has_edx() const;
  void clear_edx();
  ::common::action edx() const;
  void set_edx(::common::action value);

  // @@protoc_insertion_point(class_scope:instruction_pol.cpuid_pol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int eax_;
  int ebx_;
  int ecx_;
  int edx_;
  friend struct ::TableStruct_instruction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// instr_pol

// required .instruction_pol.instr_ident ident = 1;
inline bool instr_pol::has_ident() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void instr_pol::clear_ident() {
  ident_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::instruction_pol::instr_ident instr_pol::ident() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.ident)
  return static_cast< ::instruction_pol::instr_ident >(ident_);
}
inline void instr_pol::set_ident(::instruction_pol::instr_ident value) {
  assert(::instruction_pol::instr_ident_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ident_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.instr_pol.ident)
}

// required string opcode = 2;
inline bool instr_pol::has_opcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void instr_pol::clear_opcode() {
  opcode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& instr_pol::opcode() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.opcode)
  return opcode_.GetNoArena();
}
inline void instr_pol::set_opcode(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:instruction_pol.instr_pol.opcode)
}
inline void instr_pol::set_opcode(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:instruction_pol.instr_pol.opcode)
}
inline void instr_pol::set_opcode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:instruction_pol.instr_pol.opcode)
}
inline void instr_pol::set_opcode(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  opcode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:instruction_pol.instr_pol.opcode)
}
inline std::string* instr_pol::mutable_opcode() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:instruction_pol.instr_pol.opcode)
  return opcode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* instr_pol::release_opcode() {
  // @@protoc_insertion_point(field_release:instruction_pol.instr_pol.opcode)
  if (!has_opcode()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opcode_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void instr_pol::set_allocated_opcode(std::string* opcode) {
  if (opcode != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opcode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opcode);
  // @@protoc_insertion_point(field_set_allocated:instruction_pol.instr_pol.opcode)
}

// optional .instruction_pol.cpuid_pol cpuid = 3;
inline bool instr_pol::has_cpuid() const {
  return instr_cnt_case() == kCpuid;
}
inline void instr_pol::set_has_cpuid() {
  _oneof_case_[0] = kCpuid;
}
inline void instr_pol::clear_cpuid() {
  if (has_cpuid()) {
    delete instr_cnt_.cpuid_;
    clear_has_instr_cnt();
  }
}
inline ::instruction_pol::cpuid_pol* instr_pol::release_cpuid() {
  // @@protoc_insertion_point(field_release:instruction_pol.instr_pol.cpuid)
  if (has_cpuid()) {
    clear_has_instr_cnt();
      ::instruction_pol::cpuid_pol* temp = instr_cnt_.cpuid_;
    instr_cnt_.cpuid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::instruction_pol::cpuid_pol& instr_pol::cpuid() const {
  // @@protoc_insertion_point(field_get:instruction_pol.instr_pol.cpuid)
  return has_cpuid()
      ? *instr_cnt_.cpuid_
      : *reinterpret_cast< ::instruction_pol::cpuid_pol*>(&::instruction_pol::_cpuid_pol_default_instance_);
}
inline ::instruction_pol::cpuid_pol* instr_pol::mutable_cpuid() {
  if (!has_cpuid()) {
    clear_instr_cnt();
    set_has_cpuid();
    instr_cnt_.cpuid_ = CreateMaybeMessage< ::instruction_pol::cpuid_pol >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:instruction_pol.instr_pol.cpuid)
  return instr_cnt_.cpuid_;
}

inline bool instr_pol::has_instr_cnt() const {
  return instr_cnt_case() != INSTR_CNT_NOT_SET;
}
inline void instr_pol::clear_has_instr_cnt() {
  _oneof_case_[0] = INSTR_CNT_NOT_SET;
}
inline instr_pol::InstrCntCase instr_pol::instr_cnt_case() const {
  return instr_pol::InstrCntCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// cpuid_pol

// optional .common.action eax = 1 [default = DEFAULT];
inline bool cpuid_pol::has_eax() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void cpuid_pol::clear_eax() {
  eax_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::common::action cpuid_pol::eax() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.eax)
  return static_cast< ::common::action >(eax_);
}
inline void cpuid_pol::set_eax(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  eax_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.eax)
}

// optional .common.action ebx = 2 [default = DEFAULT];
inline bool cpuid_pol::has_ebx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void cpuid_pol::clear_ebx() {
  ebx_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::common::action cpuid_pol::ebx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.ebx)
  return static_cast< ::common::action >(ebx_);
}
inline void cpuid_pol::set_ebx(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ebx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.ebx)
}

// optional .common.action ecx = 3 [default = DEFAULT];
inline bool cpuid_pol::has_ecx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void cpuid_pol::clear_ecx() {
  ecx_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::common::action cpuid_pol::ecx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.ecx)
  return static_cast< ::common::action >(ecx_);
}
inline void cpuid_pol::set_ecx(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ecx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.ecx)
}

// optional .common.action edx = 4 [default = DEFAULT];
inline bool cpuid_pol::has_edx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void cpuid_pol::clear_edx() {
  edx_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::common::action cpuid_pol::edx() const {
  // @@protoc_insertion_point(field_get:instruction_pol.cpuid_pol.edx)
  return static_cast< ::common::action >(edx_);
}
inline void cpuid_pol::set_edx(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  edx_ = value;
  // @@protoc_insertion_point(field_set:instruction_pol.cpuid_pol.edx)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace instruction_pol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::instruction_pol::instr_ident> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::instruction_pol::instr_ident>() {
  return ::instruction_pol::instr_ident_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_instruction_2eproto
