// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: syscall.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_syscall_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_syscall_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_syscall_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_syscall_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_syscall_2eproto;
namespace syscall_types {
class nr_open_t;
class nr_open_tDefaultTypeInternal;
extern nr_open_tDefaultTypeInternal _nr_open_t_default_instance_;
class nr_read_pol;
class nr_read_polDefaultTypeInternal;
extern nr_read_polDefaultTypeInternal _nr_read_pol_default_instance_;
class nr_read_t;
class nr_read_tDefaultTypeInternal;
extern nr_read_tDefaultTypeInternal _nr_read_t_default_instance_;
class nr_write_t;
class nr_write_tDefaultTypeInternal;
extern nr_write_tDefaultTypeInternal _nr_write_t_default_instance_;
class sys_generic_t;
class sys_generic_tDefaultTypeInternal;
extern sys_generic_tDefaultTypeInternal _sys_generic_t_default_instance_;
class syscall_pol;
class syscall_polDefaultTypeInternal;
extern syscall_polDefaultTypeInternal _syscall_pol_default_instance_;
class syscall_t;
class syscall_tDefaultTypeInternal;
extern syscall_tDefaultTypeInternal _syscall_t_default_instance_;
}  // namespace syscall_types
PROTOBUF_NAMESPACE_OPEN
template<> ::syscall_types::nr_open_t* Arena::CreateMaybeMessage<::syscall_types::nr_open_t>(Arena*);
template<> ::syscall_types::nr_read_pol* Arena::CreateMaybeMessage<::syscall_types::nr_read_pol>(Arena*);
template<> ::syscall_types::nr_read_t* Arena::CreateMaybeMessage<::syscall_types::nr_read_t>(Arena*);
template<> ::syscall_types::nr_write_t* Arena::CreateMaybeMessage<::syscall_types::nr_write_t>(Arena*);
template<> ::syscall_types::sys_generic_t* Arena::CreateMaybeMessage<::syscall_types::sys_generic_t>(Arena*);
template<> ::syscall_types::syscall_pol* Arena::CreateMaybeMessage<::syscall_types::syscall_pol>(Arena*);
template<> ::syscall_types::syscall_t* Arena::CreateMaybeMessage<::syscall_types::syscall_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace syscall_types {

enum syscall_ident : int {
  NR_READ = 0,
  NR_WRITE = 1,
  NR_OPEN = 2,
  GENERIC = 3
};
bool syscall_ident_IsValid(int value);
constexpr syscall_ident syscall_ident_MIN = NR_READ;
constexpr syscall_ident syscall_ident_MAX = GENERIC;
constexpr int syscall_ident_ARRAYSIZE = syscall_ident_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* syscall_ident_descriptor();
template<typename T>
inline const std::string& syscall_ident_Name(T enum_t_value) {
  static_assert(::std::is_same<T, syscall_ident>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function syscall_ident_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    syscall_ident_descriptor(), enum_t_value);
}
inline bool syscall_ident_Parse(
    const std::string& name, syscall_ident* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<syscall_ident>(
    syscall_ident_descriptor(), name, value);
}
// ===================================================================

class syscall_pol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.syscall_pol) */ {
 public:
  syscall_pol();
  virtual ~syscall_pol();

  syscall_pol(const syscall_pol& from);
  syscall_pol(syscall_pol&& from) noexcept
    : syscall_pol() {
    *this = ::std::move(from);
  }

  inline syscall_pol& operator=(const syscall_pol& from) {
    CopyFrom(from);
    return *this;
  }
  inline syscall_pol& operator=(syscall_pol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const syscall_pol& default_instance();

  enum SyscallPolCntCase {
    kNrRead = 6,
    SYSCALL_POL_CNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const syscall_pol* internal_default_instance() {
    return reinterpret_cast<const syscall_pol*>(
               &_syscall_pol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(syscall_pol& a, syscall_pol& b) {
    a.Swap(&b);
  }
  inline void Swap(syscall_pol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline syscall_pol* New() const final {
    return CreateMaybeMessage<syscall_pol>(nullptr);
  }

  syscall_pol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<syscall_pol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const syscall_pol& from);
  void MergeFrom(const syscall_pol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(syscall_pol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.syscall_pol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRestrictAddressesFieldNumber = 5,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kIdentFieldNumber = 3,
    kActionFieldNumber = 4,
    kNrReadFieldNumber = 6,
  };
  // repeated uint64 restrict_addresses = 5;
  int restrict_addresses_size() const;
  void clear_restrict_addresses();
  ::PROTOBUF_NAMESPACE_ID::uint64 restrict_addresses(int index) const;
  void set_restrict_addresses(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_restrict_addresses(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      restrict_addresses() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_restrict_addresses();

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .syscall_types.syscall_ident ident = 3;
  bool has_ident() const;
  void clear_ident();
  ::syscall_types::syscall_ident ident() const;
  void set_ident(::syscall_types::syscall_ident value);

  // required .common.tracing_action action = 4;
  bool has_action() const;
  void clear_action();
  ::common::tracing_action action() const;
  void set_action(::common::tracing_action value);

  // optional .syscall_types.nr_read_pol nr_read = 6;
  bool has_nr_read() const;
  void clear_nr_read();
  const ::syscall_types::nr_read_pol& nr_read() const;
  ::syscall_types::nr_read_pol* release_nr_read();
  ::syscall_types::nr_read_pol* mutable_nr_read();
  void set_allocated_nr_read(::syscall_types::nr_read_pol* nr_read);

  void clear_syscall_pol_cnt();
  SyscallPolCntCase syscall_pol_cnt_case() const;
  // @@protoc_insertion_point(class_scope:syscall_types.syscall_pol)
 private:
  class _Internal;
  void set_has_nr_read();

  inline bool has_syscall_pol_cnt() const;
  inline void clear_has_syscall_pol_cnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > restrict_addresses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int ident_;
  int action_;
  union SyscallPolCntUnion {
    SyscallPolCntUnion() {}
    ::syscall_types::nr_read_pol* nr_read_;
  } syscall_pol_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_syscall_2eproto;
};
// -------------------------------------------------------------------

class syscall_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.syscall_t) */ {
 public:
  syscall_t();
  virtual ~syscall_t();

  syscall_t(const syscall_t& from);
  syscall_t(syscall_t&& from) noexcept
    : syscall_t() {
    *this = ::std::move(from);
  }

  inline syscall_t& operator=(const syscall_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline syscall_t& operator=(syscall_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const syscall_t& default_instance();

  enum SyscallTCntCase {
    kOpenSyscall = 3,
    kReadSyscall = 4,
    kWriteSycall = 5,
    kGenericSycall = 6,
    SYSCALL_T_CNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const syscall_t* internal_default_instance() {
    return reinterpret_cast<const syscall_t*>(
               &_syscall_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(syscall_t& a, syscall_t& b) {
    a.Swap(&b);
  }
  inline void Swap(syscall_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline syscall_t* New() const final {
    return CreateMaybeMessage<syscall_t>(nullptr);
  }

  syscall_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<syscall_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const syscall_t& from);
  void MergeFrom(const syscall_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(syscall_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.syscall_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIdentFieldNumber = 2,
    kOpenSyscallFieldNumber = 3,
    kReadSyscallFieldNumber = 4,
    kWriteSycallFieldNumber = 5,
    kGenericSycallFieldNumber = 6,
  };
  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .syscall_types.syscall_ident ident = 2;
  bool has_ident() const;
  void clear_ident();
  ::syscall_types::syscall_ident ident() const;
  void set_ident(::syscall_types::syscall_ident value);

  // optional .syscall_types.nr_open_t open_syscall = 3;
  bool has_open_syscall() const;
  void clear_open_syscall();
  const ::syscall_types::nr_open_t& open_syscall() const;
  ::syscall_types::nr_open_t* release_open_syscall();
  ::syscall_types::nr_open_t* mutable_open_syscall();
  void set_allocated_open_syscall(::syscall_types::nr_open_t* open_syscall);

  // optional .syscall_types.nr_read_t read_syscall = 4;
  bool has_read_syscall() const;
  void clear_read_syscall();
  const ::syscall_types::nr_read_t& read_syscall() const;
  ::syscall_types::nr_read_t* release_read_syscall();
  ::syscall_types::nr_read_t* mutable_read_syscall();
  void set_allocated_read_syscall(::syscall_types::nr_read_t* read_syscall);

  // optional .syscall_types.nr_write_t write_sycall = 5;
  bool has_write_sycall() const;
  void clear_write_sycall();
  const ::syscall_types::nr_write_t& write_sycall() const;
  ::syscall_types::nr_write_t* release_write_sycall();
  ::syscall_types::nr_write_t* mutable_write_sycall();
  void set_allocated_write_sycall(::syscall_types::nr_write_t* write_sycall);

  // optional .syscall_types.sys_generic_t generic_sycall = 6;
  bool has_generic_sycall() const;
  void clear_generic_sycall();
  const ::syscall_types::sys_generic_t& generic_sycall() const;
  ::syscall_types::sys_generic_t* release_generic_sycall();
  ::syscall_types::sys_generic_t* mutable_generic_sycall();
  void set_allocated_generic_sycall(::syscall_types::sys_generic_t* generic_sycall);

  void clear_syscall_t_cnt();
  SyscallTCntCase syscall_t_cnt_case() const;
  // @@protoc_insertion_point(class_scope:syscall_types.syscall_t)
 private:
  class _Internal;
  void set_has_open_syscall();
  void set_has_read_syscall();
  void set_has_write_sycall();
  void set_has_generic_sycall();

  inline bool has_syscall_t_cnt() const;
  inline void clear_has_syscall_t_cnt();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  int ident_;
  union SyscallTCntUnion {
    SyscallTCntUnion() {}
    ::syscall_types::nr_open_t* open_syscall_;
    ::syscall_types::nr_read_t* read_syscall_;
    ::syscall_types::nr_write_t* write_sycall_;
    ::syscall_types::sys_generic_t* generic_sycall_;
  } syscall_t_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_syscall_2eproto;
};
// -------------------------------------------------------------------

class nr_read_pol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.nr_read_pol) */ {
 public:
  nr_read_pol();
  virtual ~nr_read_pol();

  nr_read_pol(const nr_read_pol& from);
  nr_read_pol(nr_read_pol&& from) noexcept
    : nr_read_pol() {
    *this = ::std::move(from);
  }

  inline nr_read_pol& operator=(const nr_read_pol& from) {
    CopyFrom(from);
    return *this;
  }
  inline nr_read_pol& operator=(nr_read_pol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nr_read_pol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nr_read_pol* internal_default_instance() {
    return reinterpret_cast<const nr_read_pol*>(
               &_nr_read_pol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(nr_read_pol& a, nr_read_pol& b) {
    a.Swap(&b);
  }
  inline void Swap(nr_read_pol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nr_read_pol* New() const final {
    return CreateMaybeMessage<nr_read_pol>(nullptr);
  }

  nr_read_pol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nr_read_pol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nr_read_pol& from);
  void MergeFrom(const nr_read_pol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nr_read_pol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.nr_read_pol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:syscall_types.nr_read_pol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  friend struct ::TableStruct_syscall_2eproto;
};
// -------------------------------------------------------------------

class nr_open_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.nr_open_t) */ {
 public:
  nr_open_t();
  virtual ~nr_open_t();

  nr_open_t(const nr_open_t& from);
  nr_open_t(nr_open_t&& from) noexcept
    : nr_open_t() {
    *this = ::std::move(from);
  }

  inline nr_open_t& operator=(const nr_open_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline nr_open_t& operator=(nr_open_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nr_open_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nr_open_t* internal_default_instance() {
    return reinterpret_cast<const nr_open_t*>(
               &_nr_open_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(nr_open_t& a, nr_open_t& b) {
    a.Swap(&b);
  }
  inline void Swap(nr_open_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nr_open_t* New() const final {
    return CreateMaybeMessage<nr_open_t>(nullptr);
  }

  nr_open_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nr_open_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nr_open_t& from);
  void MergeFrom(const nr_open_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nr_open_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.nr_open_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFlagsFieldNumber = 2,
    kModeFieldNumber = 3,
    kFileDescriptorFieldNumber = 4,
  };
  // required string file_name = 1;
  bool has_file_name() const;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // required sint32 flags = 2;
  bool has_flags() const;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);

  // required uint32 mode = 3;
  bool has_mode() const;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::uint32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required int32 file_descriptor = 4;
  bool has_file_descriptor() const;
  void clear_file_descriptor();
  ::PROTOBUF_NAMESPACE_ID::int32 file_descriptor() const;
  void set_file_descriptor(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:syscall_types.nr_open_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  ::PROTOBUF_NAMESPACE_ID::uint32 mode_;
  ::PROTOBUF_NAMESPACE_ID::int32 file_descriptor_;
  friend struct ::TableStruct_syscall_2eproto;
};
// -------------------------------------------------------------------

class nr_read_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.nr_read_t) */ {
 public:
  nr_read_t();
  virtual ~nr_read_t();

  nr_read_t(const nr_read_t& from);
  nr_read_t(nr_read_t&& from) noexcept
    : nr_read_t() {
    *this = ::std::move(from);
  }

  inline nr_read_t& operator=(const nr_read_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline nr_read_t& operator=(nr_read_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nr_read_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nr_read_t* internal_default_instance() {
    return reinterpret_cast<const nr_read_t*>(
               &_nr_read_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(nr_read_t& a, nr_read_t& b) {
    a.Swap(&b);
  }
  inline void Swap(nr_read_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nr_read_t* New() const final {
    return CreateMaybeMessage<nr_read_t>(nullptr);
  }

  nr_read_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nr_read_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nr_read_t& from);
  void MergeFrom(const nr_read_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nr_read_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.nr_read_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferDataFieldNumber = 4,
    kBufferAddressFieldNumber = 2,
    kFileDescriptorFieldNumber = 1,
    kCountFieldNumber = 3,
    kCountEffectiveFieldNumber = 5,
  };
  // required bytes buffer_data = 4;
  bool has_buffer_data() const;
  void clear_buffer_data();
  const std::string& buffer_data() const;
  void set_buffer_data(const std::string& value);
  void set_buffer_data(std::string&& value);
  void set_buffer_data(const char* value);
  void set_buffer_data(const void* value, size_t size);
  std::string* mutable_buffer_data();
  std::string* release_buffer_data();
  void set_allocated_buffer_data(std::string* buffer_data);

  // required uint64 buffer_address = 2;
  bool has_buffer_address() const;
  void clear_buffer_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_address() const;
  void set_buffer_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 file_descriptor = 1;
  bool has_file_descriptor() const;
  void clear_file_descriptor();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_descriptor() const;
  void set_file_descriptor(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 count = 3;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 count_effective = 5;
  bool has_count_effective() const;
  void clear_count_effective();
  ::PROTOBUF_NAMESPACE_ID::uint32 count_effective() const;
  void set_count_effective(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:syscall_types.nr_read_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_effective_;
  friend struct ::TableStruct_syscall_2eproto;
};
// -------------------------------------------------------------------

class nr_write_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.nr_write_t) */ {
 public:
  nr_write_t();
  virtual ~nr_write_t();

  nr_write_t(const nr_write_t& from);
  nr_write_t(nr_write_t&& from) noexcept
    : nr_write_t() {
    *this = ::std::move(from);
  }

  inline nr_write_t& operator=(const nr_write_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline nr_write_t& operator=(nr_write_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const nr_write_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const nr_write_t* internal_default_instance() {
    return reinterpret_cast<const nr_write_t*>(
               &_nr_write_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(nr_write_t& a, nr_write_t& b) {
    a.Swap(&b);
  }
  inline void Swap(nr_write_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline nr_write_t* New() const final {
    return CreateMaybeMessage<nr_write_t>(nullptr);
  }

  nr_write_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<nr_write_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const nr_write_t& from);
  void MergeFrom(const nr_write_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(nr_write_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.nr_write_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferDataFieldNumber = 4,
    kBufferAddressFieldNumber = 2,
    kFileDescriptorFieldNumber = 1,
    kCountFieldNumber = 3,
    kCountEffectiveFieldNumber = 5,
  };
  // required bytes buffer_data = 4;
  bool has_buffer_data() const;
  void clear_buffer_data();
  const std::string& buffer_data() const;
  void set_buffer_data(const std::string& value);
  void set_buffer_data(std::string&& value);
  void set_buffer_data(const char* value);
  void set_buffer_data(const void* value, size_t size);
  std::string* mutable_buffer_data();
  std::string* release_buffer_data();
  void set_allocated_buffer_data(std::string* buffer_data);

  // required uint64 buffer_address = 2;
  bool has_buffer_address() const;
  void clear_buffer_address();
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_address() const;
  void set_buffer_address(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 file_descriptor = 1;
  bool has_file_descriptor() const;
  void clear_file_descriptor();
  ::PROTOBUF_NAMESPACE_ID::uint32 file_descriptor() const;
  void set_file_descriptor(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 count = 3;
  bool has_count() const;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required uint32 count_effective = 5;
  bool has_count_effective() const;
  void clear_count_effective();
  ::PROTOBUF_NAMESPACE_ID::uint32 count_effective() const;
  void set_count_effective(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:syscall_types.nr_write_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buffer_data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 buffer_address_;
  ::PROTOBUF_NAMESPACE_ID::uint32 file_descriptor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_effective_;
  friend struct ::TableStruct_syscall_2eproto;
};
// -------------------------------------------------------------------

class sys_generic_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:syscall_types.sys_generic_t) */ {
 public:
  sys_generic_t();
  virtual ~sys_generic_t();

  sys_generic_t(const sys_generic_t& from);
  sys_generic_t(sys_generic_t&& from) noexcept
    : sys_generic_t() {
    *this = ::std::move(from);
  }

  inline sys_generic_t& operator=(const sys_generic_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline sys_generic_t& operator=(sys_generic_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const sys_generic_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const sys_generic_t* internal_default_instance() {
    return reinterpret_cast<const sys_generic_t*>(
               &_sys_generic_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(sys_generic_t& a, sys_generic_t& b) {
    a.Swap(&b);
  }
  inline void Swap(sys_generic_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline sys_generic_t* New() const final {
    return CreateMaybeMessage<sys_generic_t>(nullptr);
  }

  sys_generic_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<sys_generic_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const sys_generic_t& from);
  void MergeFrom(const sys_generic_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(sys_generic_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "syscall_types.sys_generic_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_syscall_2eproto);
    return ::descriptor_table_syscall_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required uint32 address = 2;
  bool has_address() const;
  void clear_address();
  ::PROTOBUF_NAMESPACE_ID::uint32 address() const;
  void set_address(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:syscall_types.sys_generic_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 address_;
  friend struct ::TableStruct_syscall_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// syscall_pol

// required uint32 id = 1;
inline bool syscall_pol::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void syscall_pol::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 syscall_pol::id() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.id)
  return id_;
}
inline void syscall_pol::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.id)
}

// required string name = 2;
inline bool syscall_pol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void syscall_pol::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& syscall_pol::name() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.name)
  return name_.GetNoArena();
}
inline void syscall_pol::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.name)
}
inline void syscall_pol::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.syscall_pol.name)
}
inline void syscall_pol::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.syscall_pol.name)
}
inline void syscall_pol::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.syscall_pol.name)
}
inline std::string* syscall_pol::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_pol.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* syscall_pol::release_name() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_pol.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void syscall_pol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.syscall_pol.name)
}

// required .syscall_types.syscall_ident ident = 3;
inline bool syscall_pol::has_ident() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void syscall_pol::clear_ident() {
  ident_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::syscall_types::syscall_ident syscall_pol::ident() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.ident)
  return static_cast< ::syscall_types::syscall_ident >(ident_);
}
inline void syscall_pol::set_ident(::syscall_types::syscall_ident value) {
  assert(::syscall_types::syscall_ident_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ident_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.ident)
}

// required .common.tracing_action action = 4;
inline bool syscall_pol::has_action() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void syscall_pol::clear_action() {
  action_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::common::tracing_action syscall_pol::action() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.action)
  return static_cast< ::common::tracing_action >(action_);
}
inline void syscall_pol::set_action(::common::tracing_action value) {
  assert(::common::tracing_action_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.action)
}

// repeated uint64 restrict_addresses = 5;
inline int syscall_pol::restrict_addresses_size() const {
  return restrict_addresses_.size();
}
inline void syscall_pol::clear_restrict_addresses() {
  restrict_addresses_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 syscall_pol::restrict_addresses(int index) const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.restrict_addresses)
  return restrict_addresses_.Get(index);
}
inline void syscall_pol::set_restrict_addresses(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  restrict_addresses_.Set(index, value);
  // @@protoc_insertion_point(field_set:syscall_types.syscall_pol.restrict_addresses)
}
inline void syscall_pol::add_restrict_addresses(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  restrict_addresses_.Add(value);
  // @@protoc_insertion_point(field_add:syscall_types.syscall_pol.restrict_addresses)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
syscall_pol::restrict_addresses() const {
  // @@protoc_insertion_point(field_list:syscall_types.syscall_pol.restrict_addresses)
  return restrict_addresses_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
syscall_pol::mutable_restrict_addresses() {
  // @@protoc_insertion_point(field_mutable_list:syscall_types.syscall_pol.restrict_addresses)
  return &restrict_addresses_;
}

// optional .syscall_types.nr_read_pol nr_read = 6;
inline bool syscall_pol::has_nr_read() const {
  return syscall_pol_cnt_case() == kNrRead;
}
inline void syscall_pol::set_has_nr_read() {
  _oneof_case_[0] = kNrRead;
}
inline void syscall_pol::clear_nr_read() {
  if (has_nr_read()) {
    delete syscall_pol_cnt_.nr_read_;
    clear_has_syscall_pol_cnt();
  }
}
inline ::syscall_types::nr_read_pol* syscall_pol::release_nr_read() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_pol.nr_read)
  if (has_nr_read()) {
    clear_has_syscall_pol_cnt();
      ::syscall_types::nr_read_pol* temp = syscall_pol_cnt_.nr_read_;
    syscall_pol_cnt_.nr_read_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::syscall_types::nr_read_pol& syscall_pol::nr_read() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_pol.nr_read)
  return has_nr_read()
      ? *syscall_pol_cnt_.nr_read_
      : *reinterpret_cast< ::syscall_types::nr_read_pol*>(&::syscall_types::_nr_read_pol_default_instance_);
}
inline ::syscall_types::nr_read_pol* syscall_pol::mutable_nr_read() {
  if (!has_nr_read()) {
    clear_syscall_pol_cnt();
    set_has_nr_read();
    syscall_pol_cnt_.nr_read_ = CreateMaybeMessage< ::syscall_types::nr_read_pol >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_pol.nr_read)
  return syscall_pol_cnt_.nr_read_;
}

inline bool syscall_pol::has_syscall_pol_cnt() const {
  return syscall_pol_cnt_case() != SYSCALL_POL_CNT_NOT_SET;
}
inline void syscall_pol::clear_has_syscall_pol_cnt() {
  _oneof_case_[0] = SYSCALL_POL_CNT_NOT_SET;
}
inline syscall_pol::SyscallPolCntCase syscall_pol::syscall_pol_cnt_case() const {
  return syscall_pol::SyscallPolCntCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// syscall_t

// required uint32 id = 1;
inline bool syscall_t::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void syscall_t::clear_id() {
  id_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 syscall_t::id() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.id)
  return id_;
}
inline void syscall_t::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_t.id)
}

// required .syscall_types.syscall_ident ident = 2;
inline bool syscall_t::has_ident() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void syscall_t::clear_ident() {
  ident_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::syscall_types::syscall_ident syscall_t::ident() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.ident)
  return static_cast< ::syscall_types::syscall_ident >(ident_);
}
inline void syscall_t::set_ident(::syscall_types::syscall_ident value) {
  assert(::syscall_types::syscall_ident_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  ident_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.syscall_t.ident)
}

// optional .syscall_types.nr_open_t open_syscall = 3;
inline bool syscall_t::has_open_syscall() const {
  return syscall_t_cnt_case() == kOpenSyscall;
}
inline void syscall_t::set_has_open_syscall() {
  _oneof_case_[0] = kOpenSyscall;
}
inline void syscall_t::clear_open_syscall() {
  if (has_open_syscall()) {
    delete syscall_t_cnt_.open_syscall_;
    clear_has_syscall_t_cnt();
  }
}
inline ::syscall_types::nr_open_t* syscall_t::release_open_syscall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.open_syscall)
  if (has_open_syscall()) {
    clear_has_syscall_t_cnt();
      ::syscall_types::nr_open_t* temp = syscall_t_cnt_.open_syscall_;
    syscall_t_cnt_.open_syscall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::syscall_types::nr_open_t& syscall_t::open_syscall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.open_syscall)
  return has_open_syscall()
      ? *syscall_t_cnt_.open_syscall_
      : *reinterpret_cast< ::syscall_types::nr_open_t*>(&::syscall_types::_nr_open_t_default_instance_);
}
inline ::syscall_types::nr_open_t* syscall_t::mutable_open_syscall() {
  if (!has_open_syscall()) {
    clear_syscall_t_cnt();
    set_has_open_syscall();
    syscall_t_cnt_.open_syscall_ = CreateMaybeMessage< ::syscall_types::nr_open_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.open_syscall)
  return syscall_t_cnt_.open_syscall_;
}

// optional .syscall_types.nr_read_t read_syscall = 4;
inline bool syscall_t::has_read_syscall() const {
  return syscall_t_cnt_case() == kReadSyscall;
}
inline void syscall_t::set_has_read_syscall() {
  _oneof_case_[0] = kReadSyscall;
}
inline void syscall_t::clear_read_syscall() {
  if (has_read_syscall()) {
    delete syscall_t_cnt_.read_syscall_;
    clear_has_syscall_t_cnt();
  }
}
inline ::syscall_types::nr_read_t* syscall_t::release_read_syscall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.read_syscall)
  if (has_read_syscall()) {
    clear_has_syscall_t_cnt();
      ::syscall_types::nr_read_t* temp = syscall_t_cnt_.read_syscall_;
    syscall_t_cnt_.read_syscall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::syscall_types::nr_read_t& syscall_t::read_syscall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.read_syscall)
  return has_read_syscall()
      ? *syscall_t_cnt_.read_syscall_
      : *reinterpret_cast< ::syscall_types::nr_read_t*>(&::syscall_types::_nr_read_t_default_instance_);
}
inline ::syscall_types::nr_read_t* syscall_t::mutable_read_syscall() {
  if (!has_read_syscall()) {
    clear_syscall_t_cnt();
    set_has_read_syscall();
    syscall_t_cnt_.read_syscall_ = CreateMaybeMessage< ::syscall_types::nr_read_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.read_syscall)
  return syscall_t_cnt_.read_syscall_;
}

// optional .syscall_types.nr_write_t write_sycall = 5;
inline bool syscall_t::has_write_sycall() const {
  return syscall_t_cnt_case() == kWriteSycall;
}
inline void syscall_t::set_has_write_sycall() {
  _oneof_case_[0] = kWriteSycall;
}
inline void syscall_t::clear_write_sycall() {
  if (has_write_sycall()) {
    delete syscall_t_cnt_.write_sycall_;
    clear_has_syscall_t_cnt();
  }
}
inline ::syscall_types::nr_write_t* syscall_t::release_write_sycall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.write_sycall)
  if (has_write_sycall()) {
    clear_has_syscall_t_cnt();
      ::syscall_types::nr_write_t* temp = syscall_t_cnt_.write_sycall_;
    syscall_t_cnt_.write_sycall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::syscall_types::nr_write_t& syscall_t::write_sycall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.write_sycall)
  return has_write_sycall()
      ? *syscall_t_cnt_.write_sycall_
      : *reinterpret_cast< ::syscall_types::nr_write_t*>(&::syscall_types::_nr_write_t_default_instance_);
}
inline ::syscall_types::nr_write_t* syscall_t::mutable_write_sycall() {
  if (!has_write_sycall()) {
    clear_syscall_t_cnt();
    set_has_write_sycall();
    syscall_t_cnt_.write_sycall_ = CreateMaybeMessage< ::syscall_types::nr_write_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.write_sycall)
  return syscall_t_cnt_.write_sycall_;
}

// optional .syscall_types.sys_generic_t generic_sycall = 6;
inline bool syscall_t::has_generic_sycall() const {
  return syscall_t_cnt_case() == kGenericSycall;
}
inline void syscall_t::set_has_generic_sycall() {
  _oneof_case_[0] = kGenericSycall;
}
inline void syscall_t::clear_generic_sycall() {
  if (has_generic_sycall()) {
    delete syscall_t_cnt_.generic_sycall_;
    clear_has_syscall_t_cnt();
  }
}
inline ::syscall_types::sys_generic_t* syscall_t::release_generic_sycall() {
  // @@protoc_insertion_point(field_release:syscall_types.syscall_t.generic_sycall)
  if (has_generic_sycall()) {
    clear_has_syscall_t_cnt();
      ::syscall_types::sys_generic_t* temp = syscall_t_cnt_.generic_sycall_;
    syscall_t_cnt_.generic_sycall_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::syscall_types::sys_generic_t& syscall_t::generic_sycall() const {
  // @@protoc_insertion_point(field_get:syscall_types.syscall_t.generic_sycall)
  return has_generic_sycall()
      ? *syscall_t_cnt_.generic_sycall_
      : *reinterpret_cast< ::syscall_types::sys_generic_t*>(&::syscall_types::_sys_generic_t_default_instance_);
}
inline ::syscall_types::sys_generic_t* syscall_t::mutable_generic_sycall() {
  if (!has_generic_sycall()) {
    clear_syscall_t_cnt();
    set_has_generic_sycall();
    syscall_t_cnt_.generic_sycall_ = CreateMaybeMessage< ::syscall_types::sys_generic_t >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:syscall_types.syscall_t.generic_sycall)
  return syscall_t_cnt_.generic_sycall_;
}

inline bool syscall_t::has_syscall_t_cnt() const {
  return syscall_t_cnt_case() != SYSCALL_T_CNT_NOT_SET;
}
inline void syscall_t::clear_has_syscall_t_cnt() {
  _oneof_case_[0] = SYSCALL_T_CNT_NOT_SET;
}
inline syscall_t::SyscallTCntCase syscall_t::syscall_t_cnt_case() const {
  return syscall_t::SyscallTCntCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// nr_read_pol

// required string name = 1;
inline bool nr_read_pol::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nr_read_pol::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& nr_read_pol::name() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_pol.name)
  return name_.GetNoArena();
}
inline void nr_read_pol::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_pol.name)
}
inline void nr_read_pol::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_read_pol.name)
}
inline void nr_read_pol::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_read_pol.name)
}
inline void nr_read_pol::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_read_pol.name)
}
inline std::string* nr_read_pol::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_read_pol.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nr_read_pol::release_name() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_read_pol.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nr_read_pol::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_read_pol.name)
}

// -------------------------------------------------------------------

// nr_open_t

// required string file_name = 1;
inline bool nr_open_t::has_file_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nr_open_t::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& nr_open_t::file_name() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.file_name)
  return file_name_.GetNoArena();
}
inline void nr_open_t::set_file_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.file_name)
}
inline void nr_open_t::set_file_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_open_t.file_name)
}
inline void nr_open_t::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_open_t.file_name)
}
inline void nr_open_t::set_file_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_open_t.file_name)
}
inline std::string* nr_open_t::mutable_file_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_open_t.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nr_open_t::release_file_name() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_open_t.file_name)
  if (!has_file_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return file_name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nr_open_t::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_open_t.file_name)
}

// required sint32 flags = 2;
inline bool nr_open_t::has_flags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nr_open_t::clear_flags() {
  flags_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nr_open_t::flags() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.flags)
  return flags_;
}
inline void nr_open_t::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  flags_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.flags)
}

// required uint32 mode = 3;
inline bool nr_open_t::has_mode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nr_open_t::clear_mode() {
  mode_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_open_t::mode() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.mode)
  return mode_;
}
inline void nr_open_t::set_mode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  mode_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.mode)
}

// required int32 file_descriptor = 4;
inline bool nr_open_t::has_file_descriptor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nr_open_t::clear_file_descriptor() {
  file_descriptor_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 nr_open_t::file_descriptor() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_open_t.file_descriptor)
  return file_descriptor_;
}
inline void nr_open_t::set_file_descriptor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  file_descriptor_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_open_t.file_descriptor)
}

// -------------------------------------------------------------------

// nr_read_t

// required uint32 file_descriptor = 1;
inline bool nr_read_t::has_file_descriptor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nr_read_t::clear_file_descriptor() {
  file_descriptor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_read_t::file_descriptor() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.file_descriptor)
  return file_descriptor_;
}
inline void nr_read_t::set_file_descriptor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  file_descriptor_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.file_descriptor)
}

// required uint64 buffer_address = 2;
inline bool nr_read_t::has_buffer_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nr_read_t::clear_buffer_address() {
  buffer_address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 nr_read_t::buffer_address() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.buffer_address)
  return buffer_address_;
}
inline void nr_read_t::set_buffer_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  buffer_address_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.buffer_address)
}

// required uint32 count = 3;
inline bool nr_read_t::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nr_read_t::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_read_t::count() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.count)
  return count_;
}
inline void nr_read_t::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.count)
}

// required bytes buffer_data = 4;
inline bool nr_read_t::has_buffer_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nr_read_t::clear_buffer_data() {
  buffer_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& nr_read_t::buffer_data() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.buffer_data)
  return buffer_data_.GetNoArena();
}
inline void nr_read_t::set_buffer_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.buffer_data)
}
inline void nr_read_t::set_buffer_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_read_t.buffer_data)
}
inline void nr_read_t::set_buffer_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_read_t.buffer_data)
}
inline void nr_read_t::set_buffer_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_read_t.buffer_data)
}
inline std::string* nr_read_t::mutable_buffer_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_read_t.buffer_data)
  return buffer_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nr_read_t::release_buffer_data() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_read_t.buffer_data)
  if (!has_buffer_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buffer_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nr_read_t::set_allocated_buffer_data(std::string* buffer_data) {
  if (buffer_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer_data);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_read_t.buffer_data)
}

// required uint32 count_effective = 5;
inline bool nr_read_t::has_count_effective() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nr_read_t::clear_count_effective() {
  count_effective_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_read_t::count_effective() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_read_t.count_effective)
  return count_effective_;
}
inline void nr_read_t::set_count_effective(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  count_effective_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_read_t.count_effective)
}

// -------------------------------------------------------------------

// nr_write_t

// required uint32 file_descriptor = 1;
inline bool nr_write_t::has_file_descriptor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void nr_write_t::clear_file_descriptor() {
  file_descriptor_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_write_t::file_descriptor() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.file_descriptor)
  return file_descriptor_;
}
inline void nr_write_t::set_file_descriptor(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  file_descriptor_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.file_descriptor)
}

// required uint64 buffer_address = 2;
inline bool nr_write_t::has_buffer_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void nr_write_t::clear_buffer_address() {
  buffer_address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 nr_write_t::buffer_address() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.buffer_address)
  return buffer_address_;
}
inline void nr_write_t::set_buffer_address(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  buffer_address_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.buffer_address)
}

// required uint32 count = 3;
inline bool nr_write_t::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void nr_write_t::clear_count() {
  count_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_write_t::count() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.count)
  return count_;
}
inline void nr_write_t::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  count_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.count)
}

// required bytes buffer_data = 4;
inline bool nr_write_t::has_buffer_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void nr_write_t::clear_buffer_data() {
  buffer_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& nr_write_t::buffer_data() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.buffer_data)
  return buffer_data_.GetNoArena();
}
inline void nr_write_t::set_buffer_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.buffer_data)
}
inline void nr_write_t::set_buffer_data(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.nr_write_t.buffer_data)
}
inline void nr_write_t::set_buffer_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.nr_write_t.buffer_data)
}
inline void nr_write_t::set_buffer_data(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  buffer_data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.nr_write_t.buffer_data)
}
inline std::string* nr_write_t::mutable_buffer_data() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:syscall_types.nr_write_t.buffer_data)
  return buffer_data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* nr_write_t::release_buffer_data() {
  // @@protoc_insertion_point(field_release:syscall_types.nr_write_t.buffer_data)
  if (!has_buffer_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return buffer_data_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void nr_write_t::set_allocated_buffer_data(std::string* buffer_data) {
  if (buffer_data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  buffer_data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buffer_data);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.nr_write_t.buffer_data)
}

// required uint32 count_effective = 5;
inline bool nr_write_t::has_count_effective() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void nr_write_t::clear_count_effective() {
  count_effective_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 nr_write_t::count_effective() const {
  // @@protoc_insertion_point(field_get:syscall_types.nr_write_t.count_effective)
  return count_effective_;
}
inline void nr_write_t::set_count_effective(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  count_effective_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.nr_write_t.count_effective)
}

// -------------------------------------------------------------------

// sys_generic_t

// required string name = 1;
inline bool sys_generic_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void sys_generic_t::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& sys_generic_t::name() const {
  // @@protoc_insertion_point(field_get:syscall_types.sys_generic_t.name)
  return name_.GetNoArena();
}
inline void sys_generic_t::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:syscall_types.sys_generic_t.name)
}
inline void sys_generic_t::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:syscall_types.sys_generic_t.name)
}
inline void sys_generic_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:syscall_types.sys_generic_t.name)
}
inline void sys_generic_t::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:syscall_types.sys_generic_t.name)
}
inline std::string* sys_generic_t::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:syscall_types.sys_generic_t.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* sys_generic_t::release_name() {
  // @@protoc_insertion_point(field_release:syscall_types.sys_generic_t.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void sys_generic_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:syscall_types.sys_generic_t.name)
}

// required uint32 address = 2;
inline bool sys_generic_t::has_address() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void sys_generic_t::clear_address() {
  address_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 sys_generic_t::address() const {
  // @@protoc_insertion_point(field_get:syscall_types.sys_generic_t.address)
  return address_;
}
inline void sys_generic_t::set_address(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  address_ = value;
  // @@protoc_insertion_point(field_set:syscall_types.sys_generic_t.address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace syscall_types

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::syscall_types::syscall_ident> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::syscall_types::syscall_ident>() {
  return ::syscall_types::syscall_ident_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_syscall_2eproto
