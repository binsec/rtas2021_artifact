// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace common {
class indirect_register_t;
class indirect_register_tDefaultTypeInternal;
extern indirect_register_tDefaultTypeInternal _indirect_register_t_default_instance_;
class memory_pol;
class memory_polDefaultTypeInternal;
extern memory_polDefaultTypeInternal _memory_pol_default_instance_;
class memory_t;
class memory_tDefaultTypeInternal;
extern memory_tDefaultTypeInternal _memory_t_default_instance_;
class register_t;
class register_tDefaultTypeInternal;
extern register_tDefaultTypeInternal _register_t_default_instance_;
class register_value_t;
class register_value_tDefaultTypeInternal;
extern register_value_tDefaultTypeInternal _register_value_t_default_instance_;
}  // namespace common
PROTOBUF_NAMESPACE_OPEN
template<> ::common::indirect_register_t* Arena::CreateMaybeMessage<::common::indirect_register_t>(Arena*);
template<> ::common::memory_pol* Arena::CreateMaybeMessage<::common::memory_pol>(Arena*);
template<> ::common::memory_t* Arena::CreateMaybeMessage<::common::memory_t>(Arena*);
template<> ::common::register_t* Arena::CreateMaybeMessage<::common::register_t>(Arena*);
template<> ::common::register_value_t* Arena::CreateMaybeMessage<::common::register_value_t>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace common {

enum smt_result : int {
  UNKNOWN = 0,
  SAT = 1,
  UNSAT = 2,
  TIMEOUT = 3
};
bool smt_result_IsValid(int value);
constexpr smt_result smt_result_MIN = UNKNOWN;
constexpr smt_result smt_result_MAX = TIMEOUT;
constexpr int smt_result_ARRAYSIZE = smt_result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* smt_result_descriptor();
template<typename T>
inline const std::string& smt_result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, smt_result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function smt_result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    smt_result_descriptor(), enum_t_value);
}
inline bool smt_result_Parse(
    const std::string& name, smt_result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<smt_result>(
    smt_result_descriptor(), name, value);
}
enum tracing_action : int {
  SKIP = 0,
  INTO = 1
};
bool tracing_action_IsValid(int value);
constexpr tracing_action tracing_action_MIN = SKIP;
constexpr tracing_action tracing_action_MAX = INTO;
constexpr int tracing_action_ARRAYSIZE = tracing_action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* tracing_action_descriptor();
template<typename T>
inline const std::string& tracing_action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, tracing_action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function tracing_action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    tracing_action_descriptor(), enum_t_value);
}
inline bool tracing_action_Parse(
    const std::string& name, tracing_action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<tracing_action>(
    tracing_action_descriptor(), name, value);
}
enum action : int {
  DEFAULT = 0,
  PATCH = 1,
  CONC = 2,
  SYMB = 3,
  LOGIC = 4,
  IGNORE = 5
};
bool action_IsValid(int value);
constexpr action action_MIN = DEFAULT;
constexpr action action_MAX = IGNORE;
constexpr int action_ARRAYSIZE = action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* action_descriptor();
template<typename T>
inline const std::string& action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    action_descriptor(), enum_t_value);
}
inline bool action_Parse(
    const std::string& name, action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<action>(
    action_descriptor(), name, value);
}
enum call_convention_t : int {
  UNKNOWN_CVT = 0,
  CDECL = 1,
  FASTCALL = 2,
  STDCALL = 3,
  THISCALL = 4
};
bool call_convention_t_IsValid(int value);
constexpr call_convention_t call_convention_t_MIN = UNKNOWN_CVT;
constexpr call_convention_t call_convention_t_MAX = THISCALL;
constexpr int call_convention_t_ARRAYSIZE = call_convention_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* call_convention_t_descriptor();
template<typename T>
inline const std::string& call_convention_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, call_convention_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function call_convention_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    call_convention_t_descriptor(), enum_t_value);
}
inline bool call_convention_t_Parse(
    const std::string& name, call_convention_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<call_convention_t>(
    call_convention_t_descriptor(), name, value);
}
enum ir_kind_t : int {
  DBA = 1,
  BAP = 2,
  MIASM = 3
};
bool ir_kind_t_IsValid(int value);
constexpr ir_kind_t ir_kind_t_MIN = DBA;
constexpr ir_kind_t ir_kind_t_MAX = MIASM;
constexpr int ir_kind_t_ARRAYSIZE = ir_kind_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ir_kind_t_descriptor();
template<typename T>
inline const std::string& ir_kind_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ir_kind_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ir_kind_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ir_kind_t_descriptor(), enum_t_value);
}
inline bool ir_kind_t_Parse(
    const std::string& name, ir_kind_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ir_kind_t>(
    ir_kind_t_descriptor(), name, value);
}
enum solver_t : int {
  Z3 = 1,
  BOOLECTOR = 2,
  CVC4 = 3,
  YICES = 4
};
bool solver_t_IsValid(int value);
constexpr solver_t solver_t_MIN = Z3;
constexpr solver_t solver_t_MAX = YICES;
constexpr int solver_t_ARRAYSIZE = solver_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* solver_t_descriptor();
template<typename T>
inline const std::string& solver_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, solver_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function solver_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    solver_t_descriptor(), enum_t_value);
}
inline bool solver_t_Parse(
    const std::string& name, solver_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<solver_t>(
    solver_t_descriptor(), name, value);
}
enum analysis_direction_t : int {
  FORWARD = 1,
  BACKWARD = 2
};
bool analysis_direction_t_IsValid(int value);
constexpr analysis_direction_t analysis_direction_t_MIN = FORWARD;
constexpr analysis_direction_t analysis_direction_t_MAX = BACKWARD;
constexpr int analysis_direction_t_ARRAYSIZE = analysis_direction_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* analysis_direction_t_descriptor();
template<typename T>
inline const std::string& analysis_direction_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, analysis_direction_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function analysis_direction_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    analysis_direction_t_descriptor(), enum_t_value);
}
inline bool analysis_direction_t_Parse(
    const std::string& name, analysis_direction_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<analysis_direction_t>(
    analysis_direction_t_descriptor(), name, value);
}
enum proto_size_t : int {
  INVALID_SIZE = 0,
  BIT8 = 1,
  BIT16 = 2,
  BIT32 = 3,
  BIT64 = 4,
  BIT80 = 5,
  BIT128 = 6,
  BIT256 = 7
};
bool proto_size_t_IsValid(int value);
constexpr proto_size_t proto_size_t_MIN = INVALID_SIZE;
constexpr proto_size_t proto_size_t_MAX = BIT256;
constexpr int proto_size_t_ARRAYSIZE = proto_size_t_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* proto_size_t_descriptor();
template<typename T>
inline const std::string& proto_size_t_Name(T enum_t_value) {
  static_assert(::std::is_same<T, proto_size_t>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function proto_size_t_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    proto_size_t_descriptor(), enum_t_value);
}
inline bool proto_size_t_Parse(
    const std::string& name, proto_size_t* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<proto_size_t>(
    proto_size_t_descriptor(), name, value);
}
// ===================================================================

class register_value_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.register_value_t) */ {
 public:
  register_value_t();
  virtual ~register_value_t();

  register_value_t(const register_value_t& from);
  register_value_t(register_value_t&& from) noexcept
    : register_value_t() {
    *this = ::std::move(from);
  }

  inline register_value_t& operator=(const register_value_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_value_t& operator=(register_value_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_value_t& default_instance();

  enum ValueCntCase {
    kValue8 = 2,
    kValue16 = 3,
    kValue32 = 4,
    kValue64 = 5,
    kValue80 = 6,
    kValue128 = 7,
    kValue256 = 8,
    VALUE_CNT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const register_value_t* internal_default_instance() {
    return reinterpret_cast<const register_value_t*>(
               &_register_value_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(register_value_t& a, register_value_t& b) {
    a.Swap(&b);
  }
  inline void Swap(register_value_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_value_t* New() const final {
    return CreateMaybeMessage<register_value_t>(nullptr);
  }

  register_value_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_value_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_value_t& from);
  void MergeFrom(const register_value_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_value_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.register_value_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeidFieldNumber = 1,
    kValue8FieldNumber = 2,
    kValue16FieldNumber = 3,
    kValue32FieldNumber = 4,
    kValue64FieldNumber = 5,
    kValue80FieldNumber = 6,
    kValue128FieldNumber = 7,
    kValue256FieldNumber = 8,
  };
  // required .common.proto_size_t typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  ::common::proto_size_t typeid_() const;
  void set_typeid_(::common::proto_size_t value);

  // optional uint32 value_8 = 2;
  bool has_value_8() const;
  void clear_value_8();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_8() const;
  void set_value_8(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 value_16 = 3;
  bool has_value_16() const;
  void clear_value_16();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_16() const;
  void set_value_16(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint32 value_32 = 4;
  bool has_value_32() const;
  void clear_value_32();
  ::PROTOBUF_NAMESPACE_ID::uint32 value_32() const;
  void set_value_32(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 value_64 = 5;
  bool has_value_64() const;
  void clear_value_64();
  ::PROTOBUF_NAMESPACE_ID::uint64 value_64() const;
  void set_value_64(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bytes value_80 = 6;
  bool has_value_80() const;
  void clear_value_80();
  const std::string& value_80() const;
  void set_value_80(const std::string& value);
  void set_value_80(std::string&& value);
  void set_value_80(const char* value);
  void set_value_80(const void* value, size_t size);
  std::string* mutable_value_80();
  std::string* release_value_80();
  void set_allocated_value_80(std::string* value_80);

  // optional bytes value_128 = 7;
  bool has_value_128() const;
  void clear_value_128();
  const std::string& value_128() const;
  void set_value_128(const std::string& value);
  void set_value_128(std::string&& value);
  void set_value_128(const char* value);
  void set_value_128(const void* value, size_t size);
  std::string* mutable_value_128();
  std::string* release_value_128();
  void set_allocated_value_128(std::string* value_128);

  // optional bytes value_256 = 8;
  bool has_value_256() const;
  void clear_value_256();
  const std::string& value_256() const;
  void set_value_256(const std::string& value);
  void set_value_256(std::string&& value);
  void set_value_256(const char* value);
  void set_value_256(const void* value, size_t size);
  std::string* mutable_value_256();
  std::string* release_value_256();
  void set_allocated_value_256(std::string* value_256);

  void clear_value_cnt();
  ValueCntCase value_cnt_case() const;
  // @@protoc_insertion_point(class_scope:common.register_value_t)
 private:
  class _Internal;
  void set_has_value_8();
  void set_has_value_16();
  void set_has_value_32();
  void set_has_value_64();
  void set_has_value_80();
  void set_has_value_128();
  void set_has_value_256();

  inline bool has_value_cnt() const;
  inline void clear_has_value_cnt();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int typeid__;
  union ValueCntUnion {
    ValueCntUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 value_8_;
    ::PROTOBUF_NAMESPACE_ID::uint32 value_16_;
    ::PROTOBUF_NAMESPACE_ID::uint32 value_32_;
    ::PROTOBUF_NAMESPACE_ID::uint64 value_64_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_80_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_128_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_256_;
  } value_cnt_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class register_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.register_t) */ {
 public:
  register_t();
  virtual ~register_t();

  register_t(const register_t& from);
  register_t(register_t&& from) noexcept
    : register_t() {
    *this = ::std::move(from);
  }

  inline register_t& operator=(const register_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline register_t& operator=(register_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const register_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const register_t* internal_default_instance() {
    return reinterpret_cast<const register_t*>(
               &_register_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(register_t& a, register_t& b) {
    a.Swap(&b);
  }
  inline void Swap(register_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline register_t* New() const final {
    return CreateMaybeMessage<register_t>(nullptr);
  }

  register_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<register_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const register_t& from);
  void MergeFrom(const register_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(register_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.register_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required .common.register_value_t value = 2;
  bool has_value() const;
  void clear_value();
  const ::common::register_value_t& value() const;
  ::common::register_value_t* release_value();
  ::common::register_value_t* mutable_value();
  void set_allocated_value(::common::register_value_t* value);

  // @@protoc_insertion_point(class_scope:common.register_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::common::register_value_t* value_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class memory_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.memory_t) */ {
 public:
  memory_t();
  virtual ~memory_t();

  memory_t(const memory_t& from);
  memory_t(memory_t&& from) noexcept
    : memory_t() {
    *this = ::std::move(from);
  }

  inline memory_t& operator=(const memory_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline memory_t& operator=(memory_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const memory_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const memory_t* internal_default_instance() {
    return reinterpret_cast<const memory_t*>(
               &_memory_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(memory_t& a, memory_t& b) {
    a.Swap(&b);
  }
  inline void Swap(memory_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline memory_t* New() const final {
    return CreateMaybeMessage<memory_t>(nullptr);
  }

  memory_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<memory_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const memory_t& from);
  void MergeFrom(const memory_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(memory_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.memory_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kAddrFieldNumber = 1,
  };
  // required bytes value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // required uint64 addr = 1;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:common.memory_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addr_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class indirect_register_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.indirect_register_t) */ {
 public:
  indirect_register_t();
  virtual ~indirect_register_t();

  indirect_register_t(const indirect_register_t& from);
  indirect_register_t(indirect_register_t&& from) noexcept
    : indirect_register_t() {
    *this = ::std::move(from);
  }

  inline indirect_register_t& operator=(const indirect_register_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline indirect_register_t& operator=(indirect_register_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const indirect_register_t& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const indirect_register_t* internal_default_instance() {
    return reinterpret_cast<const indirect_register_t*>(
               &_indirect_register_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(indirect_register_t& a, indirect_register_t& b) {
    a.Swap(&b);
  }
  inline void Swap(indirect_register_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline indirect_register_t* New() const final {
    return CreateMaybeMessage<indirect_register_t>(nullptr);
  }

  indirect_register_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<indirect_register_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const indirect_register_t& from);
  void MergeFrom(const indirect_register_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(indirect_register_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.indirect_register_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // required bytes value = 2;
  bool has_value() const;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);

  // @@protoc_insertion_point(class_scope:common.indirect_register_t)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class memory_pol :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:common.memory_pol) */ {
 public:
  memory_pol();
  virtual ~memory_pol();

  memory_pol(const memory_pol& from);
  memory_pol(memory_pol&& from) noexcept
    : memory_pol() {
    *this = ::std::move(from);
  }

  inline memory_pol& operator=(const memory_pol& from) {
    CopyFrom(from);
    return *this;
  }
  inline memory_pol& operator=(memory_pol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const memory_pol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const memory_pol* internal_default_instance() {
    return reinterpret_cast<const memory_pol*>(
               &_memory_pol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(memory_pol& a, memory_pol& b) {
    a.Swap(&b);
  }
  inline void Swap(memory_pol* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline memory_pol* New() const final {
    return CreateMaybeMessage<memory_pol>(nullptr);
  }

  memory_pol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<memory_pol>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const memory_pol& from);
  void MergeFrom(const memory_pol& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(memory_pol* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "common.memory_pol";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_common_2eproto);
    return ::descriptor_table_common_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .common.action addr = 1 [default = DEFAULT];
  bool has_addr() const;
  void clear_addr();
  ::common::action addr() const;
  void set_addr(::common::action value);

  // optional .common.action value = 2 [default = DEFAULT];
  bool has_value() const;
  void clear_value();
  ::common::action value() const;
  void set_value(::common::action value);

  // @@protoc_insertion_point(class_scope:common.memory_pol)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int addr_;
  int value_;
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// register_value_t

// required .common.proto_size_t typeid = 1;
inline bool register_value_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_value_t::clear_typeid_() {
  typeid__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::common::proto_size_t register_value_t::typeid_() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.typeid)
  return static_cast< ::common::proto_size_t >(typeid__);
}
inline void register_value_t::set_typeid_(::common::proto_size_t value) {
  assert(::common::proto_size_t_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  typeid__ = value;
  // @@protoc_insertion_point(field_set:common.register_value_t.typeid)
}

// optional uint32 value_8 = 2;
inline bool register_value_t::has_value_8() const {
  return value_cnt_case() == kValue8;
}
inline void register_value_t::set_has_value_8() {
  _oneof_case_[0] = kValue8;
}
inline void register_value_t::clear_value_8() {
  if (has_value_8()) {
    value_cnt_.value_8_ = 0u;
    clear_has_value_cnt();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 register_value_t::value_8() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_8)
  if (has_value_8()) {
    return value_cnt_.value_8_;
  }
  return 0u;
}
inline void register_value_t::set_value_8(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_value_8()) {
    clear_value_cnt();
    set_has_value_8();
  }
  value_cnt_.value_8_ = value;
  // @@protoc_insertion_point(field_set:common.register_value_t.value_8)
}

// optional uint32 value_16 = 3;
inline bool register_value_t::has_value_16() const {
  return value_cnt_case() == kValue16;
}
inline void register_value_t::set_has_value_16() {
  _oneof_case_[0] = kValue16;
}
inline void register_value_t::clear_value_16() {
  if (has_value_16()) {
    value_cnt_.value_16_ = 0u;
    clear_has_value_cnt();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 register_value_t::value_16() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_16)
  if (has_value_16()) {
    return value_cnt_.value_16_;
  }
  return 0u;
}
inline void register_value_t::set_value_16(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_value_16()) {
    clear_value_cnt();
    set_has_value_16();
  }
  value_cnt_.value_16_ = value;
  // @@protoc_insertion_point(field_set:common.register_value_t.value_16)
}

// optional uint32 value_32 = 4;
inline bool register_value_t::has_value_32() const {
  return value_cnt_case() == kValue32;
}
inline void register_value_t::set_has_value_32() {
  _oneof_case_[0] = kValue32;
}
inline void register_value_t::clear_value_32() {
  if (has_value_32()) {
    value_cnt_.value_32_ = 0u;
    clear_has_value_cnt();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 register_value_t::value_32() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_32)
  if (has_value_32()) {
    return value_cnt_.value_32_;
  }
  return 0u;
}
inline void register_value_t::set_value_32(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!has_value_32()) {
    clear_value_cnt();
    set_has_value_32();
  }
  value_cnt_.value_32_ = value;
  // @@protoc_insertion_point(field_set:common.register_value_t.value_32)
}

// optional uint64 value_64 = 5;
inline bool register_value_t::has_value_64() const {
  return value_cnt_case() == kValue64;
}
inline void register_value_t::set_has_value_64() {
  _oneof_case_[0] = kValue64;
}
inline void register_value_t::clear_value_64() {
  if (has_value_64()) {
    value_cnt_.value_64_ = PROTOBUF_ULONGLONG(0);
    clear_has_value_cnt();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 register_value_t::value_64() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_64)
  if (has_value_64()) {
    return value_cnt_.value_64_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void register_value_t::set_value_64(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!has_value_64()) {
    clear_value_cnt();
    set_has_value_64();
  }
  value_cnt_.value_64_ = value;
  // @@protoc_insertion_point(field_set:common.register_value_t.value_64)
}

// optional bytes value_80 = 6;
inline bool register_value_t::has_value_80() const {
  return value_cnt_case() == kValue80;
}
inline void register_value_t::set_has_value_80() {
  _oneof_case_[0] = kValue80;
}
inline void register_value_t::clear_value_80() {
  if (has_value_80()) {
    value_cnt_.value_80_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_cnt();
  }
}
inline const std::string& register_value_t::value_80() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_80)
  if (has_value_80()) {
    return value_cnt_.value_80_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void register_value_t::set_value_80(const std::string& value) {
  // @@protoc_insertion_point(field_set:common.register_value_t.value_80)
  if (!has_value_80()) {
    clear_value_cnt();
    set_has_value_80();
    value_cnt_.value_80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_80_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.register_value_t.value_80)
}
inline void register_value_t::set_value_80(std::string&& value) {
  // @@protoc_insertion_point(field_set:common.register_value_t.value_80)
  if (!has_value_80()) {
    clear_value_cnt();
    set_has_value_80();
    value_cnt_.value_80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_80_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.register_value_t.value_80)
}
inline void register_value_t::set_value_80(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_value_80()) {
    clear_value_cnt();
    set_has_value_80();
    value_cnt_.value_80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_80_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.register_value_t.value_80)
}
inline void register_value_t::set_value_80(const void* value, size_t size) {
  if (!has_value_80()) {
    clear_value_cnt();
    set_has_value_80();
    value_cnt_.value_80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_80_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.register_value_t.value_80)
}
inline std::string* register_value_t::mutable_value_80() {
  if (!has_value_80()) {
    clear_value_cnt();
    set_has_value_80();
    value_cnt_.value_80_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:common.register_value_t.value_80)
  return value_cnt_.value_80_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* register_value_t::release_value_80() {
  // @@protoc_insertion_point(field_release:common.register_value_t.value_80)
  if (has_value_80()) {
    clear_has_value_cnt();
    return value_cnt_.value_80_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void register_value_t::set_allocated_value_80(std::string* value_80) {
  if (has_value_cnt()) {
    clear_value_cnt();
  }
  if (value_80 != nullptr) {
    set_has_value_80();
    value_cnt_.value_80_.UnsafeSetDefault(value_80);
  }
  // @@protoc_insertion_point(field_set_allocated:common.register_value_t.value_80)
}

// optional bytes value_128 = 7;
inline bool register_value_t::has_value_128() const {
  return value_cnt_case() == kValue128;
}
inline void register_value_t::set_has_value_128() {
  _oneof_case_[0] = kValue128;
}
inline void register_value_t::clear_value_128() {
  if (has_value_128()) {
    value_cnt_.value_128_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_cnt();
  }
}
inline const std::string& register_value_t::value_128() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_128)
  if (has_value_128()) {
    return value_cnt_.value_128_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void register_value_t::set_value_128(const std::string& value) {
  // @@protoc_insertion_point(field_set:common.register_value_t.value_128)
  if (!has_value_128()) {
    clear_value_cnt();
    set_has_value_128();
    value_cnt_.value_128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_128_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.register_value_t.value_128)
}
inline void register_value_t::set_value_128(std::string&& value) {
  // @@protoc_insertion_point(field_set:common.register_value_t.value_128)
  if (!has_value_128()) {
    clear_value_cnt();
    set_has_value_128();
    value_cnt_.value_128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_128_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.register_value_t.value_128)
}
inline void register_value_t::set_value_128(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_value_128()) {
    clear_value_cnt();
    set_has_value_128();
    value_cnt_.value_128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_128_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.register_value_t.value_128)
}
inline void register_value_t::set_value_128(const void* value, size_t size) {
  if (!has_value_128()) {
    clear_value_cnt();
    set_has_value_128();
    value_cnt_.value_128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_128_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.register_value_t.value_128)
}
inline std::string* register_value_t::mutable_value_128() {
  if (!has_value_128()) {
    clear_value_cnt();
    set_has_value_128();
    value_cnt_.value_128_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:common.register_value_t.value_128)
  return value_cnt_.value_128_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* register_value_t::release_value_128() {
  // @@protoc_insertion_point(field_release:common.register_value_t.value_128)
  if (has_value_128()) {
    clear_has_value_cnt();
    return value_cnt_.value_128_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void register_value_t::set_allocated_value_128(std::string* value_128) {
  if (has_value_cnt()) {
    clear_value_cnt();
  }
  if (value_128 != nullptr) {
    set_has_value_128();
    value_cnt_.value_128_.UnsafeSetDefault(value_128);
  }
  // @@protoc_insertion_point(field_set_allocated:common.register_value_t.value_128)
}

// optional bytes value_256 = 8;
inline bool register_value_t::has_value_256() const {
  return value_cnt_case() == kValue256;
}
inline void register_value_t::set_has_value_256() {
  _oneof_case_[0] = kValue256;
}
inline void register_value_t::clear_value_256() {
  if (has_value_256()) {
    value_cnt_.value_256_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value_cnt();
  }
}
inline const std::string& register_value_t::value_256() const {
  // @@protoc_insertion_point(field_get:common.register_value_t.value_256)
  if (has_value_256()) {
    return value_cnt_.value_256_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void register_value_t::set_value_256(const std::string& value) {
  // @@protoc_insertion_point(field_set:common.register_value_t.value_256)
  if (!has_value_256()) {
    clear_value_cnt();
    set_has_value_256();
    value_cnt_.value_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.register_value_t.value_256)
}
inline void register_value_t::set_value_256(std::string&& value) {
  // @@protoc_insertion_point(field_set:common.register_value_t.value_256)
  if (!has_value_256()) {
    clear_value_cnt();
    set_has_value_256();
    value_cnt_.value_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.register_value_t.value_256)
}
inline void register_value_t::set_value_256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_value_256()) {
    clear_value_cnt();
    set_has_value_256();
    value_cnt_.value_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.register_value_t.value_256)
}
inline void register_value_t::set_value_256(const void* value, size_t size) {
  if (!has_value_256()) {
    clear_value_cnt();
    set_has_value_256();
    value_cnt_.value_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_cnt_.value_256_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.register_value_t.value_256)
}
inline std::string* register_value_t::mutable_value_256() {
  if (!has_value_256()) {
    clear_value_cnt();
    set_has_value_256();
    value_cnt_.value_256_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:common.register_value_t.value_256)
  return value_cnt_.value_256_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* register_value_t::release_value_256() {
  // @@protoc_insertion_point(field_release:common.register_value_t.value_256)
  if (has_value_256()) {
    clear_has_value_cnt();
    return value_cnt_.value_256_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void register_value_t::set_allocated_value_256(std::string* value_256) {
  if (has_value_cnt()) {
    clear_value_cnt();
  }
  if (value_256 != nullptr) {
    set_has_value_256();
    value_cnt_.value_256_.UnsafeSetDefault(value_256);
  }
  // @@protoc_insertion_point(field_set_allocated:common.register_value_t.value_256)
}

inline bool register_value_t::has_value_cnt() const {
  return value_cnt_case() != VALUE_CNT_NOT_SET;
}
inline void register_value_t::clear_has_value_cnt() {
  _oneof_case_[0] = VALUE_CNT_NOT_SET;
}
inline register_value_t::ValueCntCase register_value_t::value_cnt_case() const {
  return register_value_t::ValueCntCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// register_t

// required string name = 1;
inline bool register_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void register_t::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& register_t::name() const {
  // @@protoc_insertion_point(field_get:common.register_t.name)
  return name_.GetNoArena();
}
inline void register_t::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.register_t.name)
}
inline void register_t::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.register_t.name)
}
inline void register_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.register_t.name)
}
inline void register_t::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.register_t.name)
}
inline std::string* register_t::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:common.register_t.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* register_t::release_name() {
  // @@protoc_insertion_point(field_release:common.register_t.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void register_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:common.register_t.name)
}

// required .common.register_value_t value = 2;
inline bool register_t::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void register_t::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::common::register_value_t& register_t::value() const {
  const ::common::register_value_t* p = value_;
  // @@protoc_insertion_point(field_get:common.register_t.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::common::register_value_t*>(
      &::common::_register_value_t_default_instance_);
}
inline ::common::register_value_t* register_t::release_value() {
  // @@protoc_insertion_point(field_release:common.register_t.value)
  _has_bits_[0] &= ~0x00000002u;
  ::common::register_value_t* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::common::register_value_t* register_t::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::common::register_value_t>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:common.register_t.value)
  return value_;
}
inline void register_t::set_allocated_value(::common::register_value_t* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:common.register_t.value)
}

// -------------------------------------------------------------------

// memory_t

// required uint64 addr = 1;
inline bool memory_t::has_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void memory_t::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 memory_t::addr() const {
  // @@protoc_insertion_point(field_get:common.memory_t.addr)
  return addr_;
}
inline void memory_t::set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:common.memory_t.addr)
}

// required bytes value = 2;
inline bool memory_t::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void memory_t::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& memory_t::value() const {
  // @@protoc_insertion_point(field_get:common.memory_t.value)
  return value_.GetNoArena();
}
inline void memory_t::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.memory_t.value)
}
inline void memory_t::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.memory_t.value)
}
inline void memory_t::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.memory_t.value)
}
inline void memory_t::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.memory_t.value)
}
inline std::string* memory_t::mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:common.memory_t.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* memory_t::release_value() {
  // @@protoc_insertion_point(field_release:common.memory_t.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void memory_t::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:common.memory_t.value)
}

// -------------------------------------------------------------------

// indirect_register_t

// required string name = 1;
inline bool indirect_register_t::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void indirect_register_t::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& indirect_register_t::name() const {
  // @@protoc_insertion_point(field_get:common.indirect_register_t.name)
  return name_.GetNoArena();
}
inline void indirect_register_t::set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.indirect_register_t.name)
}
inline void indirect_register_t::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.indirect_register_t.name)
}
inline void indirect_register_t::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.indirect_register_t.name)
}
inline void indirect_register_t::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.indirect_register_t.name)
}
inline std::string* indirect_register_t::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:common.indirect_register_t.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* indirect_register_t::release_name() {
  // @@protoc_insertion_point(field_release:common.indirect_register_t.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void indirect_register_t::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:common.indirect_register_t.name)
}

// required bytes value = 2;
inline bool indirect_register_t::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void indirect_register_t::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& indirect_register_t::value() const {
  // @@protoc_insertion_point(field_get:common.indirect_register_t.value)
  return value_.GetNoArena();
}
inline void indirect_register_t::set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:common.indirect_register_t.value)
}
inline void indirect_register_t::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:common.indirect_register_t.value)
}
inline void indirect_register_t::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:common.indirect_register_t.value)
}
inline void indirect_register_t::set_value(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:common.indirect_register_t.value)
}
inline std::string* indirect_register_t::mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:common.indirect_register_t.value)
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* indirect_register_t::release_value() {
  // @@protoc_insertion_point(field_release:common.indirect_register_t.value)
  if (!has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void indirect_register_t::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:common.indirect_register_t.value)
}

// -------------------------------------------------------------------

// memory_pol

// optional .common.action addr = 1 [default = DEFAULT];
inline bool memory_pol::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void memory_pol::clear_addr() {
  addr_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::common::action memory_pol::addr() const {
  // @@protoc_insertion_point(field_get:common.memory_pol.addr)
  return static_cast< ::common::action >(addr_);
}
inline void memory_pol::set_addr(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:common.memory_pol.addr)
}

// optional .common.action value = 2 [default = DEFAULT];
inline bool memory_pol::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void memory_pol::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::common::action memory_pol::value() const {
  // @@protoc_insertion_point(field_get:common.memory_pol.value)
  return static_cast< ::common::action >(value_);
}
inline void memory_pol::set_value(::common::action value) {
  assert(::common::action_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
  // @@protoc_insertion_point(field_set:common.memory_pol.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::common::smt_result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::smt_result>() {
  return ::common::smt_result_descriptor();
}
template <> struct is_proto_enum< ::common::tracing_action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::tracing_action>() {
  return ::common::tracing_action_descriptor();
}
template <> struct is_proto_enum< ::common::action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::action>() {
  return ::common::action_descriptor();
}
template <> struct is_proto_enum< ::common::call_convention_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::call_convention_t>() {
  return ::common::call_convention_t_descriptor();
}
template <> struct is_proto_enum< ::common::ir_kind_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::ir_kind_t>() {
  return ::common::ir_kind_t_descriptor();
}
template <> struct is_proto_enum< ::common::solver_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::solver_t>() {
  return ::common::solver_t_descriptor();
}
template <> struct is_proto_enum< ::common::analysis_direction_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::analysis_direction_t>() {
  return ::common::analysis_direction_t_descriptor();
}
template <> struct is_proto_enum< ::common::proto_size_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::common::proto_size_t>() {
  return ::common::proto_size_t_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
