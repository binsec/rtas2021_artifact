// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analysis_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_analysis_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_analysis_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_analysis_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_analysis_5fconfig_2eproto;
namespace analysis_config {
class callret_analysis_results;
class callret_analysis_resultsDefaultTypeInternal;
extern callret_analysis_resultsDefaultTypeInternal _callret_analysis_results_default_instance_;
class callret_analysis_results_call_data;
class callret_analysis_results_call_dataDefaultTypeInternal;
extern callret_analysis_results_call_dataDefaultTypeInternal _callret_analysis_results_call_data_default_instance_;
class callret_analysis_results_ret_data;
class callret_analysis_results_ret_dataDefaultTypeInternal;
extern callret_analysis_results_ret_dataDefaultTypeInternal _callret_analysis_results_ret_data_default_instance_;
class generic_analysis;
class generic_analysisDefaultTypeInternal;
extern generic_analysisDefaultTypeInternal _generic_analysis_default_instance_;
class generic_analysis_results;
class generic_analysis_resultsDefaultTypeInternal;
extern generic_analysis_resultsDefaultTypeInternal _generic_analysis_results_default_instance_;
class po_analysis_results;
class po_analysis_resultsDefaultTypeInternal;
extern po_analysis_resultsDefaultTypeInternal _po_analysis_results_default_instance_;
class po_analysis_results_po_data;
class po_analysis_results_po_dataDefaultTypeInternal;
extern po_analysis_results_po_dataDefaultTypeInternal _po_analysis_results_po_data_default_instance_;
class specific_parameters_t;
class specific_parameters_tDefaultTypeInternal;
extern specific_parameters_tDefaultTypeInternal _specific_parameters_t_default_instance_;
class standard_analysis;
class standard_analysisDefaultTypeInternal;
extern standard_analysisDefaultTypeInternal _standard_analysis_default_instance_;
}  // namespace analysis_config
PROTOBUF_NAMESPACE_OPEN
template<> ::analysis_config::callret_analysis_results* Arena::CreateMaybeMessage<::analysis_config::callret_analysis_results>(Arena*);
template<> ::analysis_config::callret_analysis_results_call_data* Arena::CreateMaybeMessage<::analysis_config::callret_analysis_results_call_data>(Arena*);
template<> ::analysis_config::callret_analysis_results_ret_data* Arena::CreateMaybeMessage<::analysis_config::callret_analysis_results_ret_data>(Arena*);
template<> ::analysis_config::generic_analysis* Arena::CreateMaybeMessage<::analysis_config::generic_analysis>(Arena*);
template<> ::analysis_config::generic_analysis_results* Arena::CreateMaybeMessage<::analysis_config::generic_analysis_results>(Arena*);
template<> ::analysis_config::po_analysis_results* Arena::CreateMaybeMessage<::analysis_config::po_analysis_results>(Arena*);
template<> ::analysis_config::po_analysis_results_po_data* Arena::CreateMaybeMessage<::analysis_config::po_analysis_results_po_data>(Arena*);
template<> ::analysis_config::specific_parameters_t* Arena::CreateMaybeMessage<::analysis_config::specific_parameters_t>(Arena*);
template<> ::analysis_config::standard_analysis* Arena::CreateMaybeMessage<::analysis_config::standard_analysis>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace analysis_config {

enum specific_parameters_t_analyse_type : int {
  specific_parameters_t_analyse_type_NONE = 0,
  specific_parameters_t_analyse_type_GENERIC = 1,
  specific_parameters_t_analyse_type_STANDARD = 2
};
bool specific_parameters_t_analyse_type_IsValid(int value);
constexpr specific_parameters_t_analyse_type specific_parameters_t_analyse_type_analyse_type_MIN = specific_parameters_t_analyse_type_NONE;
constexpr specific_parameters_t_analyse_type specific_parameters_t_analyse_type_analyse_type_MAX = specific_parameters_t_analyse_type_STANDARD;
constexpr int specific_parameters_t_analyse_type_analyse_type_ARRAYSIZE = specific_parameters_t_analyse_type_analyse_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* specific_parameters_t_analyse_type_descriptor();
template<typename T>
inline const std::string& specific_parameters_t_analyse_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, specific_parameters_t_analyse_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function specific_parameters_t_analyse_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    specific_parameters_t_analyse_type_descriptor(), enum_t_value);
}
inline bool specific_parameters_t_analyse_type_Parse(
    const std::string& name, specific_parameters_t_analyse_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<specific_parameters_t_analyse_type>(
    specific_parameters_t_analyse_type_descriptor(), name, value);
}
enum generic_analysis_query_type : int {
  generic_analysis_query_type_SATISFIABILITY = 0,
  generic_analysis_query_type_VALUES = 1
};
bool generic_analysis_query_type_IsValid(int value);
constexpr generic_analysis_query_type generic_analysis_query_type_query_type_MIN = generic_analysis_query_type_SATISFIABILITY;
constexpr generic_analysis_query_type generic_analysis_query_type_query_type_MAX = generic_analysis_query_type_VALUES;
constexpr int generic_analysis_query_type_query_type_ARRAYSIZE = generic_analysis_query_type_query_type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* generic_analysis_query_type_descriptor();
template<typename T>
inline const std::string& generic_analysis_query_type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, generic_analysis_query_type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function generic_analysis_query_type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    generic_analysis_query_type_descriptor(), enum_t_value);
}
inline bool generic_analysis_query_type_Parse(
    const std::string& name, generic_analysis_query_type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<generic_analysis_query_type>(
    generic_analysis_query_type_descriptor(), name, value);
}
enum callret_analysis_results_callret_labels : int {
  callret_analysis_results_callret_labels_VIOLABLE = 1,
  callret_analysis_results_callret_labels_ALIGNED = 2,
  callret_analysis_results_callret_labels_DISALIGNED = 3,
  callret_analysis_results_callret_labels_CAN_RETURN = 4,
  callret_analysis_results_callret_labels_SINGLE = 5,
  callret_analysis_results_callret_labels_MULTIPLE = 6,
  callret_analysis_results_callret_labels_STRONG = 7,
  callret_analysis_results_callret_labels_WEAK = 8,
  callret_analysis_results_callret_labels_SOLVER_WRONG = 9,
  callret_analysis_results_callret_labels_NO_CALL = 10,
  callret_analysis_results_callret_labels_HAS_RETURNED = 11
};
bool callret_analysis_results_callret_labels_IsValid(int value);
constexpr callret_analysis_results_callret_labels callret_analysis_results_callret_labels_callret_labels_MIN = callret_analysis_results_callret_labels_VIOLABLE;
constexpr callret_analysis_results_callret_labels callret_analysis_results_callret_labels_callret_labels_MAX = callret_analysis_results_callret_labels_HAS_RETURNED;
constexpr int callret_analysis_results_callret_labels_callret_labels_ARRAYSIZE = callret_analysis_results_callret_labels_callret_labels_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* callret_analysis_results_callret_labels_descriptor();
template<typename T>
inline const std::string& callret_analysis_results_callret_labels_Name(T enum_t_value) {
  static_assert(::std::is_same<T, callret_analysis_results_callret_labels>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function callret_analysis_results_callret_labels_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    callret_analysis_results_callret_labels_descriptor(), enum_t_value);
}
inline bool callret_analysis_results_callret_labels_Parse(
    const std::string& name, callret_analysis_results_callret_labels* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<callret_analysis_results_callret_labels>(
    callret_analysis_results_callret_labels_descriptor(), name, value);
}
enum callret_analysis_results_callret_status : int {
  callret_analysis_results_callret_status_OK = 1,
  callret_analysis_results_callret_status_VIOL = 2
};
bool callret_analysis_results_callret_status_IsValid(int value);
constexpr callret_analysis_results_callret_status callret_analysis_results_callret_status_callret_status_MIN = callret_analysis_results_callret_status_OK;
constexpr callret_analysis_results_callret_status callret_analysis_results_callret_status_callret_status_MAX = callret_analysis_results_callret_status_VIOL;
constexpr int callret_analysis_results_callret_status_callret_status_ARRAYSIZE = callret_analysis_results_callret_status_callret_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* callret_analysis_results_callret_status_descriptor();
template<typename T>
inline const std::string& callret_analysis_results_callret_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, callret_analysis_results_callret_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function callret_analysis_results_callret_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    callret_analysis_results_callret_status_descriptor(), enum_t_value);
}
inline bool callret_analysis_results_callret_status_Parse(
    const std::string& name, callret_analysis_results_callret_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<callret_analysis_results_callret_status>(
    callret_analysis_results_callret_status_descriptor(), name, value);
}
enum po_analysis_results_po_status : int {
  po_analysis_results_po_status_UNKNOWN = 1,
  po_analysis_results_po_status_NOT_OPAQUE = 2,
  po_analysis_results_po_status_OPAQUE = 3,
  po_analysis_results_po_status_LIKELY = 4
};
bool po_analysis_results_po_status_IsValid(int value);
constexpr po_analysis_results_po_status po_analysis_results_po_status_po_status_MIN = po_analysis_results_po_status_UNKNOWN;
constexpr po_analysis_results_po_status po_analysis_results_po_status_po_status_MAX = po_analysis_results_po_status_LIKELY;
constexpr int po_analysis_results_po_status_po_status_ARRAYSIZE = po_analysis_results_po_status_po_status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* po_analysis_results_po_status_descriptor();
template<typename T>
inline const std::string& po_analysis_results_po_status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, po_analysis_results_po_status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function po_analysis_results_po_status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    po_analysis_results_po_status_descriptor(), enum_t_value);
}
inline bool po_analysis_results_po_status_Parse(
    const std::string& name, po_analysis_results_po_status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<po_analysis_results_po_status>(
    po_analysis_results_po_status_descriptor(), name, value);
}
// ===================================================================

class specific_parameters_t :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.specific_parameters_t) */ {
 public:
  specific_parameters_t();
  virtual ~specific_parameters_t();

  specific_parameters_t(const specific_parameters_t& from);
  specific_parameters_t(specific_parameters_t&& from) noexcept
    : specific_parameters_t() {
    *this = ::std::move(from);
  }

  inline specific_parameters_t& operator=(const specific_parameters_t& from) {
    CopyFrom(from);
    return *this;
  }
  inline specific_parameters_t& operator=(specific_parameters_t&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const specific_parameters_t& default_instance();

  enum AnalyseParamCase {
    kGenericParams = 2,
    kStandardParams = 3,
    ANALYSE_PARAM_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const specific_parameters_t* internal_default_instance() {
    return reinterpret_cast<const specific_parameters_t*>(
               &_specific_parameters_t_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(specific_parameters_t& a, specific_parameters_t& b) {
    a.Swap(&b);
  }
  inline void Swap(specific_parameters_t* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline specific_parameters_t* New() const final {
    return CreateMaybeMessage<specific_parameters_t>(nullptr);
  }

  specific_parameters_t* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<specific_parameters_t>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const specific_parameters_t& from);
  void MergeFrom(const specific_parameters_t& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(specific_parameters_t* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.specific_parameters_t";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef specific_parameters_t_analyse_type analyse_type;
  static constexpr analyse_type NONE =
    specific_parameters_t_analyse_type_NONE;
  static constexpr analyse_type GENERIC =
    specific_parameters_t_analyse_type_GENERIC;
  static constexpr analyse_type STANDARD =
    specific_parameters_t_analyse_type_STANDARD;
  static inline bool analyse_type_IsValid(int value) {
    return specific_parameters_t_analyse_type_IsValid(value);
  }
  static constexpr analyse_type analyse_type_MIN =
    specific_parameters_t_analyse_type_analyse_type_MIN;
  static constexpr analyse_type analyse_type_MAX =
    specific_parameters_t_analyse_type_analyse_type_MAX;
  static constexpr int analyse_type_ARRAYSIZE =
    specific_parameters_t_analyse_type_analyse_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  analyse_type_descriptor() {
    return specific_parameters_t_analyse_type_descriptor();
  }
  template<typename T>
  static inline const std::string& analyse_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, analyse_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function analyse_type_Name.");
    return specific_parameters_t_analyse_type_Name(enum_t_value);
  }
  static inline bool analyse_type_Parse(const std::string& name,
      analyse_type* value) {
    return specific_parameters_t_analyse_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeidFieldNumber = 1,
    kGenericParamsFieldNumber = 2,
    kStandardParamsFieldNumber = 3,
  };
  // required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
  bool has_typeid_() const;
  void clear_typeid_();
  ::analysis_config::specific_parameters_t_analyse_type typeid_() const;
  void set_typeid_(::analysis_config::specific_parameters_t_analyse_type value);

  // optional .analysis_config.generic_analysis generic_params = 2;
  bool has_generic_params() const;
  void clear_generic_params();
  const ::analysis_config::generic_analysis& generic_params() const;
  ::analysis_config::generic_analysis* release_generic_params();
  ::analysis_config::generic_analysis* mutable_generic_params();
  void set_allocated_generic_params(::analysis_config::generic_analysis* generic_params);

  // optional .analysis_config.standard_analysis standard_params = 3;
  bool has_standard_params() const;
  void clear_standard_params();
  const ::analysis_config::standard_analysis& standard_params() const;
  ::analysis_config::standard_analysis* release_standard_params();
  ::analysis_config::standard_analysis* mutable_standard_params();
  void set_allocated_standard_params(::analysis_config::standard_analysis* standard_params);

  void clear_analyse_param();
  AnalyseParamCase analyse_param_case() const;
  // @@protoc_insertion_point(class_scope:analysis_config.specific_parameters_t)
 private:
  class _Internal;
  void set_has_generic_params();
  void set_has_standard_params();

  inline bool has_analyse_param() const;
  inline void clear_has_analyse_param();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int typeid__;
  union AnalyseParamUnion {
    AnalyseParamUnion() {}
    ::analysis_config::generic_analysis* generic_params_;
    ::analysis_config::standard_analysis* standard_params_;
  } analyse_param_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class standard_analysis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.standard_analysis) */ {
 public:
  standard_analysis();
  virtual ~standard_analysis();

  standard_analysis(const standard_analysis& from);
  standard_analysis(standard_analysis&& from) noexcept
    : standard_analysis() {
    *this = ::std::move(from);
  }

  inline standard_analysis& operator=(const standard_analysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline standard_analysis& operator=(standard_analysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const standard_analysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const standard_analysis* internal_default_instance() {
    return reinterpret_cast<const standard_analysis*>(
               &_standard_analysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(standard_analysis& a, standard_analysis& b) {
    a.Swap(&b);
  }
  inline void Swap(standard_analysis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline standard_analysis* New() const final {
    return CreateMaybeMessage<standard_analysis>(nullptr);
  }

  standard_analysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<standard_analysis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const standard_analysis& from);
  void MergeFrom(const standard_analysis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(standard_analysis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.standard_analysis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetAddrFieldNumber = 1,
    kUniqFieldNumber = 2,
    kGetFormulaFieldNumber = 3,
  };
  // optional uint64 target_addr = 1;
  bool has_target_addr() const;
  void clear_target_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_addr() const;
  void set_target_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool uniq = 2;
  bool has_uniq() const;
  void clear_uniq();
  bool uniq() const;
  void set_uniq(bool value);

  // optional bool get_formula = 3;
  bool has_get_formula() const;
  void clear_get_formula();
  bool get_formula() const;
  void set_get_formula(bool value);

  // @@protoc_insertion_point(class_scope:analysis_config.standard_analysis)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_addr_;
  bool uniq_;
  bool get_formula_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class generic_analysis :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.generic_analysis) */ {
 public:
  generic_analysis();
  virtual ~generic_analysis();

  generic_analysis(const generic_analysis& from);
  generic_analysis(generic_analysis&& from) noexcept
    : generic_analysis() {
    *this = ::std::move(from);
  }

  inline generic_analysis& operator=(const generic_analysis& from) {
    CopyFrom(from);
    return *this;
  }
  inline generic_analysis& operator=(generic_analysis&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const generic_analysis& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const generic_analysis* internal_default_instance() {
    return reinterpret_cast<const generic_analysis*>(
               &_generic_analysis_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(generic_analysis& a, generic_analysis& b) {
    a.Swap(&b);
  }
  inline void Swap(generic_analysis* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline generic_analysis* New() const final {
    return CreateMaybeMessage<generic_analysis>(nullptr);
  }

  generic_analysis* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<generic_analysis>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const generic_analysis& from);
  void MergeFrom(const generic_analysis& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(generic_analysis* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.generic_analysis";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef generic_analysis_query_type query_type;
  static constexpr query_type SATISFIABILITY =
    generic_analysis_query_type_SATISFIABILITY;
  static constexpr query_type VALUES =
    generic_analysis_query_type_VALUES;
  static inline bool query_type_IsValid(int value) {
    return generic_analysis_query_type_IsValid(value);
  }
  static constexpr query_type query_type_MIN =
    generic_analysis_query_type_query_type_MIN;
  static constexpr query_type query_type_MAX =
    generic_analysis_query_type_query_type_MAX;
  static constexpr int query_type_ARRAYSIZE =
    generic_analysis_query_type_query_type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  query_type_descriptor() {
    return generic_analysis_query_type_descriptor();
  }
  template<typename T>
  static inline const std::string& query_type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, query_type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function query_type_Name.");
    return generic_analysis_query_type_Name(enum_t_value);
  }
  static inline bool query_type_Parse(const std::string& name,
      query_type* value) {
    return generic_analysis_query_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDbaFieldNumber = 3,
    kTargetAddrFieldNumber = 2,
    kKindFieldNumber = 1,
    kLimitValuesFieldNumber = 4,
    kFromAddrFieldNumber = 6,
    kToAddrFieldNumber = 7,
    kRestrictValuesFromFieldNumber = 8,
    kRestrictValuesToFieldNumber = 9,
    kGetFormulaFieldNumber = 5,
  };
  // required string dba = 3;
  bool has_dba() const;
  void clear_dba();
  const std::string& dba() const;
  void set_dba(const std::string& value);
  void set_dba(std::string&& value);
  void set_dba(const char* value);
  void set_dba(const char* value, size_t size);
  std::string* mutable_dba();
  std::string* release_dba();
  void set_allocated_dba(std::string* dba);

  // required uint64 target_addr = 2;
  bool has_target_addr() const;
  void clear_target_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 target_addr() const;
  void set_target_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required .analysis_config.generic_analysis.query_type kind = 1;
  bool has_kind() const;
  void clear_kind();
  ::analysis_config::generic_analysis_query_type kind() const;
  void set_kind(::analysis_config::generic_analysis_query_type value);

  // optional uint32 limit_values = 4;
  bool has_limit_values() const;
  void clear_limit_values();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_values() const;
  void set_limit_values(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // optional uint64 from_addr = 6;
  bool has_from_addr() const;
  void clear_from_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 from_addr() const;
  void set_from_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 to_addr = 7;
  bool has_to_addr() const;
  void clear_to_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 to_addr() const;
  void set_to_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 restrict_values_from = 8;
  bool has_restrict_values_from() const;
  void clear_restrict_values_from();
  ::PROTOBUF_NAMESPACE_ID::uint64 restrict_values_from() const;
  void set_restrict_values_from(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint64 restrict_values_to = 9;
  bool has_restrict_values_to() const;
  void clear_restrict_values_to();
  ::PROTOBUF_NAMESPACE_ID::uint64 restrict_values_to() const;
  void set_restrict_values_to(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional bool get_formula = 5;
  bool has_get_formula() const;
  void clear_get_formula();
  bool get_formula() const;
  void set_get_formula(bool value);

  // @@protoc_insertion_point(class_scope:analysis_config.generic_analysis)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dba_;
  ::PROTOBUF_NAMESPACE_ID::uint64 target_addr_;
  int kind_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_values_;
  ::PROTOBUF_NAMESPACE_ID::uint64 from_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 to_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restrict_values_from_;
  ::PROTOBUF_NAMESPACE_ID::uint64 restrict_values_to_;
  bool get_formula_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class generic_analysis_results :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.generic_analysis_results) */ {
 public:
  generic_analysis_results();
  virtual ~generic_analysis_results();

  generic_analysis_results(const generic_analysis_results& from);
  generic_analysis_results(generic_analysis_results&& from) noexcept
    : generic_analysis_results() {
    *this = ::std::move(from);
  }

  inline generic_analysis_results& operator=(const generic_analysis_results& from) {
    CopyFrom(from);
    return *this;
  }
  inline generic_analysis_results& operator=(generic_analysis_results&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const generic_analysis_results& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const generic_analysis_results* internal_default_instance() {
    return reinterpret_cast<const generic_analysis_results*>(
               &_generic_analysis_results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(generic_analysis_results& a, generic_analysis_results& b) {
    a.Swap(&b);
  }
  inline void Swap(generic_analysis_results* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline generic_analysis_results* New() const final {
    return CreateMaybeMessage<generic_analysis_results>(nullptr);
  }

  generic_analysis_results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<generic_analysis_results>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const generic_analysis_results& from);
  void MergeFrom(const generic_analysis_results& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(generic_analysis_results* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.generic_analysis_results";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kSmtFormulaFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // repeated uint64 values = 2;
  int values_size() const;
  void clear_values();
  ::PROTOBUF_NAMESPACE_ID::uint64 values(int index) const;
  void set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_values(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_values();

  // optional string smt_formula = 3;
  bool has_smt_formula() const;
  void clear_smt_formula();
  const std::string& smt_formula() const;
  void set_smt_formula(const std::string& value);
  void set_smt_formula(std::string&& value);
  void set_smt_formula(const char* value);
  void set_smt_formula(const char* value, size_t size);
  std::string* mutable_smt_formula();
  std::string* release_smt_formula();
  void set_allocated_smt_formula(std::string* smt_formula);

  // required .common.smt_result result = 1;
  bool has_result() const;
  void clear_result();
  ::common::smt_result result() const;
  void set_result(::common::smt_result value);

  // @@protoc_insertion_point(class_scope:analysis_config.generic_analysis_results)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smt_formula_;
  int result_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class callret_analysis_results_call_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.callret_analysis_results.call_data) */ {
 public:
  callret_analysis_results_call_data();
  virtual ~callret_analysis_results_call_data();

  callret_analysis_results_call_data(const callret_analysis_results_call_data& from);
  callret_analysis_results_call_data(callret_analysis_results_call_data&& from) noexcept
    : callret_analysis_results_call_data() {
    *this = ::std::move(from);
  }

  inline callret_analysis_results_call_data& operator=(const callret_analysis_results_call_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline callret_analysis_results_call_data& operator=(callret_analysis_results_call_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const callret_analysis_results_call_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const callret_analysis_results_call_data* internal_default_instance() {
    return reinterpret_cast<const callret_analysis_results_call_data*>(
               &_callret_analysis_results_call_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(callret_analysis_results_call_data& a, callret_analysis_results_call_data& b) {
    a.Swap(&b);
  }
  inline void Swap(callret_analysis_results_call_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline callret_analysis_results_call_data* New() const final {
    return CreateMaybeMessage<callret_analysis_results_call_data>(nullptr);
  }

  callret_analysis_results_call_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<callret_analysis_results_call_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const callret_analysis_results_call_data& from);
  void MergeFrom(const callret_analysis_results_call_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(callret_analysis_results_call_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.callret_analysis_results.call_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddrFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // required uint64 addr = 1;
  bool has_addr() const;
  void clear_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 addr() const;
  void set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required .analysis_config.callret_analysis_results.callret_status status = 2;
  bool has_status() const;
  void clear_status();
  ::analysis_config::callret_analysis_results_callret_status status() const;
  void set_status(::analysis_config::callret_analysis_results_callret_status value);

  // @@protoc_insertion_point(class_scope:analysis_config.callret_analysis_results.call_data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint64 addr_;
  int status_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class callret_analysis_results_ret_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.callret_analysis_results.ret_data) */ {
 public:
  callret_analysis_results_ret_data();
  virtual ~callret_analysis_results_ret_data();

  callret_analysis_results_ret_data(const callret_analysis_results_ret_data& from);
  callret_analysis_results_ret_data(callret_analysis_results_ret_data&& from) noexcept
    : callret_analysis_results_ret_data() {
    *this = ::std::move(from);
  }

  inline callret_analysis_results_ret_data& operator=(const callret_analysis_results_ret_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline callret_analysis_results_ret_data& operator=(callret_analysis_results_ret_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const callret_analysis_results_ret_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const callret_analysis_results_ret_data* internal_default_instance() {
    return reinterpret_cast<const callret_analysis_results_ret_data*>(
               &_callret_analysis_results_ret_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(callret_analysis_results_ret_data& a, callret_analysis_results_ret_data& b) {
    a.Swap(&b);
  }
  inline void Swap(callret_analysis_results_ret_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline callret_analysis_results_ret_data* New() const final {
    return CreateMaybeMessage<callret_analysis_results_ret_data>(nullptr);
  }

  callret_analysis_results_ret_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<callret_analysis_results_ret_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const callret_analysis_results_ret_data& from);
  void MergeFrom(const callret_analysis_results_ret_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(callret_analysis_results_ret_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.callret_analysis_results.ret_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kReturnsitesFieldNumber = 4,
    kCallsFieldNumber = 6,
    kRetAddrFieldNumber = 1,
    kSolveCountFieldNumber = 5,
    kStatusFieldNumber = 2,
  };
  // repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
  int labels_size() const;
  void clear_labels();
  ::analysis_config::callret_analysis_results_callret_labels labels(int index) const;
  void set_labels(int index, ::analysis_config::callret_analysis_results_callret_labels value);
  void add_labels(::analysis_config::callret_analysis_results_callret_labels value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& labels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_labels();

  // repeated uint64 returnsites = 4;
  int returnsites_size() const;
  void clear_returnsites();
  ::PROTOBUF_NAMESPACE_ID::uint64 returnsites(int index) const;
  void set_returnsites(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_returnsites(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      returnsites() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_returnsites();

  // repeated .analysis_config.callret_analysis_results.call_data calls = 6;
  int calls_size() const;
  void clear_calls();
  ::analysis_config::callret_analysis_results_call_data* mutable_calls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_call_data >*
      mutable_calls();
  const ::analysis_config::callret_analysis_results_call_data& calls(int index) const;
  ::analysis_config::callret_analysis_results_call_data* add_calls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_call_data >&
      calls() const;

  // required uint64 ret_addr = 1;
  bool has_ret_addr() const;
  void clear_ret_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 ret_addr() const;
  void set_ret_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 solve_count = 5;
  bool has_solve_count() const;
  void clear_solve_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 solve_count() const;
  void set_solve_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .analysis_config.callret_analysis_results.callret_status status = 2;
  bool has_status() const;
  void clear_status();
  ::analysis_config::callret_analysis_results_callret_status status() const;
  void set_status(::analysis_config::callret_analysis_results_callret_status value);

  // @@protoc_insertion_point(class_scope:analysis_config.callret_analysis_results.ret_data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > returnsites_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_call_data > calls_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ret_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 solve_count_;
  int status_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class callret_analysis_results :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.callret_analysis_results) */ {
 public:
  callret_analysis_results();
  virtual ~callret_analysis_results();

  callret_analysis_results(const callret_analysis_results& from);
  callret_analysis_results(callret_analysis_results&& from) noexcept
    : callret_analysis_results() {
    *this = ::std::move(from);
  }

  inline callret_analysis_results& operator=(const callret_analysis_results& from) {
    CopyFrom(from);
    return *this;
  }
  inline callret_analysis_results& operator=(callret_analysis_results&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const callret_analysis_results& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const callret_analysis_results* internal_default_instance() {
    return reinterpret_cast<const callret_analysis_results*>(
               &_callret_analysis_results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(callret_analysis_results& a, callret_analysis_results& b) {
    a.Swap(&b);
  }
  inline void Swap(callret_analysis_results* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline callret_analysis_results* New() const final {
    return CreateMaybeMessage<callret_analysis_results>(nullptr);
  }

  callret_analysis_results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<callret_analysis_results>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const callret_analysis_results& from);
  void MergeFrom(const callret_analysis_results& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(callret_analysis_results* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.callret_analysis_results";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef callret_analysis_results_call_data call_data;
  typedef callret_analysis_results_ret_data ret_data;

  typedef callret_analysis_results_callret_labels callret_labels;
  static constexpr callret_labels VIOLABLE =
    callret_analysis_results_callret_labels_VIOLABLE;
  static constexpr callret_labels ALIGNED =
    callret_analysis_results_callret_labels_ALIGNED;
  static constexpr callret_labels DISALIGNED =
    callret_analysis_results_callret_labels_DISALIGNED;
  static constexpr callret_labels CAN_RETURN =
    callret_analysis_results_callret_labels_CAN_RETURN;
  static constexpr callret_labels SINGLE =
    callret_analysis_results_callret_labels_SINGLE;
  static constexpr callret_labels MULTIPLE =
    callret_analysis_results_callret_labels_MULTIPLE;
  static constexpr callret_labels STRONG =
    callret_analysis_results_callret_labels_STRONG;
  static constexpr callret_labels WEAK =
    callret_analysis_results_callret_labels_WEAK;
  static constexpr callret_labels SOLVER_WRONG =
    callret_analysis_results_callret_labels_SOLVER_WRONG;
  static constexpr callret_labels NO_CALL =
    callret_analysis_results_callret_labels_NO_CALL;
  static constexpr callret_labels HAS_RETURNED =
    callret_analysis_results_callret_labels_HAS_RETURNED;
  static inline bool callret_labels_IsValid(int value) {
    return callret_analysis_results_callret_labels_IsValid(value);
  }
  static constexpr callret_labels callret_labels_MIN =
    callret_analysis_results_callret_labels_callret_labels_MIN;
  static constexpr callret_labels callret_labels_MAX =
    callret_analysis_results_callret_labels_callret_labels_MAX;
  static constexpr int callret_labels_ARRAYSIZE =
    callret_analysis_results_callret_labels_callret_labels_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  callret_labels_descriptor() {
    return callret_analysis_results_callret_labels_descriptor();
  }
  template<typename T>
  static inline const std::string& callret_labels_Name(T enum_t_value) {
    static_assert(::std::is_same<T, callret_labels>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function callret_labels_Name.");
    return callret_analysis_results_callret_labels_Name(enum_t_value);
  }
  static inline bool callret_labels_Parse(const std::string& name,
      callret_labels* value) {
    return callret_analysis_results_callret_labels_Parse(name, value);
  }

  typedef callret_analysis_results_callret_status callret_status;
  static constexpr callret_status OK =
    callret_analysis_results_callret_status_OK;
  static constexpr callret_status VIOL =
    callret_analysis_results_callret_status_VIOL;
  static inline bool callret_status_IsValid(int value) {
    return callret_analysis_results_callret_status_IsValid(value);
  }
  static constexpr callret_status callret_status_MIN =
    callret_analysis_results_callret_status_callret_status_MIN;
  static constexpr callret_status callret_status_MAX =
    callret_analysis_results_callret_status_callret_status_MAX;
  static constexpr int callret_status_ARRAYSIZE =
    callret_analysis_results_callret_status_callret_status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  callret_status_descriptor() {
    return callret_analysis_results_callret_status_descriptor();
  }
  template<typename T>
  static inline const std::string& callret_status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, callret_status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function callret_status_Name.");
    return callret_analysis_results_callret_status_Name(enum_t_value);
  }
  static inline bool callret_status_Parse(const std::string& name,
      callret_status* value) {
    return callret_analysis_results_callret_status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .analysis_config.callret_analysis_results.ret_data values = 1;
  int values_size() const;
  void clear_values();
  ::analysis_config::callret_analysis_results_ret_data* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_ret_data >*
      mutable_values();
  const ::analysis_config::callret_analysis_results_ret_data& values(int index) const;
  ::analysis_config::callret_analysis_results_ret_data* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_ret_data >&
      values() const;

  // @@protoc_insertion_point(class_scope:analysis_config.callret_analysis_results)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_ret_data > values_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class po_analysis_results_po_data :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.po_analysis_results.po_data) */ {
 public:
  po_analysis_results_po_data();
  virtual ~po_analysis_results_po_data();

  po_analysis_results_po_data(const po_analysis_results_po_data& from);
  po_analysis_results_po_data(po_analysis_results_po_data&& from) noexcept
    : po_analysis_results_po_data() {
    *this = ::std::move(from);
  }

  inline po_analysis_results_po_data& operator=(const po_analysis_results_po_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline po_analysis_results_po_data& operator=(po_analysis_results_po_data&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const po_analysis_results_po_data& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const po_analysis_results_po_data* internal_default_instance() {
    return reinterpret_cast<const po_analysis_results_po_data*>(
               &_po_analysis_results_po_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(po_analysis_results_po_data& a, po_analysis_results_po_data& b) {
    a.Swap(&b);
  }
  inline void Swap(po_analysis_results_po_data* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline po_analysis_results_po_data* New() const final {
    return CreateMaybeMessage<po_analysis_results_po_data>(nullptr);
  }

  po_analysis_results_po_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<po_analysis_results_po_data>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const po_analysis_results_po_data& from);
  void MergeFrom(const po_analysis_results_po_data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(po_analysis_results_po_data* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.po_analysis_results.po_data";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormulaFieldNumber = 7,
    kJmpAddrFieldNumber = 1,
    kKstepsFieldNumber = 3,
    kComputationTimeFieldNumber = 4,
    kAliveBranchFieldNumber = 6,
    kNbPathsFieldNumber = 5,
    kStatusFieldNumber = 2,
  };
  // optional string formula = 7;
  bool has_formula() const;
  void clear_formula();
  const std::string& formula() const;
  void set_formula(const std::string& value);
  void set_formula(std::string&& value);
  void set_formula(const char* value);
  void set_formula(const char* value, size_t size);
  std::string* mutable_formula();
  std::string* release_formula();
  void set_allocated_formula(std::string* formula);

  // required uint64 jmp_addr = 1;
  bool has_jmp_addr() const;
  void clear_jmp_addr();
  ::PROTOBUF_NAMESPACE_ID::uint64 jmp_addr() const;
  void set_jmp_addr(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // required uint32 ksteps = 3;
  bool has_ksteps() const;
  void clear_ksteps();
  ::PROTOBUF_NAMESPACE_ID::uint32 ksteps() const;
  void set_ksteps(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required float computation_time = 4;
  bool has_computation_time() const;
  void clear_computation_time();
  float computation_time() const;
  void set_computation_time(float value);

  // optional uint64 alive_branch = 6;
  bool has_alive_branch() const;
  void clear_alive_branch();
  ::PROTOBUF_NAMESPACE_ID::uint64 alive_branch() const;
  void set_alive_branch(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // optional uint32 nb_paths = 5;
  bool has_nb_paths() const;
  void clear_nb_paths();
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_paths() const;
  void set_nb_paths(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // required .analysis_config.po_analysis_results.po_status status = 2;
  bool has_status() const;
  void clear_status();
  ::analysis_config::po_analysis_results_po_status status() const;
  void set_status(::analysis_config::po_analysis_results_po_status value);

  // @@protoc_insertion_point(class_scope:analysis_config.po_analysis_results.po_data)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr formula_;
  ::PROTOBUF_NAMESPACE_ID::uint64 jmp_addr_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ksteps_;
  float computation_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 alive_branch_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nb_paths_;
  int status_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class po_analysis_results :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:analysis_config.po_analysis_results) */ {
 public:
  po_analysis_results();
  virtual ~po_analysis_results();

  po_analysis_results(const po_analysis_results& from);
  po_analysis_results(po_analysis_results&& from) noexcept
    : po_analysis_results() {
    *this = ::std::move(from);
  }

  inline po_analysis_results& operator=(const po_analysis_results& from) {
    CopyFrom(from);
    return *this;
  }
  inline po_analysis_results& operator=(po_analysis_results&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const po_analysis_results& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const po_analysis_results* internal_default_instance() {
    return reinterpret_cast<const po_analysis_results*>(
               &_po_analysis_results_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(po_analysis_results& a, po_analysis_results& b) {
    a.Swap(&b);
  }
  inline void Swap(po_analysis_results* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline po_analysis_results* New() const final {
    return CreateMaybeMessage<po_analysis_results>(nullptr);
  }

  po_analysis_results* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<po_analysis_results>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const po_analysis_results& from);
  void MergeFrom(const po_analysis_results& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(po_analysis_results* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "analysis_config.po_analysis_results";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_analysis_5fconfig_2eproto);
    return ::descriptor_table_analysis_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef po_analysis_results_po_data po_data;

  typedef po_analysis_results_po_status po_status;
  static constexpr po_status UNKNOWN =
    po_analysis_results_po_status_UNKNOWN;
  static constexpr po_status NOT_OPAQUE =
    po_analysis_results_po_status_NOT_OPAQUE;
  static constexpr po_status OPAQUE =
    po_analysis_results_po_status_OPAQUE;
  static constexpr po_status LIKELY =
    po_analysis_results_po_status_LIKELY;
  static inline bool po_status_IsValid(int value) {
    return po_analysis_results_po_status_IsValid(value);
  }
  static constexpr po_status po_status_MIN =
    po_analysis_results_po_status_po_status_MIN;
  static constexpr po_status po_status_MAX =
    po_analysis_results_po_status_po_status_MAX;
  static constexpr int po_status_ARRAYSIZE =
    po_analysis_results_po_status_po_status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  po_status_descriptor() {
    return po_analysis_results_po_status_descriptor();
  }
  template<typename T>
  static inline const std::string& po_status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, po_status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function po_status_Name.");
    return po_analysis_results_po_status_Name(enum_t_value);
  }
  static inline bool po_status_Parse(const std::string& name,
      po_status* value) {
    return po_analysis_results_po_status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated .analysis_config.po_analysis_results.po_data values = 1;
  int values_size() const;
  void clear_values();
  ::analysis_config::po_analysis_results_po_data* mutable_values(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::po_analysis_results_po_data >*
      mutable_values();
  const ::analysis_config::po_analysis_results_po_data& values(int index) const;
  ::analysis_config::po_analysis_results_po_data* add_values();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::po_analysis_results_po_data >&
      values() const;

  // @@protoc_insertion_point(class_scope:analysis_config.po_analysis_results)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::po_analysis_results_po_data > values_;
  friend struct ::TableStruct_analysis_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// specific_parameters_t

// required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
inline bool specific_parameters_t::has_typeid_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void specific_parameters_t::clear_typeid_() {
  typeid__ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::analysis_config::specific_parameters_t_analyse_type specific_parameters_t::typeid_() const {
  // @@protoc_insertion_point(field_get:analysis_config.specific_parameters_t.typeid)
  return static_cast< ::analysis_config::specific_parameters_t_analyse_type >(typeid__);
}
inline void specific_parameters_t::set_typeid_(::analysis_config::specific_parameters_t_analyse_type value) {
  assert(::analysis_config::specific_parameters_t_analyse_type_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  typeid__ = value;
  // @@protoc_insertion_point(field_set:analysis_config.specific_parameters_t.typeid)
}

// optional .analysis_config.generic_analysis generic_params = 2;
inline bool specific_parameters_t::has_generic_params() const {
  return analyse_param_case() == kGenericParams;
}
inline void specific_parameters_t::set_has_generic_params() {
  _oneof_case_[0] = kGenericParams;
}
inline void specific_parameters_t::clear_generic_params() {
  if (has_generic_params()) {
    delete analyse_param_.generic_params_;
    clear_has_analyse_param();
  }
}
inline ::analysis_config::generic_analysis* specific_parameters_t::release_generic_params() {
  // @@protoc_insertion_point(field_release:analysis_config.specific_parameters_t.generic_params)
  if (has_generic_params()) {
    clear_has_analyse_param();
      ::analysis_config::generic_analysis* temp = analyse_param_.generic_params_;
    analyse_param_.generic_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::analysis_config::generic_analysis& specific_parameters_t::generic_params() const {
  // @@protoc_insertion_point(field_get:analysis_config.specific_parameters_t.generic_params)
  return has_generic_params()
      ? *analyse_param_.generic_params_
      : *reinterpret_cast< ::analysis_config::generic_analysis*>(&::analysis_config::_generic_analysis_default_instance_);
}
inline ::analysis_config::generic_analysis* specific_parameters_t::mutable_generic_params() {
  if (!has_generic_params()) {
    clear_analyse_param();
    set_has_generic_params();
    analyse_param_.generic_params_ = CreateMaybeMessage< ::analysis_config::generic_analysis >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:analysis_config.specific_parameters_t.generic_params)
  return analyse_param_.generic_params_;
}

// optional .analysis_config.standard_analysis standard_params = 3;
inline bool specific_parameters_t::has_standard_params() const {
  return analyse_param_case() == kStandardParams;
}
inline void specific_parameters_t::set_has_standard_params() {
  _oneof_case_[0] = kStandardParams;
}
inline void specific_parameters_t::clear_standard_params() {
  if (has_standard_params()) {
    delete analyse_param_.standard_params_;
    clear_has_analyse_param();
  }
}
inline ::analysis_config::standard_analysis* specific_parameters_t::release_standard_params() {
  // @@protoc_insertion_point(field_release:analysis_config.specific_parameters_t.standard_params)
  if (has_standard_params()) {
    clear_has_analyse_param();
      ::analysis_config::standard_analysis* temp = analyse_param_.standard_params_;
    analyse_param_.standard_params_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::analysis_config::standard_analysis& specific_parameters_t::standard_params() const {
  // @@protoc_insertion_point(field_get:analysis_config.specific_parameters_t.standard_params)
  return has_standard_params()
      ? *analyse_param_.standard_params_
      : *reinterpret_cast< ::analysis_config::standard_analysis*>(&::analysis_config::_standard_analysis_default_instance_);
}
inline ::analysis_config::standard_analysis* specific_parameters_t::mutable_standard_params() {
  if (!has_standard_params()) {
    clear_analyse_param();
    set_has_standard_params();
    analyse_param_.standard_params_ = CreateMaybeMessage< ::analysis_config::standard_analysis >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:analysis_config.specific_parameters_t.standard_params)
  return analyse_param_.standard_params_;
}

inline bool specific_parameters_t::has_analyse_param() const {
  return analyse_param_case() != ANALYSE_PARAM_NOT_SET;
}
inline void specific_parameters_t::clear_has_analyse_param() {
  _oneof_case_[0] = ANALYSE_PARAM_NOT_SET;
}
inline specific_parameters_t::AnalyseParamCase specific_parameters_t::analyse_param_case() const {
  return specific_parameters_t::AnalyseParamCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// standard_analysis

// optional uint64 target_addr = 1;
inline bool standard_analysis::has_target_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void standard_analysis::clear_target_addr() {
  target_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 standard_analysis::target_addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.standard_analysis.target_addr)
  return target_addr_;
}
inline void standard_analysis::set_target_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  target_addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.standard_analysis.target_addr)
}

// optional bool uniq = 2;
inline bool standard_analysis::has_uniq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void standard_analysis::clear_uniq() {
  uniq_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool standard_analysis::uniq() const {
  // @@protoc_insertion_point(field_get:analysis_config.standard_analysis.uniq)
  return uniq_;
}
inline void standard_analysis::set_uniq(bool value) {
  _has_bits_[0] |= 0x00000002u;
  uniq_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.standard_analysis.uniq)
}

// optional bool get_formula = 3;
inline bool standard_analysis::has_get_formula() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void standard_analysis::clear_get_formula() {
  get_formula_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool standard_analysis::get_formula() const {
  // @@protoc_insertion_point(field_get:analysis_config.standard_analysis.get_formula)
  return get_formula_;
}
inline void standard_analysis::set_get_formula(bool value) {
  _has_bits_[0] |= 0x00000004u;
  get_formula_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.standard_analysis.get_formula)
}

// -------------------------------------------------------------------

// generic_analysis

// required .analysis_config.generic_analysis.query_type kind = 1;
inline bool generic_analysis::has_kind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void generic_analysis::clear_kind() {
  kind_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::analysis_config::generic_analysis_query_type generic_analysis::kind() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.kind)
  return static_cast< ::analysis_config::generic_analysis_query_type >(kind_);
}
inline void generic_analysis::set_kind(::analysis_config::generic_analysis_query_type value) {
  assert(::analysis_config::generic_analysis_query_type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  kind_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.kind)
}

// required uint64 target_addr = 2;
inline bool generic_analysis::has_target_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void generic_analysis::clear_target_addr() {
  target_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 generic_analysis::target_addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.target_addr)
  return target_addr_;
}
inline void generic_analysis::set_target_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  target_addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.target_addr)
}

// required string dba = 3;
inline bool generic_analysis::has_dba() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void generic_analysis::clear_dba() {
  dba_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& generic_analysis::dba() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.dba)
  return dba_.GetNoArena();
}
inline void generic_analysis::set_dba(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  dba_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.dba)
}
inline void generic_analysis::set_dba(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  dba_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:analysis_config.generic_analysis.dba)
}
inline void generic_analysis::set_dba(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  dba_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analysis_config.generic_analysis.dba)
}
inline void generic_analysis::set_dba(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  dba_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analysis_config.generic_analysis.dba)
}
inline std::string* generic_analysis::mutable_dba() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:analysis_config.generic_analysis.dba)
  return dba_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* generic_analysis::release_dba() {
  // @@protoc_insertion_point(field_release:analysis_config.generic_analysis.dba)
  if (!has_dba()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return dba_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void generic_analysis::set_allocated_dba(std::string* dba) {
  if (dba != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  dba_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dba);
  // @@protoc_insertion_point(field_set_allocated:analysis_config.generic_analysis.dba)
}

// optional uint32 limit_values = 4;
inline bool generic_analysis::has_limit_values() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void generic_analysis::clear_limit_values() {
  limit_values_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 generic_analysis::limit_values() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.limit_values)
  return limit_values_;
}
inline void generic_analysis::set_limit_values(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  limit_values_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.limit_values)
}

// optional bool get_formula = 5;
inline bool generic_analysis::has_get_formula() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void generic_analysis::clear_get_formula() {
  get_formula_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool generic_analysis::get_formula() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.get_formula)
  return get_formula_;
}
inline void generic_analysis::set_get_formula(bool value) {
  _has_bits_[0] |= 0x00000100u;
  get_formula_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.get_formula)
}

// optional uint64 from_addr = 6;
inline bool generic_analysis::has_from_addr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void generic_analysis::clear_from_addr() {
  from_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 generic_analysis::from_addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.from_addr)
  return from_addr_;
}
inline void generic_analysis::set_from_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  from_addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.from_addr)
}

// optional uint64 to_addr = 7;
inline bool generic_analysis::has_to_addr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void generic_analysis::clear_to_addr() {
  to_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 generic_analysis::to_addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.to_addr)
  return to_addr_;
}
inline void generic_analysis::set_to_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  to_addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.to_addr)
}

// optional uint64 restrict_values_from = 8;
inline bool generic_analysis::has_restrict_values_from() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void generic_analysis::clear_restrict_values_from() {
  restrict_values_from_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 generic_analysis::restrict_values_from() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.restrict_values_from)
  return restrict_values_from_;
}
inline void generic_analysis::set_restrict_values_from(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  restrict_values_from_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.restrict_values_from)
}

// optional uint64 restrict_values_to = 9;
inline bool generic_analysis::has_restrict_values_to() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void generic_analysis::clear_restrict_values_to() {
  restrict_values_to_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 generic_analysis::restrict_values_to() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis.restrict_values_to)
  return restrict_values_to_;
}
inline void generic_analysis::set_restrict_values_to(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  restrict_values_to_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis.restrict_values_to)
}

// -------------------------------------------------------------------

// generic_analysis_results

// required .common.smt_result result = 1;
inline bool generic_analysis_results::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void generic_analysis_results::clear_result() {
  result_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::common::smt_result generic_analysis_results::result() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis_results.result)
  return static_cast< ::common::smt_result >(result_);
}
inline void generic_analysis_results::set_result(::common::smt_result value) {
  assert(::common::smt_result_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  result_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis_results.result)
}

// repeated uint64 values = 2;
inline int generic_analysis_results::values_size() const {
  return values_.size();
}
inline void generic_analysis_results::clear_values() {
  values_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 generic_analysis_results::values(int index) const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis_results.values)
  return values_.Get(index);
}
inline void generic_analysis_results::set_values(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis_results.values)
}
inline void generic_analysis_results::add_values(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  values_.Add(value);
  // @@protoc_insertion_point(field_add:analysis_config.generic_analysis_results.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
generic_analysis_results::values() const {
  // @@protoc_insertion_point(field_list:analysis_config.generic_analysis_results.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
generic_analysis_results::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:analysis_config.generic_analysis_results.values)
  return &values_;
}

// optional string smt_formula = 3;
inline bool generic_analysis_results::has_smt_formula() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void generic_analysis_results::clear_smt_formula() {
  smt_formula_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& generic_analysis_results::smt_formula() const {
  // @@protoc_insertion_point(field_get:analysis_config.generic_analysis_results.smt_formula)
  return smt_formula_.GetNoArena();
}
inline void generic_analysis_results::set_smt_formula(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  smt_formula_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analysis_config.generic_analysis_results.smt_formula)
}
inline void generic_analysis_results::set_smt_formula(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  smt_formula_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:analysis_config.generic_analysis_results.smt_formula)
}
inline void generic_analysis_results::set_smt_formula(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  smt_formula_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analysis_config.generic_analysis_results.smt_formula)
}
inline void generic_analysis_results::set_smt_formula(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  smt_formula_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analysis_config.generic_analysis_results.smt_formula)
}
inline std::string* generic_analysis_results::mutable_smt_formula() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:analysis_config.generic_analysis_results.smt_formula)
  return smt_formula_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* generic_analysis_results::release_smt_formula() {
  // @@protoc_insertion_point(field_release:analysis_config.generic_analysis_results.smt_formula)
  if (!has_smt_formula()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return smt_formula_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void generic_analysis_results::set_allocated_smt_formula(std::string* smt_formula) {
  if (smt_formula != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  smt_formula_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smt_formula);
  // @@protoc_insertion_point(field_set_allocated:analysis_config.generic_analysis_results.smt_formula)
}

// -------------------------------------------------------------------

// callret_analysis_results_call_data

// required uint64 addr = 1;
inline bool callret_analysis_results_call_data::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void callret_analysis_results_call_data::clear_addr() {
  addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 callret_analysis_results_call_data::addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.call_data.addr)
  return addr_;
}
inline void callret_analysis_results_call_data::set_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.call_data.addr)
}

// required .analysis_config.callret_analysis_results.callret_status status = 2;
inline bool callret_analysis_results_call_data::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void callret_analysis_results_call_data::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::analysis_config::callret_analysis_results_callret_status callret_analysis_results_call_data::status() const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.call_data.status)
  return static_cast< ::analysis_config::callret_analysis_results_callret_status >(status_);
}
inline void callret_analysis_results_call_data::set_status(::analysis_config::callret_analysis_results_callret_status value) {
  assert(::analysis_config::callret_analysis_results_callret_status_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.call_data.status)
}

// -------------------------------------------------------------------

// callret_analysis_results_ret_data

// required uint64 ret_addr = 1;
inline bool callret_analysis_results_ret_data::has_ret_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void callret_analysis_results_ret_data::clear_ret_addr() {
  ret_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 callret_analysis_results_ret_data::ret_addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.ret_data.ret_addr)
  return ret_addr_;
}
inline void callret_analysis_results_ret_data::set_ret_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  ret_addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.ret_data.ret_addr)
}

// required .analysis_config.callret_analysis_results.callret_status status = 2;
inline bool callret_analysis_results_ret_data::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void callret_analysis_results_ret_data::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::analysis_config::callret_analysis_results_callret_status callret_analysis_results_ret_data::status() const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.ret_data.status)
  return static_cast< ::analysis_config::callret_analysis_results_callret_status >(status_);
}
inline void callret_analysis_results_ret_data::set_status(::analysis_config::callret_analysis_results_callret_status value) {
  assert(::analysis_config::callret_analysis_results_callret_status_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.ret_data.status)
}

// repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
inline int callret_analysis_results_ret_data::labels_size() const {
  return labels_.size();
}
inline void callret_analysis_results_ret_data::clear_labels() {
  labels_.Clear();
}
inline ::analysis_config::callret_analysis_results_callret_labels callret_analysis_results_ret_data::labels(int index) const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.ret_data.labels)
  return static_cast< ::analysis_config::callret_analysis_results_callret_labels >(labels_.Get(index));
}
inline void callret_analysis_results_ret_data::set_labels(int index, ::analysis_config::callret_analysis_results_callret_labels value) {
  assert(::analysis_config::callret_analysis_results_callret_labels_IsValid(value));
  labels_.Set(index, value);
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.ret_data.labels)
}
inline void callret_analysis_results_ret_data::add_labels(::analysis_config::callret_analysis_results_callret_labels value) {
  assert(::analysis_config::callret_analysis_results_callret_labels_IsValid(value));
  labels_.Add(value);
  // @@protoc_insertion_point(field_add:analysis_config.callret_analysis_results.ret_data.labels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
callret_analysis_results_ret_data::labels() const {
  // @@protoc_insertion_point(field_list:analysis_config.callret_analysis_results.ret_data.labels)
  return labels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
callret_analysis_results_ret_data::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_list:analysis_config.callret_analysis_results.ret_data.labels)
  return &labels_;
}

// repeated uint64 returnsites = 4;
inline int callret_analysis_results_ret_data::returnsites_size() const {
  return returnsites_.size();
}
inline void callret_analysis_results_ret_data::clear_returnsites() {
  returnsites_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 callret_analysis_results_ret_data::returnsites(int index) const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.ret_data.returnsites)
  return returnsites_.Get(index);
}
inline void callret_analysis_results_ret_data::set_returnsites(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  returnsites_.Set(index, value);
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.ret_data.returnsites)
}
inline void callret_analysis_results_ret_data::add_returnsites(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  returnsites_.Add(value);
  // @@protoc_insertion_point(field_add:analysis_config.callret_analysis_results.ret_data.returnsites)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
callret_analysis_results_ret_data::returnsites() const {
  // @@protoc_insertion_point(field_list:analysis_config.callret_analysis_results.ret_data.returnsites)
  return returnsites_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
callret_analysis_results_ret_data::mutable_returnsites() {
  // @@protoc_insertion_point(field_mutable_list:analysis_config.callret_analysis_results.ret_data.returnsites)
  return &returnsites_;
}

// required uint32 solve_count = 5;
inline bool callret_analysis_results_ret_data::has_solve_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void callret_analysis_results_ret_data::clear_solve_count() {
  solve_count_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 callret_analysis_results_ret_data::solve_count() const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.ret_data.solve_count)
  return solve_count_;
}
inline void callret_analysis_results_ret_data::set_solve_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  solve_count_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.callret_analysis_results.ret_data.solve_count)
}

// repeated .analysis_config.callret_analysis_results.call_data calls = 6;
inline int callret_analysis_results_ret_data::calls_size() const {
  return calls_.size();
}
inline void callret_analysis_results_ret_data::clear_calls() {
  calls_.Clear();
}
inline ::analysis_config::callret_analysis_results_call_data* callret_analysis_results_ret_data::mutable_calls(int index) {
  // @@protoc_insertion_point(field_mutable:analysis_config.callret_analysis_results.ret_data.calls)
  return calls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_call_data >*
callret_analysis_results_ret_data::mutable_calls() {
  // @@protoc_insertion_point(field_mutable_list:analysis_config.callret_analysis_results.ret_data.calls)
  return &calls_;
}
inline const ::analysis_config::callret_analysis_results_call_data& callret_analysis_results_ret_data::calls(int index) const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.ret_data.calls)
  return calls_.Get(index);
}
inline ::analysis_config::callret_analysis_results_call_data* callret_analysis_results_ret_data::add_calls() {
  // @@protoc_insertion_point(field_add:analysis_config.callret_analysis_results.ret_data.calls)
  return calls_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_call_data >&
callret_analysis_results_ret_data::calls() const {
  // @@protoc_insertion_point(field_list:analysis_config.callret_analysis_results.ret_data.calls)
  return calls_;
}

// -------------------------------------------------------------------

// callret_analysis_results

// repeated .analysis_config.callret_analysis_results.ret_data values = 1;
inline int callret_analysis_results::values_size() const {
  return values_.size();
}
inline void callret_analysis_results::clear_values() {
  values_.Clear();
}
inline ::analysis_config::callret_analysis_results_ret_data* callret_analysis_results::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:analysis_config.callret_analysis_results.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_ret_data >*
callret_analysis_results::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:analysis_config.callret_analysis_results.values)
  return &values_;
}
inline const ::analysis_config::callret_analysis_results_ret_data& callret_analysis_results::values(int index) const {
  // @@protoc_insertion_point(field_get:analysis_config.callret_analysis_results.values)
  return values_.Get(index);
}
inline ::analysis_config::callret_analysis_results_ret_data* callret_analysis_results::add_values() {
  // @@protoc_insertion_point(field_add:analysis_config.callret_analysis_results.values)
  return values_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::callret_analysis_results_ret_data >&
callret_analysis_results::values() const {
  // @@protoc_insertion_point(field_list:analysis_config.callret_analysis_results.values)
  return values_;
}

// -------------------------------------------------------------------

// po_analysis_results_po_data

// required uint64 jmp_addr = 1;
inline bool po_analysis_results_po_data::has_jmp_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void po_analysis_results_po_data::clear_jmp_addr() {
  jmp_addr_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 po_analysis_results_po_data::jmp_addr() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.jmp_addr)
  return jmp_addr_;
}
inline void po_analysis_results_po_data::set_jmp_addr(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  jmp_addr_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.jmp_addr)
}

// required .analysis_config.po_analysis_results.po_status status = 2;
inline bool po_analysis_results_po_data::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void po_analysis_results_po_data::clear_status() {
  status_ = 1;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::analysis_config::po_analysis_results_po_status po_analysis_results_po_data::status() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.status)
  return static_cast< ::analysis_config::po_analysis_results_po_status >(status_);
}
inline void po_analysis_results_po_data::set_status(::analysis_config::po_analysis_results_po_status value) {
  assert(::analysis_config::po_analysis_results_po_status_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.status)
}

// required uint32 ksteps = 3;
inline bool po_analysis_results_po_data::has_ksteps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void po_analysis_results_po_data::clear_ksteps() {
  ksteps_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 po_analysis_results_po_data::ksteps() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.ksteps)
  return ksteps_;
}
inline void po_analysis_results_po_data::set_ksteps(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  ksteps_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.ksteps)
}

// required float computation_time = 4;
inline bool po_analysis_results_po_data::has_computation_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void po_analysis_results_po_data::clear_computation_time() {
  computation_time_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float po_analysis_results_po_data::computation_time() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.computation_time)
  return computation_time_;
}
inline void po_analysis_results_po_data::set_computation_time(float value) {
  _has_bits_[0] |= 0x00000008u;
  computation_time_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.computation_time)
}

// optional uint32 nb_paths = 5;
inline bool po_analysis_results_po_data::has_nb_paths() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void po_analysis_results_po_data::clear_nb_paths() {
  nb_paths_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 po_analysis_results_po_data::nb_paths() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.nb_paths)
  return nb_paths_;
}
inline void po_analysis_results_po_data::set_nb_paths(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nb_paths_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.nb_paths)
}

// optional uint64 alive_branch = 6;
inline bool po_analysis_results_po_data::has_alive_branch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void po_analysis_results_po_data::clear_alive_branch() {
  alive_branch_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 po_analysis_results_po_data::alive_branch() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.alive_branch)
  return alive_branch_;
}
inline void po_analysis_results_po_data::set_alive_branch(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  alive_branch_ = value;
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.alive_branch)
}

// optional string formula = 7;
inline bool po_analysis_results_po_data::has_formula() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void po_analysis_results_po_data::clear_formula() {
  formula_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& po_analysis_results_po_data::formula() const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.po_data.formula)
  return formula_.GetNoArena();
}
inline void po_analysis_results_po_data::set_formula(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  formula_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:analysis_config.po_analysis_results.po_data.formula)
}
inline void po_analysis_results_po_data::set_formula(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  formula_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:analysis_config.po_analysis_results.po_data.formula)
}
inline void po_analysis_results_po_data::set_formula(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  formula_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:analysis_config.po_analysis_results.po_data.formula)
}
inline void po_analysis_results_po_data::set_formula(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  formula_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:analysis_config.po_analysis_results.po_data.formula)
}
inline std::string* po_analysis_results_po_data::mutable_formula() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:analysis_config.po_analysis_results.po_data.formula)
  return formula_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* po_analysis_results_po_data::release_formula() {
  // @@protoc_insertion_point(field_release:analysis_config.po_analysis_results.po_data.formula)
  if (!has_formula()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return formula_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void po_analysis_results_po_data::set_allocated_formula(std::string* formula) {
  if (formula != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  formula_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), formula);
  // @@protoc_insertion_point(field_set_allocated:analysis_config.po_analysis_results.po_data.formula)
}

// -------------------------------------------------------------------

// po_analysis_results

// repeated .analysis_config.po_analysis_results.po_data values = 1;
inline int po_analysis_results::values_size() const {
  return values_.size();
}
inline void po_analysis_results::clear_values() {
  values_.Clear();
}
inline ::analysis_config::po_analysis_results_po_data* po_analysis_results::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:analysis_config.po_analysis_results.values)
  return values_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::po_analysis_results_po_data >*
po_analysis_results::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:analysis_config.po_analysis_results.values)
  return &values_;
}
inline const ::analysis_config::po_analysis_results_po_data& po_analysis_results::values(int index) const {
  // @@protoc_insertion_point(field_get:analysis_config.po_analysis_results.values)
  return values_.Get(index);
}
inline ::analysis_config::po_analysis_results_po_data* po_analysis_results::add_values() {
  // @@protoc_insertion_point(field_add:analysis_config.po_analysis_results.values)
  return values_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::analysis_config::po_analysis_results_po_data >&
po_analysis_results::values() const {
  // @@protoc_insertion_point(field_list:analysis_config.po_analysis_results.values)
  return values_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace analysis_config

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::analysis_config::specific_parameters_t_analyse_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analysis_config::specific_parameters_t_analyse_type>() {
  return ::analysis_config::specific_parameters_t_analyse_type_descriptor();
}
template <> struct is_proto_enum< ::analysis_config::generic_analysis_query_type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analysis_config::generic_analysis_query_type>() {
  return ::analysis_config::generic_analysis_query_type_descriptor();
}
template <> struct is_proto_enum< ::analysis_config::callret_analysis_results_callret_labels> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analysis_config::callret_analysis_results_callret_labels>() {
  return ::analysis_config::callret_analysis_results_callret_labels_descriptor();
}
template <> struct is_proto_enum< ::analysis_config::callret_analysis_results_callret_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analysis_config::callret_analysis_results_callret_status>() {
  return ::analysis_config::callret_analysis_results_callret_status_descriptor();
}
template <> struct is_proto_enum< ::analysis_config::po_analysis_results_po_status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::analysis_config::po_analysis_results_po_status>() {
  return ::analysis_config::po_analysis_results_po_status_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_analysis_5fconfig_2eproto
