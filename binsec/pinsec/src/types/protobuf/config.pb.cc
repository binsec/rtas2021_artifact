// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config.proto

#include "config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_specific_parameters_t_analysis_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_indirect_register_t_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_memory_t_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_register_t_common_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_name_t_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_config_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_input_t_config_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_instruction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_instr_pol_instruction_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_libcall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_libcall_pol_libcall_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_syscall_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_syscall_pol_syscall_2eproto;
namespace configuration {
class call_name_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<call_name_t> _instance;
} _call_name_t_default_instance_;
class configurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<configuration> _instance;
} _configuration_default_instance_;
class input_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<input_t> _instance;
  const ::common::register_t* reg_;
  const ::common::memory_t* mem_;
  const ::common::indirect_register_t* indirect_;
} _input_t_default_instance_;
}  // namespace configuration
static void InitDefaultsscc_info_call_name_t_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::configuration::_call_name_t_default_instance_;
    new (ptr) ::configuration::call_name_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::configuration::call_name_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_call_name_t_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_call_name_t_config_2eproto}, {}};

static void InitDefaultsscc_info_configuration_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::configuration::_configuration_default_instance_;
    new (ptr) ::configuration::configuration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::configuration::configuration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_configuration_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsscc_info_configuration_config_2eproto}, {
      &scc_info_libcall_pol_libcall_2eproto.base,
      &scc_info_syscall_pol_syscall_2eproto.base,
      &scc_info_instr_pol_instruction_2eproto.base,
      &scc_info_input_t_config_2eproto.base,
      &scc_info_call_name_t_config_2eproto.base,
      &scc_info_memory_t_common_2eproto.base,
      &scc_info_specific_parameters_t_analysis_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_input_t_config_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::configuration::_input_t_default_instance_;
    new (ptr) ::configuration::input_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::configuration::input_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_input_t_config_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_input_t_config_2eproto}, {
      &scc_info_register_t_common_2eproto.base,
      &scc_info_memory_t_common_2eproto.base,
      &scc_info_indirect_register_t_common_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_config_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_config_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_config_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_config_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::configuration::call_name_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::configuration::call_name_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::configuration::call_name_t, address_),
  PROTOBUF_FIELD_OFFSET(::configuration::call_name_t, name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, start_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, stop_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, call_skips_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, fun_skips_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, libcalls_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, syscalls_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, instrs_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, policy_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, inputs_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, call_map_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, breakpoints_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, initial_state_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, direction_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, ksteps_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, analysis_name_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, solver_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, incremental_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, timeout_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, optim_cstprop_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, optim_rebase_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, optim_row_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, optim_rowplus_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, optim_eqprop_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, callcvt_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, default_action_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, verbosity_),
  PROTOBUF_FIELD_OFFSET(::configuration::configuration, additional_parameters_),
  2,
  3,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  13,
  4,
  0,
  14,
  6,
  5,
  7,
  8,
  9,
  11,
  12,
  15,
  16,
  10,
  1,
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, typeid__),
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, address_),
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, when_),
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, action_),
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, iteration_),
  offsetof(::configuration::input_tDefaultTypeInternal, reg_),
  offsetof(::configuration::input_tDefaultTypeInternal, mem_),
  offsetof(::configuration::input_tDefaultTypeInternal, indirect_),
  PROTOBUF_FIELD_OFFSET(::configuration::input_t, input_cnt_),
  1,
  0,
  2,
  3,
  4,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::configuration::call_name_t)},
  { 9, 41, sizeof(::configuration::configuration)},
  { 68, 82, sizeof(::configuration::input_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::configuration::_call_name_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::configuration::_configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::configuration::_input_t_default_instance_),
};

const char descriptor_table_protodef_config_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014config.proto\022\rconfiguration\032\014common.pr"
  "oto\032\rlibcall.proto\032\rsyscall.proto\032\021instr"
  "uction.proto\032\025analysis_config.proto\",\n\013c"
  "all_name_t\022\017\n\007address\030\001 \002(\004\022\014\n\004name\030\002 \002("
  "\t\"\211\007\n\rconfiguration\022\r\n\005start\030\001 \001(\004\022\014\n\004st"
  "op\030\002 \001(\004\022\022\n\ncall_skips\030\003 \003(\004\022\021\n\tfun_skip"
  "s\030\004 \003(\004\022,\n\010libcalls\030\005 \003(\0132\032.libcall_type"
  "s.libcall_pol\022,\n\010syscalls\030\006 \003(\0132\032.syscal"
  "l_types.syscall_pol\022*\n\006instrs\030\007 \003(\0132\032.in"
  "struction_pol.instr_pol\022\016\n\006policy\030\010 \003(\t\022"
  "&\n\006inputs\030\t \003(\0132\026.configuration.input_t\022"
  ",\n\010call_map\030\n \003(\0132\032.configuration.call_n"
  "ame_t\022\023\n\013breakpoints\030\013 \003(\004\022\'\n\rinitial_st"
  "ate\030\014 \003(\0132\020.common.memory_t\0228\n\tdirection"
  "\030\r \001(\0162\034.common.analysis_direction_t:\007FO"
  "RWARD\022\021\n\006ksteps\030\016 \001(\r:\0010\022\027\n\ranalysis_nam"
  "e\030\017 \001(\t:\000\022$\n\006solver\030\020 \001(\0162\020.common.solve"
  "r_t:\002Z3\022\032\n\013incremental\030\021 \001(\010:\005false\022\022\n\007t"
  "imeout\030\022 \001(\r:\0010\022\034\n\roptim_cstprop\030\023 \001(\010:\005"
  "false\022\033\n\014optim_rebase\030\024 \001(\010:\005false\022\030\n\top"
  "tim_row\030\025 \001(\010:\005false\022\034\n\roptim_rowplus\030\032 "
  "\001(\010:\005false\022\033\n\014optim_eqprop\030\033 \001(\010:\005false\022"
  "1\n\007callcvt\030\026 \001(\0162\031.common.call_conventio"
  "n_t:\005CDECL\022,\n\016default_action\030\027 \001(\0162\016.com"
  "mon.action:\004SYMB\022\024\n\tverbosity\030\030 \001(\r:\0010\022E"
  "\n\025additional_parameters\030\031 \001(\0132&.analysis"
  "_config.specific_parameters_t\"\201\003\n\007input_"
  "t\0221\n\006typeid\030\001 \002(\0162!.configuration.input_"
  "t.input_kind\022\017\n\007address\030\002 \002(\004\022+\n\004when\030\003 "
  "\002(\0162\035.configuration.input_t.when_t\022\036\n\006ac"
  "tion\030\004 \002(\0162\016.common.action\022\024\n\titeration\030"
  "d \001(\r:\0010\022!\n\003reg\030\007 \001(\0132\022.common.register_"
  "tH\000\022\037\n\003mem\030\010 \001(\0132\020.common.memory_tH\000\022/\n\010"
  "indirect\030\t \001(\0132\033.common.indirect_registe"
  "r_tH\000\",\n\ninput_kind\022\007\n\003REG\020\000\022\007\n\003MEM\020\001\022\014\n"
  "\010INDIRECT\020\002\"\037\n\006when_t\022\n\n\006BEFORE\020\000\022\t\n\005AFT"
  "ER\020\001B\013\n\tinput_cnt"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_config_2eproto_deps[5] = {
  &::descriptor_table_analysis_5fconfig_2eproto,
  &::descriptor_table_common_2eproto,
  &::descriptor_table_instruction_2eproto,
  &::descriptor_table_libcall_2eproto,
  &::descriptor_table_syscall_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_config_2eproto_sccs[3] = {
  &scc_info_call_name_t_config_2eproto.base,
  &scc_info_configuration_config_2eproto.base,
  &scc_info_input_t_config_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_config_2eproto_once;
static bool descriptor_table_config_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_2eproto = {
  &descriptor_table_config_2eproto_initialized, descriptor_table_protodef_config_2eproto, "config.proto", 1457,
  &descriptor_table_config_2eproto_once, descriptor_table_config_2eproto_sccs, descriptor_table_config_2eproto_deps, 3, 5,
  schemas, file_default_instances, TableStruct_config_2eproto::offsets,
  file_level_metadata_config_2eproto, 3, file_level_enum_descriptors_config_2eproto, file_level_service_descriptors_config_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_config_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_config_2eproto), true);
namespace configuration {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* input_t_input_kind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[0];
}
bool input_t_input_kind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr input_t_input_kind input_t::REG;
constexpr input_t_input_kind input_t::MEM;
constexpr input_t_input_kind input_t::INDIRECT;
constexpr input_t_input_kind input_t::input_kind_MIN;
constexpr input_t_input_kind input_t::input_kind_MAX;
constexpr int input_t::input_kind_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* input_t_when_t_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_config_2eproto);
  return file_level_enum_descriptors_config_2eproto[1];
}
bool input_t_when_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr input_t_when_t input_t::BEFORE;
constexpr input_t_when_t input_t::AFTER;
constexpr input_t_when_t input_t::when_t_MIN;
constexpr input_t_when_t input_t::when_t_MAX;
constexpr int input_t::when_t_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void call_name_t::InitAsDefaultInstance() {
}
class call_name_t::_Internal {
 public:
  using HasBits = decltype(std::declval<call_name_t>()._has_bits_);
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

call_name_t::call_name_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:configuration.call_name_t)
}
call_name_t::call_name_t(const call_name_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  address_ = from.address_;
  // @@protoc_insertion_point(copy_constructor:configuration.call_name_t)
}

void call_name_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_call_name_t_config_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_ = PROTOBUF_ULONGLONG(0);
}

call_name_t::~call_name_t() {
  // @@protoc_insertion_point(destructor:configuration.call_name_t)
  SharedDtor();
}

void call_name_t::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void call_name_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const call_name_t& call_name_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_call_name_t_config_2eproto.base);
  return *internal_default_instance();
}


void call_name_t::Clear() {
// @@protoc_insertion_point(message_clear_start:configuration.call_name_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  address_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* call_name_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_address(&has_bits);
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_name(), ptr, ctx, "configuration.call_name_t.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool call_name_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:configuration.call_name_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 address = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "configuration.call_name_t.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:configuration.call_name_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:configuration.call_name_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void call_name_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:configuration.call_name_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 address = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->address(), output);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "configuration.call_name_t.name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:configuration.call_name_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* call_name_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:configuration.call_name_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 address = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->address(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "configuration.call_name_t.name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:configuration.call_name_t)
  return target;
}

size_t call_name_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:configuration.call_name_t)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_address()) {
    // required uint64 address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  return total_size;
}
size_t call_name_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:configuration.call_name_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->name());

    // required uint64 address = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->address());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void call_name_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:configuration.call_name_t)
  GOOGLE_DCHECK_NE(&from, this);
  const call_name_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<call_name_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:configuration.call_name_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:configuration.call_name_t)
    MergeFrom(*source);
  }
}

void call_name_t::MergeFrom(const call_name_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:configuration.call_name_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      address_ = from.address_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void call_name_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:configuration.call_name_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void call_name_t::CopyFrom(const call_name_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:configuration.call_name_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool call_name_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void call_name_t::InternalSwap(call_name_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(address_, other->address_);
}

::PROTOBUF_NAMESPACE_ID::Metadata call_name_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void configuration::InitAsDefaultInstance() {
  ::configuration::_configuration_default_instance_._instance.get_mutable()->additional_parameters_ = const_cast< ::analysis_config::specific_parameters_t*>(
      ::analysis_config::specific_parameters_t::internal_default_instance());
}
class configuration::_Internal {
 public:
  using HasBits = decltype(std::declval<configuration>()._has_bits_);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_stop(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_ksteps(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_analysis_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_solver(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_incremental(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timeout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_optim_cstprop(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_optim_rebase(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_optim_row(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_optim_rowplus(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_optim_eqprop(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_callcvt(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_default_action(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_verbosity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::analysis_config::specific_parameters_t& additional_parameters(const configuration* msg);
  static void set_has_additional_parameters(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::analysis_config::specific_parameters_t&
configuration::_Internal::additional_parameters(const configuration* msg) {
  return *msg->additional_parameters_;
}
void configuration::clear_libcalls() {
  libcalls_.Clear();
}
void configuration::clear_syscalls() {
  syscalls_.Clear();
}
void configuration::clear_instrs() {
  instrs_.Clear();
}
void configuration::clear_initial_state() {
  initial_state_.Clear();
}
void configuration::clear_additional_parameters() {
  if (additional_parameters_ != nullptr) additional_parameters_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
configuration::configuration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:configuration.configuration)
}
configuration::configuration(const configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      call_skips_(from.call_skips_),
      fun_skips_(from.fun_skips_),
      libcalls_(from.libcalls_),
      syscalls_(from.syscalls_),
      instrs_(from.instrs_),
      policy_(from.policy_),
      inputs_(from.inputs_),
      call_map_(from.call_map_),
      breakpoints_(from.breakpoints_),
      initial_state_(from.initial_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_analysis_name()) {
    analysis_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
  }
  if (from.has_additional_parameters()) {
    additional_parameters_ = new ::analysis_config::specific_parameters_t(*from.additional_parameters_);
  } else {
    additional_parameters_ = nullptr;
  }
  ::memcpy(&start_, &from.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&default_action_) -
    reinterpret_cast<char*>(&start_)) + sizeof(default_action_));
  // @@protoc_insertion_point(copy_constructor:configuration.configuration)
}

void configuration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_configuration_config_2eproto.base);
  analysis_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&additional_parameters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&optim_eqprop_) -
      reinterpret_cast<char*>(&additional_parameters_)) + sizeof(optim_eqprop_));
  direction_ = 1;
  solver_ = 1;
  callcvt_ = 1;
  default_action_ = 3;
}

configuration::~configuration() {
  // @@protoc_insertion_point(destructor:configuration.configuration)
  SharedDtor();
}

void configuration::SharedDtor() {
  analysis_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete additional_parameters_;
}

void configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const configuration& configuration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_configuration_config_2eproto.base);
  return *internal_default_instance();
}


void configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:configuration.configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  call_skips_.Clear();
  fun_skips_.Clear();
  libcalls_.Clear();
  syscalls_.Clear();
  instrs_.Clear();
  policy_.Clear();
  inputs_.Clear();
  call_map_.Clear();
  breakpoints_.Clear();
  initial_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      analysis_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(additional_parameters_ != nullptr);
      additional_parameters_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&start_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optim_cstprop_) -
        reinterpret_cast<char*>(&start_)) + sizeof(optim_cstprop_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&optim_rebase_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&optim_eqprop_) -
        reinterpret_cast<char*>(&optim_rebase_)) + sizeof(optim_eqprop_));
    direction_ = 1;
    solver_ = 1;
    callcvt_ = 1;
  }
  default_action_ = 3;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_start(&has_bits);
          start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 stop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_stop(&has_bits);
          stop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 call_skips = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_call_skips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_call_skips(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 fun_skips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_fun_skips(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_fun_skips(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .libcall_types.libcall_pol libcalls = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_libcalls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 42);
        } else goto handle_unusual;
        continue;
      // repeated .syscall_types.syscall_pol syscalls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_syscalls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      // repeated .instruction_pol.instr_pol instrs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_instrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 58);
        } else goto handle_unusual;
        continue;
      // repeated string policy = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(add_policy(), ptr, ctx, "configuration.configuration.policy");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 66);
        } else goto handle_unusual;
        continue;
      // repeated .configuration.input_t inputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 74);
        } else goto handle_unusual;
        continue;
      // repeated .configuration.call_name_t call_map = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_call_map(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 82);
        } else goto handle_unusual;
        continue;
      // repeated uint64 breakpoints = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_breakpoints(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 88);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_breakpoints(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .common.memory_t initial_state = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_initial_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 98);
        } else goto handle_unusual;
        continue;
      // optional .common.analysis_direction_t direction = 13 [default = FORWARD];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::analysis_direction_t_IsValid(val))) {
            set_direction(static_cast<::common::analysis_direction_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 ksteps = 14 [default = 0];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_ksteps(&has_bits);
          ksteps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string analysis_name = 15 [default = ""];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_analysis_name(), ptr, ctx, "configuration.configuration.analysis_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .common.solver_t solver = 16 [default = Z3];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::solver_t_IsValid(val))) {
            set_solver(static_cast<::common::solver_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool incremental = 17 [default = false];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_incremental(&has_bits);
          incremental_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 timeout = 18 [default = 0];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_timeout(&has_bits);
          timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optim_cstprop = 19 [default = false];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_optim_cstprop(&has_bits);
          optim_cstprop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optim_rebase = 20 [default = false];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_optim_rebase(&has_bits);
          optim_rebase_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optim_row = 21 [default = false];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_optim_row(&has_bits);
          optim_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .common.call_convention_t callcvt = 22 [default = CDECL];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::call_convention_t_IsValid(val))) {
            set_callcvt(static_cast<::common::call_convention_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(22, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.action default_action = 23 [default = SYMB];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_default_action(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(23, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional uint32 verbosity = 24 [default = 0];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_verbosity(&has_bits);
          verbosity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .analysis_config.specific_parameters_t additional_parameters = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_additional_parameters(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optim_rowplus = 26 [default = false];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_optim_rowplus(&has_bits);
          optim_rowplus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool optim_eqprop = 27 [default = false];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_optim_eqprop(&has_bits);
          optim_eqprop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool configuration::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:configuration.configuration)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 start = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_start(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 stop = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_stop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 call_skips = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24u, input, this->mutable_call_skips())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_call_skips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 fun_skips = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_fun_skips())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_fun_skips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .libcall_types.libcall_pol libcalls = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_libcalls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .syscall_types.syscall_pol syscalls = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_syscalls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .instruction_pol.instr_pol instrs = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_instrs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string policy = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->add_policy()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->policy(this->policy_size() - 1).data(),
            static_cast<int>(this->policy(this->policy_size() - 1).length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "configuration.configuration.policy");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .configuration.input_t inputs = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_inputs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .configuration.call_name_t call_map = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_call_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 breakpoints = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (88 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 88u, input, this->mutable_breakpoints())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_breakpoints())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .common.memory_t initial_state = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_initial_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.analysis_direction_t direction = 13 [default = FORWARD];
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (104 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::analysis_direction_t_IsValid(value)) {
            set_direction(static_cast< ::common::analysis_direction_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                13, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ksteps = 14 [default = 0];
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (112 & 0xFF)) {
          _Internal::set_has_ksteps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ksteps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string analysis_name = 15 [default = ""];
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_analysis_name()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "configuration.configuration.analysis_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.solver_t solver = 16 [default = Z3];
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (128 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::solver_t_IsValid(value)) {
            set_solver(static_cast< ::common::solver_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                16, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool incremental = 17 [default = false];
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (136 & 0xFF)) {
          _Internal::set_has_incremental(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &incremental_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timeout = 18 [default = 0];
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (144 & 0xFF)) {
          _Internal::set_has_timeout(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optim_cstprop = 19 [default = false];
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (152 & 0xFF)) {
          _Internal::set_has_optim_cstprop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optim_cstprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optim_rebase = 20 [default = false];
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (160 & 0xFF)) {
          _Internal::set_has_optim_rebase(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optim_rebase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optim_row = 21 [default = false];
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (168 & 0xFF)) {
          _Internal::set_has_optim_row(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optim_row_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.call_convention_t callcvt = 22 [default = CDECL];
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (176 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::call_convention_t_IsValid(value)) {
            set_callcvt(static_cast< ::common::call_convention_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                22, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action default_action = 23 [default = SYMB];
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (184 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_default_action(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                23, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 verbosity = 24 [default = 0];
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (192 & 0xFF)) {
          _Internal::set_has_verbosity(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &verbosity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .analysis_config.specific_parameters_t additional_parameters = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_additional_parameters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optim_rowplus = 26 [default = false];
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (208 & 0xFF)) {
          _Internal::set_has_optim_rowplus(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optim_rowplus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool optim_eqprop = 27 [default = false];
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (216 & 0xFF)) {
          _Internal::set_has_optim_eqprop(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &optim_eqprop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:configuration.configuration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:configuration.configuration)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void configuration::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:configuration.configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start(), output);
  }

  // optional uint64 stop = 2;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->stop(), output);
  }

  // repeated uint64 call_skips = 3;
  for (int i = 0, n = this->call_skips_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      3, this->call_skips(i), output);
  }

  // repeated uint64 fun_skips = 4;
  for (int i = 0, n = this->fun_skips_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      4, this->fun_skips(i), output);
  }

  // repeated .libcall_types.libcall_pol libcalls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->libcalls_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->libcalls(static_cast<int>(i)),
      output);
  }

  // repeated .syscall_types.syscall_pol syscalls = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syscalls_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->syscalls(static_cast<int>(i)),
      output);
  }

  // repeated .instruction_pol.instr_pol instrs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instrs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->instrs(static_cast<int>(i)),
      output);
  }

  // repeated string policy = 8;
  for (int i = 0, n = this->policy_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy(i).data(), static_cast<int>(this->policy(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "configuration.configuration.policy");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteString(
      8, this->policy(i), output);
  }

  // repeated .configuration.input_t inputs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->inputs(static_cast<int>(i)),
      output);
  }

  // repeated .configuration.call_name_t call_map = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->call_map_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10,
      this->call_map(static_cast<int>(i)),
      output);
  }

  // repeated uint64 breakpoints = 11;
  for (int i = 0, n = this->breakpoints_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      11, this->breakpoints(i), output);
  }

  // repeated .common.memory_t initial_state = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->initial_state_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->initial_state(static_cast<int>(i)),
      output);
  }

  // optional .common.analysis_direction_t direction = 13 [default = FORWARD];
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      13, this->direction(), output);
  }

  // optional uint32 ksteps = 14 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(14, this->ksteps(), output);
  }

  // optional string analysis_name = 15 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "configuration.configuration.analysis_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->analysis_name(), output);
  }

  // optional .common.solver_t solver = 16 [default = Z3];
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      16, this->solver(), output);
  }

  // optional bool incremental = 17 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(17, this->incremental(), output);
  }

  // optional uint32 timeout = 18 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(18, this->timeout(), output);
  }

  // optional bool optim_cstprop = 19 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(19, this->optim_cstprop(), output);
  }

  // optional bool optim_rebase = 20 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(20, this->optim_rebase(), output);
  }

  // optional bool optim_row = 21 [default = false];
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(21, this->optim_row(), output);
  }

  // optional .common.call_convention_t callcvt = 22 [default = CDECL];
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      22, this->callcvt(), output);
  }

  // optional .common.action default_action = 23 [default = SYMB];
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      23, this->default_action(), output);
  }

  // optional uint32 verbosity = 24 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(24, this->verbosity(), output);
  }

  // optional .analysis_config.specific_parameters_t additional_parameters = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::additional_parameters(this), output);
  }

  // optional bool optim_rowplus = 26 [default = false];
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(26, this->optim_rowplus(), output);
  }

  // optional bool optim_eqprop = 27 [default = false];
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(27, this->optim_eqprop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:configuration.configuration)
}

::PROTOBUF_NAMESPACE_ID::uint8* configuration::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:configuration.configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 start = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start(), target);
  }

  // optional uint64 stop = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->stop(), target);
  }

  // repeated uint64 call_skips = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(3, this->call_skips_, target);

  // repeated uint64 fun_skips = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->fun_skips_, target);

  // repeated .libcall_types.libcall_pol libcalls = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->libcalls_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->libcalls(static_cast<int>(i)), target);
  }

  // repeated .syscall_types.syscall_pol syscalls = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->syscalls_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->syscalls(static_cast<int>(i)), target);
  }

  // repeated .instruction_pol.instr_pol instrs = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->instrs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->instrs(static_cast<int>(i)), target);
  }

  // repeated string policy = 8;
  for (int i = 0, n = this->policy_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->policy(i).data(), static_cast<int>(this->policy(i).length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "configuration.configuration.policy");
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteStringToArray(8, this->policy(i), target);
  }

  // repeated .configuration.input_t inputs = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->inputs_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->inputs(static_cast<int>(i)), target);
  }

  // repeated .configuration.call_name_t call_map = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->call_map_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->call_map(static_cast<int>(i)), target);
  }

  // repeated uint64 breakpoints = 11;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(11, this->breakpoints_, target);

  // repeated .common.memory_t initial_state = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->initial_state_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->initial_state(static_cast<int>(i)), target);
  }

  // optional .common.analysis_direction_t direction = 13 [default = FORWARD];
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->direction(), target);
  }

  // optional uint32 ksteps = 14 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->ksteps(), target);
  }

  // optional string analysis_name = 15 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->analysis_name().data(), static_cast<int>(this->analysis_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "configuration.configuration.analysis_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        15, this->analysis_name(), target);
  }

  // optional .common.solver_t solver = 16 [default = Z3];
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->solver(), target);
  }

  // optional bool incremental = 17 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(17, this->incremental(), target);
  }

  // optional uint32 timeout = 18 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->timeout(), target);
  }

  // optional bool optim_cstprop = 19 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->optim_cstprop(), target);
  }

  // optional bool optim_rebase = 20 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->optim_rebase(), target);
  }

  // optional bool optim_row = 21 [default = false];
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->optim_row(), target);
  }

  // optional .common.call_convention_t callcvt = 22 [default = CDECL];
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      22, this->callcvt(), target);
  }

  // optional .common.action default_action = 23 [default = SYMB];
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      23, this->default_action(), target);
  }

  // optional uint32 verbosity = 24 [default = 0];
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->verbosity(), target);
  }

  // optional .analysis_config.specific_parameters_t additional_parameters = 25;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::additional_parameters(this), target);
  }

  // optional bool optim_rowplus = 26 [default = false];
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(26, this->optim_rowplus(), target);
  }

  // optional bool optim_eqprop = 27 [default = false];
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->optim_eqprop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:configuration.configuration)
  return target;
}

size_t configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:configuration.configuration)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 call_skips = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->call_skips_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->call_skips_size());
    total_size += data_size;
  }

  // repeated uint64 fun_skips = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->fun_skips_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->fun_skips_size());
    total_size += data_size;
  }

  // repeated .libcall_types.libcall_pol libcalls = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->libcalls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->libcalls(static_cast<int>(i)));
    }
  }

  // repeated .syscall_types.syscall_pol syscalls = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->syscalls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->syscalls(static_cast<int>(i)));
    }
  }

  // repeated .instruction_pol.instr_pol instrs = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->instrs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->instrs(static_cast<int>(i)));
    }
  }

  // repeated string policy = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->policy_size());
  for (int i = 0, n = this->policy_size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      this->policy(i));
  }

  // repeated .configuration.input_t inputs = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->inputs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->inputs(static_cast<int>(i)));
    }
  }

  // repeated .configuration.call_name_t call_map = 10;
  {
    unsigned int count = static_cast<unsigned int>(this->call_map_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->call_map(static_cast<int>(i)));
    }
  }

  // repeated uint64 breakpoints = 11;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->breakpoints_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->breakpoints_size());
    total_size += data_size;
  }

  // repeated .common.memory_t initial_state = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->initial_state_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->initial_state(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string analysis_name = 15 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->analysis_name());
    }

    // optional .analysis_config.specific_parameters_t additional_parameters = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *additional_parameters_);
    }

    // optional uint64 start = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->start());
    }

    // optional uint64 stop = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->stop());
    }

    // optional uint32 ksteps = 14 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->ksteps());
    }

    // optional uint32 timeout = 18 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->timeout());
    }

    // optional bool incremental = 17 [default = false];
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 + 1;
    }

    // optional bool optim_cstprop = 19 [default = false];
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 + 1;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool optim_rebase = 20 [default = false];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 + 1;
    }

    // optional bool optim_row = 21 [default = false];
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 + 1;
    }

    // optional uint32 verbosity = 24 [default = 0];
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->verbosity());
    }

    // optional bool optim_rowplus = 26 [default = false];
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 + 1;
    }

    // optional bool optim_eqprop = 27 [default = false];
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + 1;
    }

    // optional .common.analysis_direction_t direction = 13 [default = FORWARD];
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->direction());
    }

    // optional .common.solver_t solver = 16 [default = Z3];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->solver());
    }

    // optional .common.call_convention_t callcvt = 22 [default = CDECL];
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->callcvt());
    }

  }
  // optional .common.action default_action = 23 [default = SYMB];
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->default_action());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void configuration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:configuration.configuration)
  GOOGLE_DCHECK_NE(&from, this);
  const configuration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<configuration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:configuration.configuration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:configuration.configuration)
    MergeFrom(*source);
  }
}

void configuration::MergeFrom(const configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:configuration.configuration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  call_skips_.MergeFrom(from.call_skips_);
  fun_skips_.MergeFrom(from.fun_skips_);
  libcalls_.MergeFrom(from.libcalls_);
  syscalls_.MergeFrom(from.syscalls_);
  instrs_.MergeFrom(from.instrs_);
  policy_.MergeFrom(from.policy_);
  inputs_.MergeFrom(from.inputs_);
  call_map_.MergeFrom(from.call_map_);
  breakpoints_.MergeFrom(from.breakpoints_);
  initial_state_.MergeFrom(from.initial_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      analysis_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.analysis_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_additional_parameters()->::analysis_config::specific_parameters_t::MergeFrom(from.additional_parameters());
    }
    if (cached_has_bits & 0x00000004u) {
      start_ = from.start_;
    }
    if (cached_has_bits & 0x00000008u) {
      stop_ = from.stop_;
    }
    if (cached_has_bits & 0x00000010u) {
      ksteps_ = from.ksteps_;
    }
    if (cached_has_bits & 0x00000020u) {
      timeout_ = from.timeout_;
    }
    if (cached_has_bits & 0x00000040u) {
      incremental_ = from.incremental_;
    }
    if (cached_has_bits & 0x00000080u) {
      optim_cstprop_ = from.optim_cstprop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      optim_rebase_ = from.optim_rebase_;
    }
    if (cached_has_bits & 0x00000200u) {
      optim_row_ = from.optim_row_;
    }
    if (cached_has_bits & 0x00000400u) {
      verbosity_ = from.verbosity_;
    }
    if (cached_has_bits & 0x00000800u) {
      optim_rowplus_ = from.optim_rowplus_;
    }
    if (cached_has_bits & 0x00001000u) {
      optim_eqprop_ = from.optim_eqprop_;
    }
    if (cached_has_bits & 0x00002000u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00004000u) {
      solver_ = from.solver_;
    }
    if (cached_has_bits & 0x00008000u) {
      callcvt_ = from.callcvt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_default_action(from.default_action());
  }
}

void configuration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:configuration.configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void configuration::CopyFrom(const configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:configuration.configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool configuration::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->libcalls())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->syscalls())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->instrs())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->inputs())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->call_map())) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->initial_state())) return false;
  if (has_additional_parameters()) {
    if (!this->additional_parameters_->IsInitialized()) return false;
  }
  return true;
}

void configuration::InternalSwap(configuration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  call_skips_.InternalSwap(&other->call_skips_);
  fun_skips_.InternalSwap(&other->fun_skips_);
  CastToBase(&libcalls_)->InternalSwap(CastToBase(&other->libcalls_));
  CastToBase(&syscalls_)->InternalSwap(CastToBase(&other->syscalls_));
  CastToBase(&instrs_)->InternalSwap(CastToBase(&other->instrs_));
  policy_.InternalSwap(CastToBase(&other->policy_));
  CastToBase(&inputs_)->InternalSwap(CastToBase(&other->inputs_));
  CastToBase(&call_map_)->InternalSwap(CastToBase(&other->call_map_));
  breakpoints_.InternalSwap(&other->breakpoints_);
  CastToBase(&initial_state_)->InternalSwap(CastToBase(&other->initial_state_));
  analysis_name_.Swap(&other->analysis_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(additional_parameters_, other->additional_parameters_);
  swap(start_, other->start_);
  swap(stop_, other->stop_);
  swap(ksteps_, other->ksteps_);
  swap(timeout_, other->timeout_);
  swap(incremental_, other->incremental_);
  swap(optim_cstprop_, other->optim_cstprop_);
  swap(optim_rebase_, other->optim_rebase_);
  swap(optim_row_, other->optim_row_);
  swap(verbosity_, other->verbosity_);
  swap(optim_rowplus_, other->optim_rowplus_);
  swap(optim_eqprop_, other->optim_eqprop_);
  swap(direction_, other->direction_);
  swap(solver_, other->solver_);
  swap(callcvt_, other->callcvt_);
  swap(default_action_, other->default_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata configuration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void input_t::InitAsDefaultInstance() {
  ::configuration::_input_t_default_instance_.reg_ = const_cast< ::common::register_t*>(
      ::common::register_t::internal_default_instance());
  ::configuration::_input_t_default_instance_.mem_ = const_cast< ::common::memory_t*>(
      ::common::memory_t::internal_default_instance());
  ::configuration::_input_t_default_instance_.indirect_ = const_cast< ::common::indirect_register_t*>(
      ::common::indirect_register_t::internal_default_instance());
}
class input_t::_Internal {
 public:
  using HasBits = decltype(std::declval<input_t>()._has_bits_);
  static void set_has_typeid_(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_address(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_when(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_iteration(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::common::register_t& reg(const input_t* msg);
  static const ::common::memory_t& mem(const input_t* msg);
  static const ::common::indirect_register_t& indirect(const input_t* msg);
};

const ::common::register_t&
input_t::_Internal::reg(const input_t* msg) {
  return *msg->input_cnt_.reg_;
}
const ::common::memory_t&
input_t::_Internal::mem(const input_t* msg) {
  return *msg->input_cnt_.mem_;
}
const ::common::indirect_register_t&
input_t::_Internal::indirect(const input_t* msg) {
  return *msg->input_cnt_.indirect_;
}
void input_t::set_allocated_reg(::common::register_t* reg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_input_cnt();
  if (reg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reg, submessage_arena);
    }
    set_has_reg();
    input_cnt_.reg_ = reg;
  }
  // @@protoc_insertion_point(field_set_allocated:configuration.input_t.reg)
}
void input_t::clear_reg() {
  if (has_reg()) {
    delete input_cnt_.reg_;
    clear_has_input_cnt();
  }
}
void input_t::set_allocated_mem(::common::memory_t* mem) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_input_cnt();
  if (mem) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mem = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mem, submessage_arena);
    }
    set_has_mem();
    input_cnt_.mem_ = mem;
  }
  // @@protoc_insertion_point(field_set_allocated:configuration.input_t.mem)
}
void input_t::clear_mem() {
  if (has_mem()) {
    delete input_cnt_.mem_;
    clear_has_input_cnt();
  }
}
void input_t::set_allocated_indirect(::common::indirect_register_t* indirect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_input_cnt();
  if (indirect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      indirect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indirect, submessage_arena);
    }
    set_has_indirect();
    input_cnt_.indirect_ = indirect;
  }
  // @@protoc_insertion_point(field_set_allocated:configuration.input_t.indirect)
}
void input_t::clear_indirect() {
  if (has_indirect()) {
    delete input_cnt_.indirect_;
    clear_has_input_cnt();
  }
}
input_t::input_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:configuration.input_t)
}
input_t::input_t(const input_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&address_, &from.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&iteration_) -
    reinterpret_cast<char*>(&address_)) + sizeof(iteration_));
  clear_has_input_cnt();
  switch (from.input_cnt_case()) {
    case kReg: {
      mutable_reg()->::common::register_t::MergeFrom(from.reg());
      break;
    }
    case kMem: {
      mutable_mem()->::common::memory_t::MergeFrom(from.mem());
      break;
    }
    case kIndirect: {
      mutable_indirect()->::common::indirect_register_t::MergeFrom(from.indirect());
      break;
    }
    case INPUT_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:configuration.input_t)
}

void input_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_input_t_config_2eproto.base);
  ::memset(&address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&iteration_) -
      reinterpret_cast<char*>(&address_)) + sizeof(iteration_));
  clear_has_input_cnt();
}

input_t::~input_t() {
  // @@protoc_insertion_point(destructor:configuration.input_t)
  SharedDtor();
}

void input_t::SharedDtor() {
  if (has_input_cnt()) {
    clear_input_cnt();
  }
}

void input_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const input_t& input_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_input_t_config_2eproto.base);
  return *internal_default_instance();
}


void input_t::clear_input_cnt() {
// @@protoc_insertion_point(one_of_clear_start:configuration.input_t)
  switch (input_cnt_case()) {
    case kReg: {
      delete input_cnt_.reg_;
      break;
    }
    case kMem: {
      delete input_cnt_.mem_;
      break;
    }
    case kIndirect: {
      delete input_cnt_.indirect_;
      break;
    }
    case INPUT_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INPUT_CNT_NOT_SET;
}


void input_t::Clear() {
// @@protoc_insertion_point(message_clear_start:configuration.input_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&address_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&iteration_) -
        reinterpret_cast<char*>(&address_)) + sizeof(iteration_));
  }
  clear_input_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* input_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .configuration.input_t.input_kind typeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::configuration::input_t_input_kind_IsValid(val))) {
            set_typeid_(static_cast<::configuration::input_t_input_kind>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_address(&has_bits);
          address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .configuration.input_t.when_t when = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::configuration::input_t_when_t_IsValid(val))) {
            set_when(static_cast<::configuration::input_t_when_t>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required .common.action action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_action(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.register_t reg = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_reg(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .common.memory_t mem = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_mem(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .common.indirect_register_t indirect = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_indirect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 iteration = 100 [default = 0];
      case 100:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_iteration(&has_bits);
          iteration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool input_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:configuration.input_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .configuration.input_t.input_kind typeid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::configuration::input_t_input_kind_IsValid(value)) {
            set_typeid_(static_cast< ::configuration::input_t_input_kind >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 address = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_address(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &address_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .configuration.input_t.when_t when = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::configuration::input_t_when_t_IsValid(value)) {
            set_when(static_cast< ::configuration::input_t_when_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .common.action action = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_action(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.register_t reg = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_reg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.memory_t mem = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mem()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.indirect_register_t indirect = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_indirect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 iteration = 100 [default = 0];
      case 100: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (800 & 0xFF)) {
          _Internal::set_has_iteration(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iteration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:configuration.input_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:configuration.input_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void input_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:configuration.input_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .configuration.input_t.input_kind typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  // required uint64 address = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->address(), output);
  }

  // required .configuration.input_t.when_t when = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->when(), output);
  }

  // required .common.action action = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->action(), output);
  }

  switch (input_cnt_case()) {
    case kReg:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        7, _Internal::reg(this), output);
      break;
    case kMem:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        8, _Internal::mem(this), output);
      break;
    case kIndirect:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        9, _Internal::indirect(this), output);
      break;
    default: ;
  }
  // optional uint32 iteration = 100 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(100, this->iteration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:configuration.input_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* input_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:configuration.input_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .configuration.input_t.input_kind typeid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  // required uint64 address = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->address(), target);
  }

  // required .configuration.input_t.when_t when = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->when(), target);
  }

  // required .common.action action = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->action(), target);
  }

  switch (input_cnt_case()) {
    case kReg:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          7, _Internal::reg(this), target);
      break;
    case kMem:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          8, _Internal::mem(this), target);
      break;
    case kIndirect:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          9, _Internal::indirect(this), target);
      break;
    default: ;
  }
  // optional uint32 iteration = 100 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(100, this->iteration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:configuration.input_t)
  return target;
}

size_t input_t::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:configuration.input_t)
  size_t total_size = 0;

  if (has_address()) {
    // required uint64 address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->address());
  }

  if (has_typeid_()) {
    // required .configuration.input_t.input_kind typeid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->typeid_());
  }

  if (has_when()) {
    // required .configuration.input_t.when_t when = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->when());
  }

  if (has_action()) {
    // required .common.action action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());
  }

  return total_size;
}
size_t input_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:configuration.input_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 address = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->address());

    // required .configuration.input_t.input_kind typeid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->typeid_());

    // required .configuration.input_t.when_t when = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->when());

    // required .common.action action = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->action());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 iteration = 100 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->iteration());
  }

  switch (input_cnt_case()) {
    // optional .common.register_t reg = 7;
    case kReg: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_cnt_.reg_);
      break;
    }
    // optional .common.memory_t mem = 8;
    case kMem: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_cnt_.mem_);
      break;
    }
    // optional .common.indirect_register_t indirect = 9;
    case kIndirect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *input_cnt_.indirect_);
      break;
    }
    case INPUT_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void input_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:configuration.input_t)
  GOOGLE_DCHECK_NE(&from, this);
  const input_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<input_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:configuration.input_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:configuration.input_t)
    MergeFrom(*source);
  }
}

void input_t::MergeFrom(const input_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:configuration.input_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      address_ = from.address_;
    }
    if (cached_has_bits & 0x00000002u) {
      typeid__ = from.typeid__;
    }
    if (cached_has_bits & 0x00000004u) {
      when_ = from.when_;
    }
    if (cached_has_bits & 0x00000008u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000010u) {
      iteration_ = from.iteration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.input_cnt_case()) {
    case kReg: {
      mutable_reg()->::common::register_t::MergeFrom(from.reg());
      break;
    }
    case kMem: {
      mutable_mem()->::common::memory_t::MergeFrom(from.mem());
      break;
    }
    case kIndirect: {
      mutable_indirect()->::common::indirect_register_t::MergeFrom(from.indirect());
      break;
    }
    case INPUT_CNT_NOT_SET: {
      break;
    }
  }
}

void input_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:configuration.input_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void input_t::CopyFrom(const input_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:configuration.input_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool input_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  switch (input_cnt_case()) {
    case kReg: {
      if (has_reg()) {
        if (!this->reg().IsInitialized()) return false;
      }
      break;
    }
    case kMem: {
      if (has_mem()) {
        if (!this->mem().IsInitialized()) return false;
      }
      break;
    }
    case kIndirect: {
      if (has_indirect()) {
        if (!this->indirect().IsInitialized()) return false;
      }
      break;
    }
    case INPUT_CNT_NOT_SET: {
      break;
    }
  }
  return true;
}

void input_t::InternalSwap(input_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(address_, other->address_);
  swap(typeid__, other->typeid__);
  swap(when_, other->when_);
  swap(action_, other->action_);
  swap(iteration_, other->iteration_);
  swap(input_cnt_, other->input_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata input_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace configuration
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::configuration::call_name_t* Arena::CreateMaybeMessage< ::configuration::call_name_t >(Arena* arena) {
  return Arena::CreateInternal< ::configuration::call_name_t >(arena);
}
template<> PROTOBUF_NOINLINE ::configuration::configuration* Arena::CreateMaybeMessage< ::configuration::configuration >(Arena* arena) {
  return Arena::CreateInternal< ::configuration::configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::configuration::input_t* Arena::CreateMaybeMessage< ::configuration::input_t >(Arena* arena) {
  return Arena::CreateInternal< ::configuration::input_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
