// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: analysis_config.proto

#include "analysis_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_analysis_analysis_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_analysis_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_standard_analysis_analysis_5fconfig_2eproto;
namespace analysis_config {
class specific_parameters_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<specific_parameters_t> _instance;
  const ::analysis_config::generic_analysis* generic_params_;
  const ::analysis_config::standard_analysis* standard_params_;
} _specific_parameters_t_default_instance_;
class standard_analysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<standard_analysis> _instance;
} _standard_analysis_default_instance_;
class generic_analysisDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<generic_analysis> _instance;
} _generic_analysis_default_instance_;
class generic_analysis_resultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<generic_analysis_results> _instance;
} _generic_analysis_results_default_instance_;
class callret_analysis_results_call_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<callret_analysis_results_call_data> _instance;
} _callret_analysis_results_call_data_default_instance_;
class callret_analysis_results_ret_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<callret_analysis_results_ret_data> _instance;
} _callret_analysis_results_ret_data_default_instance_;
class callret_analysis_resultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<callret_analysis_results> _instance;
} _callret_analysis_results_default_instance_;
class po_analysis_results_po_dataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<po_analysis_results_po_data> _instance;
} _po_analysis_results_po_data_default_instance_;
class po_analysis_resultsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<po_analysis_results> _instance;
} _po_analysis_results_default_instance_;
}  // namespace analysis_config
static void InitDefaultsscc_info_callret_analysis_results_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_callret_analysis_results_default_instance_;
    new (ptr) ::analysis_config::callret_analysis_results();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::callret_analysis_results::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_callret_analysis_results_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_callret_analysis_results_analysis_5fconfig_2eproto}, {
      &scc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_callret_analysis_results_call_data_default_instance_;
    new (ptr) ::analysis_config::callret_analysis_results_call_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::callret_analysis_results_call_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_callret_analysis_results_ret_data_default_instance_;
    new (ptr) ::analysis_config::callret_analysis_results_ret_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::callret_analysis_results_ret_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto}, {
      &scc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_generic_analysis_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_generic_analysis_default_instance_;
    new (ptr) ::analysis_config::generic_analysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::generic_analysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_analysis_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_generic_analysis_analysis_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_generic_analysis_results_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_generic_analysis_results_default_instance_;
    new (ptr) ::analysis_config::generic_analysis_results();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::generic_analysis_results::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_generic_analysis_results_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_generic_analysis_results_analysis_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_po_analysis_results_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_po_analysis_results_default_instance_;
    new (ptr) ::analysis_config::po_analysis_results();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::po_analysis_results::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_po_analysis_results_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_po_analysis_results_analysis_5fconfig_2eproto}, {
      &scc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_po_analysis_results_po_data_default_instance_;
    new (ptr) ::analysis_config::po_analysis_results_po_data();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::po_analysis_results_po_data::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_specific_parameters_t_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_specific_parameters_t_default_instance_;
    new (ptr) ::analysis_config::specific_parameters_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::specific_parameters_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_specific_parameters_t_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_specific_parameters_t_analysis_5fconfig_2eproto}, {
      &scc_info_generic_analysis_analysis_5fconfig_2eproto.base,
      &scc_info_standard_analysis_analysis_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_standard_analysis_analysis_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::analysis_config::_standard_analysis_default_instance_;
    new (ptr) ::analysis_config::standard_analysis();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::analysis_config::standard_analysis::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_standard_analysis_analysis_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_standard_analysis_analysis_5fconfig_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_analysis_5fconfig_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_analysis_5fconfig_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_analysis_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_analysis_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::analysis_config::specific_parameters_t, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::specific_parameters_t, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::analysis_config::specific_parameters_t, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::specific_parameters_t, typeid__),
  offsetof(::analysis_config::specific_parameters_tDefaultTypeInternal, generic_params_),
  offsetof(::analysis_config::specific_parameters_tDefaultTypeInternal, standard_params_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::specific_parameters_t, analyse_param_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::analysis_config::standard_analysis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::standard_analysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::standard_analysis, target_addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::standard_analysis, uniq_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::standard_analysis, get_formula_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, kind_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, target_addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, dba_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, limit_values_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, get_formula_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, from_addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, to_addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, restrict_values_from_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis, restrict_values_to_),
  2,
  1,
  0,
  3,
  8,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis_results, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis_results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis_results, result_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis_results, values_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::generic_analysis_results, smt_formula_),
  1,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_call_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_call_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_call_data, addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_call_data, status_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, ret_addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, status_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, labels_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, returnsites_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, solve_count_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results_ret_data, calls_),
  0,
  2,
  ~0u,
  ~0u,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::callret_analysis_results, values_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, jmp_addr_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, status_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, ksteps_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, computation_time_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, nb_paths_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, alive_branch_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results_po_data, formula_),
  1,
  6,
  2,
  3,
  5,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::analysis_config::po_analysis_results, values_),
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::analysis_config::specific_parameters_t)},
  { 12, 20, sizeof(::analysis_config::standard_analysis)},
  { 23, 37, sizeof(::analysis_config::generic_analysis)},
  { 46, 54, sizeof(::analysis_config::generic_analysis_results)},
  { 57, 64, sizeof(::analysis_config::callret_analysis_results_call_data)},
  { 66, 77, sizeof(::analysis_config::callret_analysis_results_ret_data)},
  { 83, 89, sizeof(::analysis_config::callret_analysis_results)},
  { 90, 102, sizeof(::analysis_config::po_analysis_results_po_data)},
  { 109, 115, sizeof(::analysis_config::po_analysis_results)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_specific_parameters_t_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_standard_analysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_generic_analysis_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_generic_analysis_results_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_callret_analysis_results_call_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_callret_analysis_results_ret_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_callret_analysis_results_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_po_analysis_results_po_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::analysis_config::_po_analysis_results_default_instance_),
};

const char descriptor_table_protodef_analysis_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025analysis_config.proto\022\017analysis_config"
  "\032\014common.proto\"\236\002\n\025specific_parameters_t"
  "\022C\n\006typeid\030\001 \002(\01623.analysis_config.speci"
  "fic_parameters_t.analyse_type\022;\n\016generic"
  "_params\030\002 \001(\0132!.analysis_config.generic_"
  "analysisH\000\022=\n\017standard_params\030\003 \001(\0132\".an"
  "alysis_config.standard_analysisH\000\"3\n\014ana"
  "lyse_type\022\010\n\004NONE\020\000\022\013\n\007GENERIC\020\001\022\014\n\010STAN"
  "DARD\020\002B\017\n\ranalyse_param\"K\n\021standard_anal"
  "ysis\022\023\n\013target_addr\030\001 \001(\004\022\014\n\004uniq\030\002 \001(\010\022"
  "\023\n\013get_formula\030\003 \001(\010\"\247\002\n\020generic_analysi"
  "s\022:\n\004kind\030\001 \002(\0162,.analysis_config.generi"
  "c_analysis.query_type\022\023\n\013target_addr\030\002 \002"
  "(\004\022\013\n\003dba\030\003 \002(\t\022\024\n\014limit_values\030\004 \001(\r\022\023\n"
  "\013get_formula\030\005 \001(\010\022\021\n\tfrom_addr\030\006 \001(\004\022\017\n"
  "\007to_addr\030\007 \001(\004\022\034\n\024restrict_values_from\030\010"
  " \001(\004\022\032\n\022restrict_values_to\030\t \001(\004\",\n\nquer"
  "y_type\022\022\n\016SATISFIABILITY\020\000\022\n\n\006VALUES\020\001\"c"
  "\n\030generic_analysis_results\022\"\n\006result\030\001 \002"
  "(\0162\022.common.smt_result\022\016\n\006values\030\002 \003(\004\022\023"
  "\n\013smt_formula\030\003 \001(\t\"\267\005\n\030callret_analysis"
  "_results\022B\n\006values\030\001 \003(\01322.analysis_conf"
  "ig.callret_analysis_results.ret_data\032c\n\t"
  "call_data\022\014\n\004addr\030\001 \002(\004\022H\n\006status\030\002 \002(\0162"
  "8.analysis_config.callret_analysis_resul"
  "ts.callret_status\032\236\002\n\010ret_data\022\020\n\010ret_ad"
  "dr\030\001 \002(\004\022H\n\006status\030\002 \002(\01628.analysis_conf"
  "ig.callret_analysis_results.callret_stat"
  "us\022H\n\006labels\030\003 \003(\01628.analysis_config.cal"
  "lret_analysis_results.callret_labels\022\023\n\013"
  "returnsites\030\004 \003(\004\022\023\n\013solve_count\030\005 \002(\r\022B"
  "\n\005calls\030\006 \003(\01323.analysis_config.callret_"
  "analysis_results.call_data\"\254\001\n\016callret_l"
  "abels\022\014\n\010VIOLABLE\020\001\022\013\n\007ALIGNED\020\002\022\016\n\nDISA"
  "LIGNED\020\003\022\016\n\nCAN_RETURN\020\004\022\n\n\006SINGLE\020\005\022\014\n\010"
  "MULTIPLE\020\006\022\n\n\006STRONG\020\007\022\010\n\004WEAK\020\010\022\020\n\014SOLV"
  "ER_WRONG\020\t\022\013\n\007NO_CALL\020\n\022\020\n\014HAS_RETURNED\020"
  "\013\"\"\n\016callret_status\022\006\n\002OK\020\001\022\010\n\004VIOL\020\002\"\326\002"
  "\n\023po_analysis_results\022<\n\006values\030\001 \003(\0132,."
  "analysis_config.po_analysis_results.po_d"
  "ata\032\276\001\n\007po_data\022\020\n\010jmp_addr\030\001 \002(\004\022>\n\006sta"
  "tus\030\002 \002(\0162..analysis_config.po_analysis_"
  "results.po_status\022\016\n\006ksteps\030\003 \002(\r\022\030\n\020com"
  "putation_time\030\004 \002(\002\022\020\n\010nb_paths\030\005 \001(\r\022\024\n"
  "\014alive_branch\030\006 \001(\004\022\017\n\007formula\030\007 \001(\t\"@\n\t"
  "po_status\022\013\n\007UNKNOWN\020\001\022\016\n\nNOT_OPAQUE\020\002\022\n"
  "\n\006OPAQUE\020\003\022\n\n\006LIKELY\020\004"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_analysis_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_analysis_5fconfig_2eproto_sccs[9] = {
  &scc_info_callret_analysis_results_analysis_5fconfig_2eproto.base,
  &scc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto.base,
  &scc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto.base,
  &scc_info_generic_analysis_analysis_5fconfig_2eproto.base,
  &scc_info_generic_analysis_results_analysis_5fconfig_2eproto.base,
  &scc_info_po_analysis_results_analysis_5fconfig_2eproto.base,
  &scc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto.base,
  &scc_info_specific_parameters_t_analysis_5fconfig_2eproto.base,
  &scc_info_standard_analysis_analysis_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_analysis_5fconfig_2eproto_once;
static bool descriptor_table_analysis_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_analysis_5fconfig_2eproto = {
  &descriptor_table_analysis_5fconfig_2eproto_initialized, descriptor_table_protodef_analysis_5fconfig_2eproto, "analysis_config.proto", 1862,
  &descriptor_table_analysis_5fconfig_2eproto_once, descriptor_table_analysis_5fconfig_2eproto_sccs, descriptor_table_analysis_5fconfig_2eproto_deps, 9, 1,
  schemas, file_default_instances, TableStruct_analysis_5fconfig_2eproto::offsets,
  file_level_metadata_analysis_5fconfig_2eproto, 9, file_level_enum_descriptors_analysis_5fconfig_2eproto, file_level_service_descriptors_analysis_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_analysis_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_analysis_5fconfig_2eproto), true);
namespace analysis_config {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* specific_parameters_t_analyse_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_analysis_5fconfig_2eproto);
  return file_level_enum_descriptors_analysis_5fconfig_2eproto[0];
}
bool specific_parameters_t_analyse_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr specific_parameters_t_analyse_type specific_parameters_t::NONE;
constexpr specific_parameters_t_analyse_type specific_parameters_t::GENERIC;
constexpr specific_parameters_t_analyse_type specific_parameters_t::STANDARD;
constexpr specific_parameters_t_analyse_type specific_parameters_t::analyse_type_MIN;
constexpr specific_parameters_t_analyse_type specific_parameters_t::analyse_type_MAX;
constexpr int specific_parameters_t::analyse_type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* generic_analysis_query_type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_analysis_5fconfig_2eproto);
  return file_level_enum_descriptors_analysis_5fconfig_2eproto[1];
}
bool generic_analysis_query_type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr generic_analysis_query_type generic_analysis::SATISFIABILITY;
constexpr generic_analysis_query_type generic_analysis::VALUES;
constexpr generic_analysis_query_type generic_analysis::query_type_MIN;
constexpr generic_analysis_query_type generic_analysis::query_type_MAX;
constexpr int generic_analysis::query_type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* callret_analysis_results_callret_labels_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_analysis_5fconfig_2eproto);
  return file_level_enum_descriptors_analysis_5fconfig_2eproto[2];
}
bool callret_analysis_results_callret_labels_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr callret_analysis_results_callret_labels callret_analysis_results::VIOLABLE;
constexpr callret_analysis_results_callret_labels callret_analysis_results::ALIGNED;
constexpr callret_analysis_results_callret_labels callret_analysis_results::DISALIGNED;
constexpr callret_analysis_results_callret_labels callret_analysis_results::CAN_RETURN;
constexpr callret_analysis_results_callret_labels callret_analysis_results::SINGLE;
constexpr callret_analysis_results_callret_labels callret_analysis_results::MULTIPLE;
constexpr callret_analysis_results_callret_labels callret_analysis_results::STRONG;
constexpr callret_analysis_results_callret_labels callret_analysis_results::WEAK;
constexpr callret_analysis_results_callret_labels callret_analysis_results::SOLVER_WRONG;
constexpr callret_analysis_results_callret_labels callret_analysis_results::NO_CALL;
constexpr callret_analysis_results_callret_labels callret_analysis_results::HAS_RETURNED;
constexpr callret_analysis_results_callret_labels callret_analysis_results::callret_labels_MIN;
constexpr callret_analysis_results_callret_labels callret_analysis_results::callret_labels_MAX;
constexpr int callret_analysis_results::callret_labels_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* callret_analysis_results_callret_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_analysis_5fconfig_2eproto);
  return file_level_enum_descriptors_analysis_5fconfig_2eproto[3];
}
bool callret_analysis_results_callret_status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr callret_analysis_results_callret_status callret_analysis_results::OK;
constexpr callret_analysis_results_callret_status callret_analysis_results::VIOL;
constexpr callret_analysis_results_callret_status callret_analysis_results::callret_status_MIN;
constexpr callret_analysis_results_callret_status callret_analysis_results::callret_status_MAX;
constexpr int callret_analysis_results::callret_status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* po_analysis_results_po_status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_analysis_5fconfig_2eproto);
  return file_level_enum_descriptors_analysis_5fconfig_2eproto[4];
}
bool po_analysis_results_po_status_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr po_analysis_results_po_status po_analysis_results::UNKNOWN;
constexpr po_analysis_results_po_status po_analysis_results::NOT_OPAQUE;
constexpr po_analysis_results_po_status po_analysis_results::OPAQUE;
constexpr po_analysis_results_po_status po_analysis_results::LIKELY;
constexpr po_analysis_results_po_status po_analysis_results::po_status_MIN;
constexpr po_analysis_results_po_status po_analysis_results::po_status_MAX;
constexpr int po_analysis_results::po_status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void specific_parameters_t::InitAsDefaultInstance() {
  ::analysis_config::_specific_parameters_t_default_instance_.generic_params_ = const_cast< ::analysis_config::generic_analysis*>(
      ::analysis_config::generic_analysis::internal_default_instance());
  ::analysis_config::_specific_parameters_t_default_instance_.standard_params_ = const_cast< ::analysis_config::standard_analysis*>(
      ::analysis_config::standard_analysis::internal_default_instance());
}
class specific_parameters_t::_Internal {
 public:
  using HasBits = decltype(std::declval<specific_parameters_t>()._has_bits_);
  static void set_has_typeid_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::analysis_config::generic_analysis& generic_params(const specific_parameters_t* msg);
  static const ::analysis_config::standard_analysis& standard_params(const specific_parameters_t* msg);
};

const ::analysis_config::generic_analysis&
specific_parameters_t::_Internal::generic_params(const specific_parameters_t* msg) {
  return *msg->analyse_param_.generic_params_;
}
const ::analysis_config::standard_analysis&
specific_parameters_t::_Internal::standard_params(const specific_parameters_t* msg) {
  return *msg->analyse_param_.standard_params_;
}
void specific_parameters_t::set_allocated_generic_params(::analysis_config::generic_analysis* generic_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_analyse_param();
  if (generic_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      generic_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generic_params, submessage_arena);
    }
    set_has_generic_params();
    analyse_param_.generic_params_ = generic_params;
  }
  // @@protoc_insertion_point(field_set_allocated:analysis_config.specific_parameters_t.generic_params)
}
void specific_parameters_t::set_allocated_standard_params(::analysis_config::standard_analysis* standard_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_analyse_param();
  if (standard_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      standard_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, standard_params, submessage_arena);
    }
    set_has_standard_params();
    analyse_param_.standard_params_ = standard_params;
  }
  // @@protoc_insertion_point(field_set_allocated:analysis_config.specific_parameters_t.standard_params)
}
specific_parameters_t::specific_parameters_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.specific_parameters_t)
}
specific_parameters_t::specific_parameters_t(const specific_parameters_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  typeid__ = from.typeid__;
  clear_has_analyse_param();
  switch (from.analyse_param_case()) {
    case kGenericParams: {
      mutable_generic_params()->::analysis_config::generic_analysis::MergeFrom(from.generic_params());
      break;
    }
    case kStandardParams: {
      mutable_standard_params()->::analysis_config::standard_analysis::MergeFrom(from.standard_params());
      break;
    }
    case ANALYSE_PARAM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:analysis_config.specific_parameters_t)
}

void specific_parameters_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_specific_parameters_t_analysis_5fconfig_2eproto.base);
  typeid__ = 0;
  clear_has_analyse_param();
}

specific_parameters_t::~specific_parameters_t() {
  // @@protoc_insertion_point(destructor:analysis_config.specific_parameters_t)
  SharedDtor();
}

void specific_parameters_t::SharedDtor() {
  if (has_analyse_param()) {
    clear_analyse_param();
  }
}

void specific_parameters_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const specific_parameters_t& specific_parameters_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_specific_parameters_t_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void specific_parameters_t::clear_analyse_param() {
// @@protoc_insertion_point(one_of_clear_start:analysis_config.specific_parameters_t)
  switch (analyse_param_case()) {
    case kGenericParams: {
      delete analyse_param_.generic_params_;
      break;
    }
    case kStandardParams: {
      delete analyse_param_.standard_params_;
      break;
    }
    case ANALYSE_PARAM_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ANALYSE_PARAM_NOT_SET;
}


void specific_parameters_t::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.specific_parameters_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  typeid__ = 0;
  clear_analyse_param();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* specific_parameters_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::analysis_config::specific_parameters_t_analyse_type_IsValid(val))) {
            set_typeid_(static_cast<::analysis_config::specific_parameters_t_analyse_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .analysis_config.generic_analysis generic_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_generic_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .analysis_config.standard_analysis standard_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_standard_params(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool specific_parameters_t::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.specific_parameters_t)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::analysis_config::specific_parameters_t_analyse_type_IsValid(value)) {
            set_typeid_(static_cast< ::analysis_config::specific_parameters_t_analyse_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .analysis_config.generic_analysis generic_params = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_generic_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .analysis_config.standard_analysis standard_params = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_standard_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.specific_parameters_t)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.specific_parameters_t)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void specific_parameters_t::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.specific_parameters_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->typeid_(), output);
  }

  switch (analyse_param_case()) {
    case kGenericParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, _Internal::generic_params(this), output);
      break;
    case kStandardParams:
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, _Internal::standard_params(this), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.specific_parameters_t)
}

::PROTOBUF_NAMESPACE_ID::uint8* specific_parameters_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.specific_parameters_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->typeid_(), target);
  }

  switch (analyse_param_case()) {
    case kGenericParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, _Internal::generic_params(this), target);
      break;
    case kStandardParams:
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, _Internal::standard_params(this), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.specific_parameters_t)
  return target;
}

size_t specific_parameters_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.specific_parameters_t)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .analysis_config.specific_parameters_t.analyse_type typeid = 1;
  if (has_typeid_()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->typeid_());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (analyse_param_case()) {
    // optional .analysis_config.generic_analysis generic_params = 2;
    case kGenericParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *analyse_param_.generic_params_);
      break;
    }
    // optional .analysis_config.standard_analysis standard_params = 3;
    case kStandardParams: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *analyse_param_.standard_params_);
      break;
    }
    case ANALYSE_PARAM_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void specific_parameters_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.specific_parameters_t)
  GOOGLE_DCHECK_NE(&from, this);
  const specific_parameters_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<specific_parameters_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.specific_parameters_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.specific_parameters_t)
    MergeFrom(*source);
  }
}

void specific_parameters_t::MergeFrom(const specific_parameters_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.specific_parameters_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_typeid_()) {
    set_typeid_(from.typeid_());
  }
  switch (from.analyse_param_case()) {
    case kGenericParams: {
      mutable_generic_params()->::analysis_config::generic_analysis::MergeFrom(from.generic_params());
      break;
    }
    case kStandardParams: {
      mutable_standard_params()->::analysis_config::standard_analysis::MergeFrom(from.standard_params());
      break;
    }
    case ANALYSE_PARAM_NOT_SET: {
      break;
    }
  }
}

void specific_parameters_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.specific_parameters_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void specific_parameters_t::CopyFrom(const specific_parameters_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.specific_parameters_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool specific_parameters_t::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  switch (analyse_param_case()) {
    case kGenericParams: {
      if (has_generic_params()) {
        if (!this->generic_params().IsInitialized()) return false;
      }
      break;
    }
    case kStandardParams: {
      break;
    }
    case ANALYSE_PARAM_NOT_SET: {
      break;
    }
  }
  return true;
}

void specific_parameters_t::InternalSwap(specific_parameters_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(typeid__, other->typeid__);
  swap(analyse_param_, other->analyse_param_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata specific_parameters_t::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void standard_analysis::InitAsDefaultInstance() {
}
class standard_analysis::_Internal {
 public:
  using HasBits = decltype(std::declval<standard_analysis>()._has_bits_);
  static void set_has_target_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uniq(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_get_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

standard_analysis::standard_analysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.standard_analysis)
}
standard_analysis::standard_analysis(const standard_analysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&target_addr_, &from.target_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_formula_) -
    reinterpret_cast<char*>(&target_addr_)) + sizeof(get_formula_));
  // @@protoc_insertion_point(copy_constructor:analysis_config.standard_analysis)
}

void standard_analysis::SharedCtor() {
  ::memset(&target_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_formula_) -
      reinterpret_cast<char*>(&target_addr_)) + sizeof(get_formula_));
}

standard_analysis::~standard_analysis() {
  // @@protoc_insertion_point(destructor:analysis_config.standard_analysis)
  SharedDtor();
}

void standard_analysis::SharedDtor() {
}

void standard_analysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const standard_analysis& standard_analysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_standard_analysis_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void standard_analysis::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.standard_analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&target_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&get_formula_) -
        reinterpret_cast<char*>(&target_addr_)) + sizeof(get_formula_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* standard_analysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional uint64 target_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_target_addr(&has_bits);
          target_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool uniq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_uniq(&has_bits);
          uniq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool get_formula = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_get_formula(&has_bits);
          get_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool standard_analysis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.standard_analysis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 target_addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_target_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool uniq = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_uniq(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &uniq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_formula = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_get_formula(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_formula_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.standard_analysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.standard_analysis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void standard_analysis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.standard_analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 target_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->target_addr(), output);
  }

  // optional bool uniq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(2, this->uniq(), output);
  }

  // optional bool get_formula = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(3, this->get_formula(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.standard_analysis)
}

::PROTOBUF_NAMESPACE_ID::uint8* standard_analysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.standard_analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 target_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->target_addr(), target);
  }

  // optional bool uniq = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->uniq(), target);
  }

  // optional bool get_formula = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->get_formula(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.standard_analysis)
  return target;
}

size_t standard_analysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.standard_analysis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 target_addr = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->target_addr());
    }

    // optional bool uniq = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool get_formula = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void standard_analysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.standard_analysis)
  GOOGLE_DCHECK_NE(&from, this);
  const standard_analysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<standard_analysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.standard_analysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.standard_analysis)
    MergeFrom(*source);
  }
}

void standard_analysis::MergeFrom(const standard_analysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.standard_analysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      target_addr_ = from.target_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      uniq_ = from.uniq_;
    }
    if (cached_has_bits & 0x00000004u) {
      get_formula_ = from.get_formula_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void standard_analysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.standard_analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void standard_analysis::CopyFrom(const standard_analysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.standard_analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool standard_analysis::IsInitialized() const {
  return true;
}

void standard_analysis::InternalSwap(standard_analysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(target_addr_, other->target_addr_);
  swap(uniq_, other->uniq_);
  swap(get_formula_, other->get_formula_);
}

::PROTOBUF_NAMESPACE_ID::Metadata standard_analysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void generic_analysis::InitAsDefaultInstance() {
}
class generic_analysis::_Internal {
 public:
  using HasBits = decltype(std::declval<generic_analysis>()._has_bits_);
  static void set_has_kind(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_target_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dba(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_limit_values(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_get_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_from_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_to_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_restrict_values_from(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_restrict_values_to(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

generic_analysis::generic_analysis()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.generic_analysis)
}
generic_analysis::generic_analysis(const generic_analysis& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dba_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_dba()) {
    dba_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dba_);
  }
  ::memcpy(&target_addr_, &from.target_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&get_formula_) -
    reinterpret_cast<char*>(&target_addr_)) + sizeof(get_formula_));
  // @@protoc_insertion_point(copy_constructor:analysis_config.generic_analysis)
}

void generic_analysis::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_generic_analysis_analysis_5fconfig_2eproto.base);
  dba_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&target_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&get_formula_) -
      reinterpret_cast<char*>(&target_addr_)) + sizeof(get_formula_));
}

generic_analysis::~generic_analysis() {
  // @@protoc_insertion_point(destructor:analysis_config.generic_analysis)
  SharedDtor();
}

void generic_analysis::SharedDtor() {
  dba_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void generic_analysis::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const generic_analysis& generic_analysis::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_generic_analysis_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void generic_analysis::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.generic_analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    dba_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&target_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&restrict_values_to_) -
        reinterpret_cast<char*>(&target_addr_)) + sizeof(restrict_values_to_));
  }
  get_formula_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* generic_analysis::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .analysis_config.generic_analysis.query_type kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::analysis_config::generic_analysis_query_type_IsValid(val))) {
            set_kind(static_cast<::analysis_config::generic_analysis_query_type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint64 target_addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_target_addr(&has_bits);
          target_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_dba(), ptr, ctx, "analysis_config.generic_analysis.dba");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 limit_values = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_limit_values(&has_bits);
          limit_values_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool get_formula = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_get_formula(&has_bits);
          get_formula_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 from_addr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_from_addr(&has_bits);
          from_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 to_addr = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_to_addr(&has_bits);
          to_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 restrict_values_from = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_restrict_values_from(&has_bits);
          restrict_values_from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 restrict_values_to = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_restrict_values_to(&has_bits);
          restrict_values_to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool generic_analysis::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.generic_analysis)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .analysis_config.generic_analysis.query_type kind = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::analysis_config::generic_analysis_query_type_IsValid(value)) {
            set_kind(static_cast< ::analysis_config::generic_analysis_query_type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 target_addr = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          _Internal::set_has_target_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &target_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dba = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_dba()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dba().data(), static_cast<int>(this->dba().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "analysis_config.generic_analysis.dba");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 limit_values = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          _Internal::set_has_limit_values(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_values_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool get_formula = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_get_formula(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_formula_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 from_addr = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_from_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &from_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 to_addr = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {
          _Internal::set_has_to_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 restrict_values_from = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          _Internal::set_has_restrict_values_from(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &restrict_values_from_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 restrict_values_to = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {
          _Internal::set_has_restrict_values_to(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &restrict_values_to_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.generic_analysis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.generic_analysis)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void generic_analysis::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.generic_analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .analysis_config.generic_analysis.query_type kind = 1;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->kind(), output);
  }

  // required uint64 target_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->target_addr(), output);
  }

  // required string dba = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dba().data(), static_cast<int>(this->dba().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "analysis_config.generic_analysis.dba");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dba(), output);
  }

  // optional uint32 limit_values = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(4, this->limit_values(), output);
  }

  // optional bool get_formula = 5;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBool(5, this->get_formula(), output);
  }

  // optional uint64 from_addr = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->from_addr(), output);
  }

  // optional uint64 to_addr = 7;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(7, this->to_addr(), output);
  }

  // optional uint64 restrict_values_from = 8;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(8, this->restrict_values_from(), output);
  }

  // optional uint64 restrict_values_to = 9;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(9, this->restrict_values_to(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.generic_analysis)
}

::PROTOBUF_NAMESPACE_ID::uint8* generic_analysis::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.generic_analysis)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .analysis_config.generic_analysis.query_type kind = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->kind(), target);
  }

  // required uint64 target_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->target_addr(), target);
  }

  // required string dba = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dba().data(), static_cast<int>(this->dba().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "analysis_config.generic_analysis.dba");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->dba(), target);
  }

  // optional uint32 limit_values = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit_values(), target);
  }

  // optional bool get_formula = 5;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->get_formula(), target);
  }

  // optional uint64 from_addr = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->from_addr(), target);
  }

  // optional uint64 to_addr = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->to_addr(), target);
  }

  // optional uint64 restrict_values_from = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->restrict_values_from(), target);
  }

  // optional uint64 restrict_values_to = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->restrict_values_to(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.generic_analysis)
  return target;
}

size_t generic_analysis::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:analysis_config.generic_analysis)
  size_t total_size = 0;

  if (has_dba()) {
    // required string dba = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dba());
  }

  if (has_target_addr()) {
    // required uint64 target_addr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->target_addr());
  }

  if (has_kind()) {
    // required .analysis_config.generic_analysis.query_type kind = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->kind());
  }

  return total_size;
}
size_t generic_analysis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.generic_analysis)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string dba = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->dba());

    // required uint64 target_addr = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->target_addr());

    // required .analysis_config.generic_analysis.query_type kind = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->kind());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional uint32 limit_values = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->limit_values());
    }

    // optional uint64 from_addr = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->from_addr());
    }

    // optional uint64 to_addr = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->to_addr());
    }

    // optional uint64 restrict_values_from = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->restrict_values_from());
    }

    // optional uint64 restrict_values_to = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->restrict_values_to());
    }

  }
  // optional bool get_formula = 5;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 + 1;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void generic_analysis::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.generic_analysis)
  GOOGLE_DCHECK_NE(&from, this);
  const generic_analysis* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<generic_analysis>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.generic_analysis)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.generic_analysis)
    MergeFrom(*source);
  }
}

void generic_analysis::MergeFrom(const generic_analysis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.generic_analysis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      dba_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dba_);
    }
    if (cached_has_bits & 0x00000002u) {
      target_addr_ = from.target_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      kind_ = from.kind_;
    }
    if (cached_has_bits & 0x00000008u) {
      limit_values_ = from.limit_values_;
    }
    if (cached_has_bits & 0x00000010u) {
      from_addr_ = from.from_addr_;
    }
    if (cached_has_bits & 0x00000020u) {
      to_addr_ = from.to_addr_;
    }
    if (cached_has_bits & 0x00000040u) {
      restrict_values_from_ = from.restrict_values_from_;
    }
    if (cached_has_bits & 0x00000080u) {
      restrict_values_to_ = from.restrict_values_to_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_get_formula(from.get_formula());
  }
}

void generic_analysis::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.generic_analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generic_analysis::CopyFrom(const generic_analysis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.generic_analysis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generic_analysis::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void generic_analysis::InternalSwap(generic_analysis* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dba_.Swap(&other->dba_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_addr_, other->target_addr_);
  swap(kind_, other->kind_);
  swap(limit_values_, other->limit_values_);
  swap(from_addr_, other->from_addr_);
  swap(to_addr_, other->to_addr_);
  swap(restrict_values_from_, other->restrict_values_from_);
  swap(restrict_values_to_, other->restrict_values_to_);
  swap(get_formula_, other->get_formula_);
}

::PROTOBUF_NAMESPACE_ID::Metadata generic_analysis::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void generic_analysis_results::InitAsDefaultInstance() {
}
class generic_analysis_results::_Internal {
 public:
  using HasBits = decltype(std::declval<generic_analysis_results>()._has_bits_);
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_smt_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

generic_analysis_results::generic_analysis_results()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.generic_analysis_results)
}
generic_analysis_results::generic_analysis_results(const generic_analysis_results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  smt_formula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_smt_formula()) {
    smt_formula_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.smt_formula_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:analysis_config.generic_analysis_results)
}

void generic_analysis_results::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_generic_analysis_results_analysis_5fconfig_2eproto.base);
  smt_formula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

generic_analysis_results::~generic_analysis_results() {
  // @@protoc_insertion_point(destructor:analysis_config.generic_analysis_results)
  SharedDtor();
}

void generic_analysis_results::SharedDtor() {
  smt_formula_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void generic_analysis_results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const generic_analysis_results& generic_analysis_results::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_generic_analysis_results_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void generic_analysis_results::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.generic_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    smt_formula_.ClearNonDefaultToEmptyNoArena();
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* generic_analysis_results::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .common.smt_result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::smt_result_IsValid(val))) {
            set_result(static_cast<::common::smt_result>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated uint64 values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 16);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string smt_formula = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_smt_formula(), ptr, ctx, "analysis_config.generic_analysis_results.smt_formula");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool generic_analysis_results::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.generic_analysis_results)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .common.smt_result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::smt_result_IsValid(value)) {
            set_result(static_cast< ::common::smt_result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 values = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_values())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_values())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string smt_formula = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_smt_formula()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->smt_formula().data(), static_cast<int>(this->smt_formula().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "analysis_config.generic_analysis_results.smt_formula");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.generic_analysis_results)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.generic_analysis_results)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void generic_analysis_results::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.generic_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.smt_result result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated uint64 values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      2, this->values(i), output);
  }

  // optional string smt_formula = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smt_formula().data(), static_cast<int>(this->smt_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "analysis_config.generic_analysis_results.smt_formula");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->smt_formula(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.generic_analysis_results)
}

::PROTOBUF_NAMESPACE_ID::uint8* generic_analysis_results::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.generic_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .common.smt_result result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated uint64 values = 2;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->values_, target);

  // optional string smt_formula = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->smt_formula().data(), static_cast<int>(this->smt_formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "analysis_config.generic_analysis_results.smt_formula");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        3, this->smt_formula(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.generic_analysis_results)
  return target;
}

size_t generic_analysis_results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.generic_analysis_results)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .common.smt_result result = 1;
  if (has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 values = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->values_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->values_size());
    total_size += data_size;
  }

  // optional string smt_formula = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->smt_formula());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void generic_analysis_results::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.generic_analysis_results)
  GOOGLE_DCHECK_NE(&from, this);
  const generic_analysis_results* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<generic_analysis_results>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.generic_analysis_results)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.generic_analysis_results)
    MergeFrom(*source);
  }
}

void generic_analysis_results::MergeFrom(const generic_analysis_results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.generic_analysis_results)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      smt_formula_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.smt_formula_);
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void generic_analysis_results::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.generic_analysis_results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void generic_analysis_results::CopyFrom(const generic_analysis_results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.generic_analysis_results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool generic_analysis_results::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void generic_analysis_results::InternalSwap(generic_analysis_results* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  values_.InternalSwap(&other->values_);
  smt_formula_.Swap(&other->smt_formula_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata generic_analysis_results::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void callret_analysis_results_call_data::InitAsDefaultInstance() {
}
class callret_analysis_results_call_data::_Internal {
 public:
  using HasBits = decltype(std::declval<callret_analysis_results_call_data>()._has_bits_);
  static void set_has_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

callret_analysis_results_call_data::callret_analysis_results_call_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.callret_analysis_results.call_data)
}
callret_analysis_results_call_data::callret_analysis_results_call_data(const callret_analysis_results_call_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&addr_, &from.addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&addr_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:analysis_config.callret_analysis_results.call_data)
}

void callret_analysis_results_call_data::SharedCtor() {
  addr_ = PROTOBUF_ULONGLONG(0);
  status_ = 1;
}

callret_analysis_results_call_data::~callret_analysis_results_call_data() {
  // @@protoc_insertion_point(destructor:analysis_config.callret_analysis_results.call_data)
  SharedDtor();
}

void callret_analysis_results_call_data::SharedDtor() {
}

void callret_analysis_results_call_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const callret_analysis_results_call_data& callret_analysis_results_call_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_callret_analysis_results_call_data_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void callret_analysis_results_call_data::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.callret_analysis_results.call_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    addr_ = PROTOBUF_ULONGLONG(0);
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* callret_analysis_results_call_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_addr(&has_bits);
          addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .analysis_config.callret_analysis_results.callret_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::analysis_config::callret_analysis_results_callret_status_IsValid(val))) {
            set_status(static_cast<::analysis_config::callret_analysis_results_callret_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool callret_analysis_results_call_data::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.callret_analysis_results.call_data)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .analysis_config.callret_analysis_results.callret_status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::analysis_config::callret_analysis_results_callret_status_IsValid(value)) {
            set_status(static_cast< ::analysis_config::callret_analysis_results_callret_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.callret_analysis_results.call_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.callret_analysis_results.call_data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void callret_analysis_results_call_data::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.callret_analysis_results.call_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->addr(), output);
  }

  // required .analysis_config.callret_analysis_results.callret_status status = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.callret_analysis_results.call_data)
}

::PROTOBUF_NAMESPACE_ID::uint8* callret_analysis_results_call_data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.callret_analysis_results.call_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->addr(), target);
  }

  // required .analysis_config.callret_analysis_results.callret_status status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.callret_analysis_results.call_data)
  return target;
}

size_t callret_analysis_results_call_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:analysis_config.callret_analysis_results.call_data)
  size_t total_size = 0;

  if (has_addr()) {
    // required uint64 addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());
  }

  if (has_status()) {
    // required .analysis_config.callret_analysis_results.callret_status status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t callret_analysis_results_call_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.callret_analysis_results.call_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->addr());

    // required .analysis_config.callret_analysis_results.callret_status status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void callret_analysis_results_call_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.callret_analysis_results.call_data)
  GOOGLE_DCHECK_NE(&from, this);
  const callret_analysis_results_call_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<callret_analysis_results_call_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.callret_analysis_results.call_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.callret_analysis_results.call_data)
    MergeFrom(*source);
  }
}

void callret_analysis_results_call_data::MergeFrom(const callret_analysis_results_call_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.callret_analysis_results.call_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      addr_ = from.addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void callret_analysis_results_call_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.callret_analysis_results.call_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void callret_analysis_results_call_data::CopyFrom(const callret_analysis_results_call_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.callret_analysis_results.call_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool callret_analysis_results_call_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void callret_analysis_results_call_data::InternalSwap(callret_analysis_results_call_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(addr_, other->addr_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata callret_analysis_results_call_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void callret_analysis_results_ret_data::InitAsDefaultInstance() {
}
class callret_analysis_results_ret_data::_Internal {
 public:
  using HasBits = decltype(std::declval<callret_analysis_results_ret_data>()._has_bits_);
  static void set_has_ret_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_solve_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

callret_analysis_results_ret_data::callret_analysis_results_ret_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.callret_analysis_results.ret_data)
}
callret_analysis_results_ret_data::callret_analysis_results_ret_data(const callret_analysis_results_ret_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      labels_(from.labels_),
      returnsites_(from.returnsites_),
      calls_(from.calls_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ret_addr_, &from.ret_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&ret_addr_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:analysis_config.callret_analysis_results.ret_data)
}

void callret_analysis_results_ret_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto.base);
  ::memset(&ret_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&solve_count_) -
      reinterpret_cast<char*>(&ret_addr_)) + sizeof(solve_count_));
  status_ = 1;
}

callret_analysis_results_ret_data::~callret_analysis_results_ret_data() {
  // @@protoc_insertion_point(destructor:analysis_config.callret_analysis_results.ret_data)
  SharedDtor();
}

void callret_analysis_results_ret_data::SharedDtor() {
}

void callret_analysis_results_ret_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const callret_analysis_results_ret_data& callret_analysis_results_ret_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_callret_analysis_results_ret_data_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void callret_analysis_results_ret_data::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.callret_analysis_results.ret_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  returnsites_.Clear();
  calls_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&ret_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&solve_count_) -
        reinterpret_cast<char*>(&ret_addr_)) + sizeof(solve_count_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* callret_analysis_results_ret_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 ret_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ret_addr(&has_bits);
          ret_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .analysis_config.callret_analysis_results.callret_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::analysis_config::callret_analysis_results_callret_status_IsValid(val))) {
            set_status(static_cast<::analysis_config::callret_analysis_results_callret_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::analysis_config::callret_analysis_results_callret_labels_IsValid(val))) {
              add_labels(static_cast<::analysis_config::callret_analysis_results_callret_labels>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 24);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(mutable_labels(), ptr, ctx, ::analysis_config::callret_analysis_results_callret_labels_IsValid, &_internal_metadata_, 3);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 returnsites = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            add_returnsites(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 32);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_returnsites(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 solve_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_solve_count(&has_bits);
          solve_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .analysis_config.callret_analysis_results.call_data calls = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_calls(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 50);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool callret_analysis_results_ret_data::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.callret_analysis_results.ret_data)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 ret_addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_ret_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ret_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .analysis_config.callret_analysis_results.callret_status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::analysis_config::callret_analysis_results_callret_status_IsValid(value)) {
            set_status(static_cast< ::analysis_config::callret_analysis_results_callret_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::analysis_config::callret_analysis_results_callret_labels_IsValid(value)) {
            add_labels(static_cast< ::analysis_config::callret_analysis_results_callret_labels >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::analysis_config::callret_analysis_results_callret_labels_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_labels())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 returnsites = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_returnsites())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_returnsites())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 solve_count = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_solve_count(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &solve_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .analysis_config.callret_analysis_results.call_data calls = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_calls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.callret_analysis_results.ret_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.callret_analysis_results.ret_data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void callret_analysis_results_ret_data::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.callret_analysis_results.ret_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ret_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->ret_addr(), output);
  }

  // required .analysis_config.callret_analysis_results.callret_status status = 2;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
  for (int i = 0, n = this->labels_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->labels(i), output);
  }

  // repeated uint64 returnsites = 4;
  for (int i = 0, n = this->returnsites_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(
      4, this->returnsites(i), output);
  }

  // required uint32 solve_count = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->solve_count(), output);
  }

  // repeated .analysis_config.callret_analysis_results.call_data calls = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calls_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->calls(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.callret_analysis_results.ret_data)
}

::PROTOBUF_NAMESPACE_ID::uint8* callret_analysis_results_ret_data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.callret_analysis_results.ret_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 ret_addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->ret_addr(), target);
  }

  // required .analysis_config.callret_analysis_results.callret_status status = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
    3, this->labels_, target);

  // repeated uint64 returnsites = 4;
  target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->returnsites_, target);

  // required uint32 solve_count = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->solve_count(), target);
  }

  // repeated .analysis_config.callret_analysis_results.call_data calls = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->calls_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->calls(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.callret_analysis_results.ret_data)
  return target;
}

size_t callret_analysis_results_ret_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:analysis_config.callret_analysis_results.ret_data)
  size_t total_size = 0;

  if (has_ret_addr()) {
    // required uint64 ret_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret_addr());
  }

  if (has_solve_count()) {
    // required uint32 solve_count = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->solve_count());
  }

  if (has_status()) {
    // required .analysis_config.callret_analysis_results.callret_status status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t callret_analysis_results_ret_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.callret_analysis_results.ret_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 ret_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->ret_addr());

    // required uint32 solve_count = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->solve_count());

    // required .analysis_config.callret_analysis_results.callret_status status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .analysis_config.callret_analysis_results.callret_labels labels = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->labels_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->labels(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated uint64 returnsites = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->returnsites_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->returnsites_size());
    total_size += data_size;
  }

  // repeated .analysis_config.callret_analysis_results.call_data calls = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->calls_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->calls(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void callret_analysis_results_ret_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.callret_analysis_results.ret_data)
  GOOGLE_DCHECK_NE(&from, this);
  const callret_analysis_results_ret_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<callret_analysis_results_ret_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.callret_analysis_results.ret_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.callret_analysis_results.ret_data)
    MergeFrom(*source);
  }
}

void callret_analysis_results_ret_data::MergeFrom(const callret_analysis_results_ret_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.callret_analysis_results.ret_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  returnsites_.MergeFrom(from.returnsites_);
  calls_.MergeFrom(from.calls_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ret_addr_ = from.ret_addr_;
    }
    if (cached_has_bits & 0x00000002u) {
      solve_count_ = from.solve_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void callret_analysis_results_ret_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.callret_analysis_results.ret_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void callret_analysis_results_ret_data::CopyFrom(const callret_analysis_results_ret_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.callret_analysis_results.ret_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool callret_analysis_results_ret_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->calls())) return false;
  return true;
}

void callret_analysis_results_ret_data::InternalSwap(callret_analysis_results_ret_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  labels_.InternalSwap(&other->labels_);
  returnsites_.InternalSwap(&other->returnsites_);
  CastToBase(&calls_)->InternalSwap(CastToBase(&other->calls_));
  swap(ret_addr_, other->ret_addr_);
  swap(solve_count_, other->solve_count_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata callret_analysis_results_ret_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void callret_analysis_results::InitAsDefaultInstance() {
}
class callret_analysis_results::_Internal {
 public:
  using HasBits = decltype(std::declval<callret_analysis_results>()._has_bits_);
};

callret_analysis_results::callret_analysis_results()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.callret_analysis_results)
}
callret_analysis_results::callret_analysis_results(const callret_analysis_results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:analysis_config.callret_analysis_results)
}

void callret_analysis_results::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_callret_analysis_results_analysis_5fconfig_2eproto.base);
}

callret_analysis_results::~callret_analysis_results() {
  // @@protoc_insertion_point(destructor:analysis_config.callret_analysis_results)
  SharedDtor();
}

void callret_analysis_results::SharedDtor() {
}

void callret_analysis_results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const callret_analysis_results& callret_analysis_results::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_callret_analysis_results_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void callret_analysis_results::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.callret_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* callret_analysis_results::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .analysis_config.callret_analysis_results.ret_data values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool callret_analysis_results::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.callret_analysis_results)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .analysis_config.callret_analysis_results.ret_data values = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.callret_analysis_results)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.callret_analysis_results)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void callret_analysis_results::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.callret_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .analysis_config.callret_analysis_results.ret_data values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.callret_analysis_results)
}

::PROTOBUF_NAMESPACE_ID::uint8* callret_analysis_results::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.callret_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .analysis_config.callret_analysis_results.ret_data values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.callret_analysis_results)
  return target;
}

size_t callret_analysis_results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.callret_analysis_results)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .analysis_config.callret_analysis_results.ret_data values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void callret_analysis_results::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.callret_analysis_results)
  GOOGLE_DCHECK_NE(&from, this);
  const callret_analysis_results* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<callret_analysis_results>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.callret_analysis_results)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.callret_analysis_results)
    MergeFrom(*source);
  }
}

void callret_analysis_results::MergeFrom(const callret_analysis_results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.callret_analysis_results)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void callret_analysis_results::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.callret_analysis_results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void callret_analysis_results::CopyFrom(const callret_analysis_results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.callret_analysis_results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool callret_analysis_results::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void callret_analysis_results::InternalSwap(callret_analysis_results* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata callret_analysis_results::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void po_analysis_results_po_data::InitAsDefaultInstance() {
}
class po_analysis_results_po_data::_Internal {
 public:
  using HasBits = decltype(std::declval<po_analysis_results_po_data>()._has_bits_);
  static void set_has_jmp_addr(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ksteps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_computation_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nb_paths(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_alive_branch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_formula(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

po_analysis_results_po_data::po_analysis_results_po_data()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.po_analysis_results.po_data)
}
po_analysis_results_po_data::po_analysis_results_po_data(const po_analysis_results_po_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  formula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_formula()) {
    formula_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formula_);
  }
  ::memcpy(&jmp_addr_, &from.jmp_addr_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&jmp_addr_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:analysis_config.po_analysis_results.po_data)
}

void po_analysis_results_po_data::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto.base);
  formula_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&jmp_addr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nb_paths_) -
      reinterpret_cast<char*>(&jmp_addr_)) + sizeof(nb_paths_));
  status_ = 1;
}

po_analysis_results_po_data::~po_analysis_results_po_data() {
  // @@protoc_insertion_point(destructor:analysis_config.po_analysis_results.po_data)
  SharedDtor();
}

void po_analysis_results_po_data::SharedDtor() {
  formula_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void po_analysis_results_po_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const po_analysis_results_po_data& po_analysis_results_po_data::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_po_analysis_results_po_data_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void po_analysis_results_po_data::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.po_analysis_results.po_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    formula_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&jmp_addr_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nb_paths_) -
        reinterpret_cast<char*>(&jmp_addr_)) + sizeof(nb_paths_));
    status_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* po_analysis_results_po_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 jmp_addr = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_jmp_addr(&has_bits);
          jmp_addr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .analysis_config.po_analysis_results.po_status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::analysis_config::po_analysis_results_po_status_IsValid(val))) {
            set_status(static_cast<::analysis_config::po_analysis_results_po_status>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 ksteps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_ksteps(&has_bits);
          ksteps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float computation_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_computation_time(&has_bits);
          computation_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 nb_paths = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nb_paths(&has_bits);
          nb_paths_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint64 alive_branch = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_alive_branch(&has_bits);
          alive_branch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string formula = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_formula(), ptr, ctx, "analysis_config.po_analysis_results.po_data.formula");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool po_analysis_results_po_data::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.po_analysis_results.po_data)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 jmp_addr = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          _Internal::set_has_jmp_addr(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jmp_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .analysis_config.po_analysis_results.po_status status = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::analysis_config::po_analysis_results_po_status_IsValid(value)) {
            set_status(static_cast< ::analysis_config::po_analysis_results_po_status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 ksteps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          _Internal::set_has_ksteps(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ksteps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float computation_time = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (37 & 0xFF)) {
          _Internal::set_has_computation_time(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   float, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &computation_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 nb_paths = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {
          _Internal::set_has_nb_paths(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nb_paths_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 alive_branch = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {
          _Internal::set_has_alive_branch(&_has_bits_);
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &alive_branch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string formula = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_formula()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->formula().data(), static_cast<int>(this->formula().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "analysis_config.po_analysis_results.po_data.formula");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.po_analysis_results.po_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.po_analysis_results.po_data)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void po_analysis_results_po_data::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.po_analysis_results.po_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 jmp_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->jmp_addr(), output);
  }

  // required .analysis_config.po_analysis_results.po_status status = 2;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // required uint32 ksteps = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(3, this->ksteps(), output);
  }

  // required float computation_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloat(4, this->computation_time(), output);
  }

  // optional uint32 nb_paths = 5;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->nb_paths(), output);
  }

  // optional uint64 alive_branch = 6;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(6, this->alive_branch(), output);
  }

  // optional string formula = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formula().data(), static_cast<int>(this->formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "analysis_config.po_analysis_results.po_data.formula");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->formula(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.po_analysis_results.po_data)
}

::PROTOBUF_NAMESPACE_ID::uint8* po_analysis_results_po_data::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.po_analysis_results.po_data)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 jmp_addr = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->jmp_addr(), target);
  }

  // required .analysis_config.po_analysis_results.po_status status = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // required uint32 ksteps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->ksteps(), target);
  }

  // required float computation_time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->computation_time(), target);
  }

  // optional uint32 nb_paths = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->nb_paths(), target);
  }

  // optional uint64 alive_branch = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->alive_branch(), target);
  }

  // optional string formula = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->formula().data(), static_cast<int>(this->formula().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "analysis_config.po_analysis_results.po_data.formula");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->formula(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.po_analysis_results.po_data)
  return target;
}

size_t po_analysis_results_po_data::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:analysis_config.po_analysis_results.po_data)
  size_t total_size = 0;

  if (has_jmp_addr()) {
    // required uint64 jmp_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->jmp_addr());
  }

  if (has_ksteps()) {
    // required uint32 ksteps = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ksteps());
  }

  if (has_computation_time()) {
    // required float computation_time = 4;
    total_size += 1 + 4;
  }

  if (has_status()) {
    // required .analysis_config.po_analysis_results.po_status status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());
  }

  return total_size;
}
size_t po_analysis_results_po_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.po_analysis_results.po_data)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000004e) ^ 0x0000004e) == 0) {  // All required fields are present.
    // required uint64 jmp_addr = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->jmp_addr());

    // required uint32 ksteps = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->ksteps());

    // required float computation_time = 4;
    total_size += 1 + 4;

    // required .analysis_config.po_analysis_results.po_status status = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string formula = 7;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->formula());
  }

  if (cached_has_bits & 0x00000030u) {
    // optional uint64 alive_branch = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->alive_branch());
    }

    // optional uint32 nb_paths = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->nb_paths());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void po_analysis_results_po_data::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.po_analysis_results.po_data)
  GOOGLE_DCHECK_NE(&from, this);
  const po_analysis_results_po_data* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<po_analysis_results_po_data>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.po_analysis_results.po_data)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.po_analysis_results.po_data)
    MergeFrom(*source);
  }
}

void po_analysis_results_po_data::MergeFrom(const po_analysis_results_po_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.po_analysis_results.po_data)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      formula_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.formula_);
    }
    if (cached_has_bits & 0x00000002u) {
      jmp_addr_ = from.jmp_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      ksteps_ = from.ksteps_;
    }
    if (cached_has_bits & 0x00000008u) {
      computation_time_ = from.computation_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      alive_branch_ = from.alive_branch_;
    }
    if (cached_has_bits & 0x00000020u) {
      nb_paths_ = from.nb_paths_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void po_analysis_results_po_data::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.po_analysis_results.po_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void po_analysis_results_po_data::CopyFrom(const po_analysis_results_po_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.po_analysis_results.po_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool po_analysis_results_po_data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000004e) != 0x0000004e) return false;
  return true;
}

void po_analysis_results_po_data::InternalSwap(po_analysis_results_po_data* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  formula_.Swap(&other->formula_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(jmp_addr_, other->jmp_addr_);
  swap(ksteps_, other->ksteps_);
  swap(computation_time_, other->computation_time_);
  swap(alive_branch_, other->alive_branch_);
  swap(nb_paths_, other->nb_paths_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata po_analysis_results_po_data::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void po_analysis_results::InitAsDefaultInstance() {
}
class po_analysis_results::_Internal {
 public:
  using HasBits = decltype(std::declval<po_analysis_results>()._has_bits_);
};

po_analysis_results::po_analysis_results()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:analysis_config.po_analysis_results)
}
po_analysis_results::po_analysis_results(const po_analysis_results& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:analysis_config.po_analysis_results)
}

void po_analysis_results::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_po_analysis_results_analysis_5fconfig_2eproto.base);
}

po_analysis_results::~po_analysis_results() {
  // @@protoc_insertion_point(destructor:analysis_config.po_analysis_results)
  SharedDtor();
}

void po_analysis_results::SharedDtor() {
}

void po_analysis_results::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const po_analysis_results& po_analysis_results::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_po_analysis_results_analysis_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void po_analysis_results::Clear() {
// @@protoc_insertion_point(message_clear_start:analysis_config.po_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* po_analysis_results::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .analysis_config.po_analysis_results.po_data values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint8>(ptr) == 10);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool po_analysis_results::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:analysis_config.po_analysis_results)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .analysis_config.po_analysis_results.po_data values = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:analysis_config.po_analysis_results)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:analysis_config.po_analysis_results)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void po_analysis_results::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:analysis_config.po_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .analysis_config.po_analysis_results.po_data values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->values(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:analysis_config.po_analysis_results)
}

::PROTOBUF_NAMESPACE_ID::uint8* po_analysis_results::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:analysis_config.po_analysis_results)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .analysis_config.po_analysis_results.po_data values = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->values(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:analysis_config.po_analysis_results)
  return target;
}

size_t po_analysis_results::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:analysis_config.po_analysis_results)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .analysis_config.po_analysis_results.po_data values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void po_analysis_results::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:analysis_config.po_analysis_results)
  GOOGLE_DCHECK_NE(&from, this);
  const po_analysis_results* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<po_analysis_results>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:analysis_config.po_analysis_results)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:analysis_config.po_analysis_results)
    MergeFrom(*source);
  }
}

void po_analysis_results::MergeFrom(const po_analysis_results& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:analysis_config.po_analysis_results)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
}

void po_analysis_results::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:analysis_config.po_analysis_results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void po_analysis_results::CopyFrom(const po_analysis_results& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:analysis_config.po_analysis_results)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool po_analysis_results::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(this->values())) return false;
  return true;
}

void po_analysis_results::InternalSwap(po_analysis_results* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
}

::PROTOBUF_NAMESPACE_ID::Metadata po_analysis_results::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace analysis_config
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::analysis_config::specific_parameters_t* Arena::CreateMaybeMessage< ::analysis_config::specific_parameters_t >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::specific_parameters_t >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::standard_analysis* Arena::CreateMaybeMessage< ::analysis_config::standard_analysis >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::standard_analysis >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::generic_analysis* Arena::CreateMaybeMessage< ::analysis_config::generic_analysis >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::generic_analysis >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::generic_analysis_results* Arena::CreateMaybeMessage< ::analysis_config::generic_analysis_results >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::generic_analysis_results >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::callret_analysis_results_call_data* Arena::CreateMaybeMessage< ::analysis_config::callret_analysis_results_call_data >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::callret_analysis_results_call_data >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::callret_analysis_results_ret_data* Arena::CreateMaybeMessage< ::analysis_config::callret_analysis_results_ret_data >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::callret_analysis_results_ret_data >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::callret_analysis_results* Arena::CreateMaybeMessage< ::analysis_config::callret_analysis_results >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::callret_analysis_results >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::po_analysis_results_po_data* Arena::CreateMaybeMessage< ::analysis_config::po_analysis_results_po_data >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::po_analysis_results_po_data >(arena);
}
template<> PROTOBUF_NOINLINE ::analysis_config::po_analysis_results* Arena::CreateMaybeMessage< ::analysis_config::po_analysis_results >(Arena* arena) {
  return Arena::CreateInternal< ::analysis_config::po_analysis_results >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
