// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: instruction.proto

#include "instruction.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_instruction_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cpuid_pol_instruction_2eproto;
namespace instruction_pol {
class instr_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<instr_pol> _instance;
  const ::instruction_pol::cpuid_pol* cpuid_;
} _instr_pol_default_instance_;
class cpuid_polDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<cpuid_pol> _instance;
} _cpuid_pol_default_instance_;
}  // namespace instruction_pol
static void InitDefaultsscc_info_cpuid_pol_instruction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::instruction_pol::_cpuid_pol_default_instance_;
    new (ptr) ::instruction_pol::cpuid_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::instruction_pol::cpuid_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_cpuid_pol_instruction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_cpuid_pol_instruction_2eproto}, {}};

static void InitDefaultsscc_info_instr_pol_instruction_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::instruction_pol::_instr_pol_default_instance_;
    new (ptr) ::instruction_pol::instr_pol();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::instruction_pol::instr_pol::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_instr_pol_instruction_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsscc_info_instr_pol_instruction_2eproto}, {
      &scc_info_cpuid_pol_instruction_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_instruction_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_instruction_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_instruction_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_instruction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::instruction_pol::instr_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::instr_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::instruction_pol::instr_pol, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::instruction_pol::instr_pol, ident_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::instr_pol, opcode_),
  offsetof(::instruction_pol::instr_polDefaultTypeInternal, cpuid_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::instr_pol, instr_cnt_),
  1,
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::instruction_pol::cpuid_pol, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::cpuid_pol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::instruction_pol::cpuid_pol, eax_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::cpuid_pol, ebx_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::cpuid_pol, ecx_),
  PROTOBUF_FIELD_OFFSET(::instruction_pol::cpuid_pol, edx_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::instruction_pol::instr_pol)},
  { 12, 21, sizeof(::instruction_pol::cpuid_pol)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::instruction_pol::_instr_pol_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::instruction_pol::_cpuid_pol_default_instance_),
};

const char descriptor_table_protodef_instruction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021instruction.proto\022\017instruction_pol\032\014co"
  "mmon.proto\"\202\001\n\tinstr_pol\022+\n\005ident\030\001 \002(\0162"
  "\034.instruction_pol.instr_ident\022\016\n\006opcode\030"
  "\002 \002(\t\022+\n\005cpuid\030\003 \001(\0132\032.instruction_pol.c"
  "puid_polH\000B\013\n\tinstr_cnt\"\243\001\n\tcpuid_pol\022$\n"
  "\003eax\030\001 \001(\0162\016.common.action:\007DEFAULT\022$\n\003e"
  "bx\030\002 \001(\0162\016.common.action:\007DEFAULT\022$\n\003ecx"
  "\030\003 \001(\0162\016.common.action:\007DEFAULT\022$\n\003edx\030\004"
  " \001(\0162\016.common.action:\007DEFAULT**\n\013instr_i"
  "dent\022\020\n\014INVALID_INST\020\000\022\t\n\005CPUID\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_instruction_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_instruction_2eproto_sccs[2] = {
  &scc_info_cpuid_pol_instruction_2eproto.base,
  &scc_info_instr_pol_instruction_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_instruction_2eproto_once;
static bool descriptor_table_instruction_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_instruction_2eproto = {
  &descriptor_table_instruction_2eproto_initialized, descriptor_table_protodef_instruction_2eproto, "instruction.proto", 393,
  &descriptor_table_instruction_2eproto_once, descriptor_table_instruction_2eproto_sccs, descriptor_table_instruction_2eproto_deps, 2, 1,
  schemas, file_default_instances, TableStruct_instruction_2eproto::offsets,
  file_level_metadata_instruction_2eproto, 2, file_level_enum_descriptors_instruction_2eproto, file_level_service_descriptors_instruction_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_instruction_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_instruction_2eproto), true);
namespace instruction_pol {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* instr_ident_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_instruction_2eproto);
  return file_level_enum_descriptors_instruction_2eproto[0];
}
bool instr_ident_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void instr_pol::InitAsDefaultInstance() {
  ::instruction_pol::_instr_pol_default_instance_.cpuid_ = const_cast< ::instruction_pol::cpuid_pol*>(
      ::instruction_pol::cpuid_pol::internal_default_instance());
}
class instr_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<instr_pol>()._has_bits_);
  static void set_has_ident(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_opcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::instruction_pol::cpuid_pol& cpuid(const instr_pol* msg);
};

const ::instruction_pol::cpuid_pol&
instr_pol::_Internal::cpuid(const instr_pol* msg) {
  return *msg->instr_cnt_.cpuid_;
}
void instr_pol::set_allocated_cpuid(::instruction_pol::cpuid_pol* cpuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_instr_cnt();
  if (cpuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cpuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cpuid, submessage_arena);
    }
    set_has_cpuid();
    instr_cnt_.cpuid_ = cpuid;
  }
  // @@protoc_insertion_point(field_set_allocated:instruction_pol.instr_pol.cpuid)
}
instr_pol::instr_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:instruction_pol.instr_pol)
}
instr_pol::instr_pol(const instr_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from.has_opcode()) {
    opcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opcode_);
  }
  ident_ = from.ident_;
  clear_has_instr_cnt();
  switch (from.instr_cnt_case()) {
    case kCpuid: {
      mutable_cpuid()->::instruction_pol::cpuid_pol::MergeFrom(from.cpuid());
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:instruction_pol.instr_pol)
}

void instr_pol::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_instr_pol_instruction_2eproto.base);
  opcode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ident_ = 0;
  clear_has_instr_cnt();
}

instr_pol::~instr_pol() {
  // @@protoc_insertion_point(destructor:instruction_pol.instr_pol)
  SharedDtor();
}

void instr_pol::SharedDtor() {
  opcode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_instr_cnt()) {
    clear_instr_cnt();
  }
}

void instr_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const instr_pol& instr_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_instr_pol_instruction_2eproto.base);
  return *internal_default_instance();
}


void instr_pol::clear_instr_cnt() {
// @@protoc_insertion_point(one_of_clear_start:instruction_pol.instr_pol)
  switch (instr_cnt_case()) {
    case kCpuid: {
      delete instr_cnt_.cpuid_;
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = INSTR_CNT_NOT_SET;
}


void instr_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:instruction_pol.instr_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    opcode_.ClearNonDefaultToEmptyNoArena();
  }
  ident_ = 0;
  clear_instr_cnt();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* instr_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .instruction_pol.instr_ident ident = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::instruction_pol::instr_ident_IsValid(val))) {
            set_ident(static_cast<::instruction_pol::instr_ident>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string opcode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(mutable_opcode(), ptr, ctx, "instruction_pol.instr_pol.opcode");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .instruction_pol.cpuid_pol cpuid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_cpuid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool instr_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:instruction_pol.instr_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .instruction_pol.instr_ident ident = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::instruction_pol::instr_ident_IsValid(value)) {
            set_ident(static_cast< ::instruction_pol::instr_ident >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string opcode = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_opcode()));
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
            this->opcode().data(), static_cast<int>(this->opcode().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::PARSE,
            "instruction_pol.instr_pol.opcode");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .instruction_pol.cpuid_pol cpuid = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_cpuid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:instruction_pol.instr_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:instruction_pol.instr_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void instr_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:instruction_pol.instr_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .instruction_pol.instr_ident ident = 1;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->ident(), output);
  }

  // required string opcode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), static_cast<int>(this->opcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "instruction_pol.instr_pol.opcode");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opcode(), output);
  }

  // optional .instruction_pol.cpuid_pol cpuid = 3;
  if (has_cpuid()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::cpuid(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:instruction_pol.instr_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* instr_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:instruction_pol.instr_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .instruction_pol.instr_ident ident = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->ident(), target);
  }

  // required string opcode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->opcode().data(), static_cast<int>(this->opcode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "instruction_pol.instr_pol.opcode");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        2, this->opcode(), target);
  }

  // optional .instruction_pol.cpuid_pol cpuid = 3;
  if (has_cpuid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::cpuid(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:instruction_pol.instr_pol)
  return target;
}

size_t instr_pol::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:instruction_pol.instr_pol)
  size_t total_size = 0;

  if (has_opcode()) {
    // required string opcode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->opcode());
  }

  if (has_ident()) {
    // required .instruction_pol.instr_ident ident = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());
  }

  return total_size;
}
size_t instr_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:instruction_pol.instr_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string opcode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->opcode());

    // required .instruction_pol.instr_ident ident = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ident());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (instr_cnt_case()) {
    // optional .instruction_pol.cpuid_pol cpuid = 3;
    case kCpuid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *instr_cnt_.cpuid_);
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void instr_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:instruction_pol.instr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const instr_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<instr_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:instruction_pol.instr_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:instruction_pol.instr_pol)
    MergeFrom(*source);
  }
}

void instr_pol::MergeFrom(const instr_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:instruction_pol.instr_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      opcode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.opcode_);
    }
    if (cached_has_bits & 0x00000002u) {
      ident_ = from.ident_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.instr_cnt_case()) {
    case kCpuid: {
      mutable_cpuid()->::instruction_pol::cpuid_pol::MergeFrom(from.cpuid());
      break;
    }
    case INSTR_CNT_NOT_SET: {
      break;
    }
  }
}

void instr_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:instruction_pol.instr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void instr_pol::CopyFrom(const instr_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:instruction_pol.instr_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool instr_pol::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void instr_pol::InternalSwap(instr_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opcode_.Swap(&other->opcode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ident_, other->ident_);
  swap(instr_cnt_, other->instr_cnt_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata instr_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void cpuid_pol::InitAsDefaultInstance() {
}
class cpuid_pol::_Internal {
 public:
  using HasBits = decltype(std::declval<cpuid_pol>()._has_bits_);
  static void set_has_eax(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ebx(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ecx(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_edx(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

cpuid_pol::cpuid_pol()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:instruction_pol.cpuid_pol)
}
cpuid_pol::cpuid_pol(const cpuid_pol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eax_, &from.eax_,
    static_cast<size_t>(reinterpret_cast<char*>(&edx_) -
    reinterpret_cast<char*>(&eax_)) + sizeof(edx_));
  // @@protoc_insertion_point(copy_constructor:instruction_pol.cpuid_pol)
}

void cpuid_pol::SharedCtor() {
  ::memset(&eax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&edx_) -
      reinterpret_cast<char*>(&eax_)) + sizeof(edx_));
}

cpuid_pol::~cpuid_pol() {
  // @@protoc_insertion_point(destructor:instruction_pol.cpuid_pol)
  SharedDtor();
}

void cpuid_pol::SharedDtor() {
}

void cpuid_pol::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const cpuid_pol& cpuid_pol::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_cpuid_pol_instruction_2eproto.base);
  return *internal_default_instance();
}


void cpuid_pol::Clear() {
// @@protoc_insertion_point(message_clear_start:instruction_pol.cpuid_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&eax_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&edx_) -
        reinterpret_cast<char*>(&eax_)) + sizeof(edx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* cpuid_pol::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .common.action eax = 1 [default = DEFAULT];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_eax(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.action ebx = 2 [default = DEFAULT];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ebx(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.action ecx = 3 [default = DEFAULT];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_ecx(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .common.action edx = 4 [default = DEFAULT];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::common::action_IsValid(val))) {
            set_edx(static_cast<::common::action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool cpuid_pol::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:instruction_pol.cpuid_pol)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .common.action eax = 1 [default = DEFAULT];
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_eax(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action ebx = 2 [default = DEFAULT];
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ebx(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action ecx = 3 [default = DEFAULT];
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_ecx(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .common.action edx = 4 [default = DEFAULT];
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::common::action_IsValid(value)) {
            set_edx(static_cast< ::common::action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::PROTOBUF_NAMESPACE_ID::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:instruction_pol.cpuid_pol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:instruction_pol.cpuid_pol)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void cpuid_pol::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:instruction_pol.cpuid_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .common.action eax = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->eax(), output);
  }

  // optional .common.action ebx = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->ebx(), output);
  }

  // optional .common.action ecx = 3 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      3, this->ecx(), output);
  }

  // optional .common.action edx = 4 [default = DEFAULT];
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      4, this->edx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:instruction_pol.cpuid_pol)
}

::PROTOBUF_NAMESPACE_ID::uint8* cpuid_pol::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:instruction_pol.cpuid_pol)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .common.action eax = 1 [default = DEFAULT];
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->eax(), target);
  }

  // optional .common.action ebx = 2 [default = DEFAULT];
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->ebx(), target);
  }

  // optional .common.action ecx = 3 [default = DEFAULT];
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->ecx(), target);
  }

  // optional .common.action edx = 4 [default = DEFAULT];
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->edx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:instruction_pol.cpuid_pol)
  return target;
}

size_t cpuid_pol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:instruction_pol.cpuid_pol)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .common.action eax = 1 [default = DEFAULT];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->eax());
    }

    // optional .common.action ebx = 2 [default = DEFAULT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ebx());
    }

    // optional .common.action ecx = 3 [default = DEFAULT];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->ecx());
    }

    // optional .common.action edx = 4 [default = DEFAULT];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->edx());
    }

  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void cpuid_pol::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:instruction_pol.cpuid_pol)
  GOOGLE_DCHECK_NE(&from, this);
  const cpuid_pol* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<cpuid_pol>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:instruction_pol.cpuid_pol)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:instruction_pol.cpuid_pol)
    MergeFrom(*source);
  }
}

void cpuid_pol::MergeFrom(const cpuid_pol& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:instruction_pol.cpuid_pol)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      eax_ = from.eax_;
    }
    if (cached_has_bits & 0x00000002u) {
      ebx_ = from.ebx_;
    }
    if (cached_has_bits & 0x00000004u) {
      ecx_ = from.ecx_;
    }
    if (cached_has_bits & 0x00000008u) {
      edx_ = from.edx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void cpuid_pol::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:instruction_pol.cpuid_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void cpuid_pol::CopyFrom(const cpuid_pol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:instruction_pol.cpuid_pol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool cpuid_pol::IsInitialized() const {
  return true;
}

void cpuid_pol::InternalSwap(cpuid_pol* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(eax_, other->eax_);
  swap(ebx_, other->ebx_);
  swap(ecx_, other->ecx_);
  swap(edx_, other->edx_);
}

::PROTOBUF_NAMESPACE_ID::Metadata cpuid_pol::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace instruction_pol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::instruction_pol::instr_pol* Arena::CreateMaybeMessage< ::instruction_pol::instr_pol >(Arena* arena) {
  return Arena::CreateInternal< ::instruction_pol::instr_pol >(arena);
}
template<> PROTOBUF_NOINLINE ::instruction_pol::cpuid_pol* Arena::CreateMaybeMessage< ::instruction_pol::cpuid_pol >(Arena* arena) {
  return Arena::CreateInternal< ::instruction_pol::cpuid_pol >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
