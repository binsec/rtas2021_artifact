# 22 "parser/lexer.mll"
 
open Parser

let keywords = [
  "as"            , AS;
  "begin"         , BEGIN;
  "end"           , END;
  "modu"          , MODU;
  "mods"          , MODS;
  "and"           , AND ;
  "or"            , OR  ;
  "xor"           , XOR ;
  "not"           , NOT ;
  "lshift"        , LSHIFT  ;
  "rshiftu"       , RSHIFTU ;
  "rshifts"       , RSHIFTS ;
  "lrotate"       , LROTATE ;
  "rrotate"       , RROTATE ;
  "goto"          , GOTO ;
  "extu"          , EXTU ;
  "exts"          , EXTS ;
  "call"          , CALLFLAG ;
  "ret"           , RETURNFLAG ;
  "true"          , TRUE ;
  "false"         , FALSE ;
  "if"            , IF ;
  "else"          , ELSE ;
  "then"          , THEN ;
  "stop"          , STOP ;
  "assert"        , ASSERT ;
  "assume"        , ASSUME ;
  "nondet"        , NONDET ;
  "nondet_assume" , NONDETASSUME ;
  "cst"           , CONSTANT ;
  "stack"         , STACK ;
  "malloc"        , MALLOC ;
  "free"          , FREE ;
  "var"           , VAR;
  "print"         , PRINT;
  "from"          , FROM;
  "file"          , FILE;
  "from_file"     , FROMFILE;
  "big"           , BIG ;
  "little"        , LITTLE;
  "permissions"   , PERMISSIONS;
  "flag"          , FLAG;
  "temporary"     , TEMPORARY;
  "register"      , REGISTER;
  "entry_point"   , ENTRYPOINT;
  "word_size"     , WORDSIZE ;
  "endianness"    , ENDIANNESS;
  "cut"           , CUT;
  "enum"          , ENUMERATE;
  "enumerate"     , ENUMERATE;
  "reach"         , REACH;
  "alternative"   , ALTERNATIVE;
  "consequent"    , CONSEQUENT;
  "alternate"     , ALTERNATE;
  "uncontrolled"  , UNCONTROLLED;
]

let keyword_tbl =
  let h = Hashtbl.create (List.length keywords) in
  List.iter (fun (k, v) -> Hashtbl.add h k v) keywords;
  h

let kwd_or_ident name =
  match Hashtbl.find keyword_tbl name with
  | terminal -> terminal
  | exception Not_found -> IDENT name


# 75 "parser/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\188\255\189\255\190\255\001\000\005\000\078\000\088\000\
    \163\000\112\000\238\000\065\001\140\001\215\001\034\002\050\000\
    \066\000\213\255\001\000\025\000\017\000\224\255\035\000\228\255\
    \229\255\230\255\231\255\232\255\242\255\243\255\034\000\110\000\
    \107\000\049\000\041\000\095\000\254\255\255\255\221\255\250\255\
    \251\255\216\255\248\255\096\000\249\255\233\255\234\255\045\000\
    \046\000\246\255\247\255\235\255\236\255\089\000\104\000\220\255\
    \237\255\238\255\060\000\241\255\245\255\239\255\240\255\099\000\
    \098\000\117\000\210\255\116\000\111\000\121\000\209\255\219\255\
    \225\255\226\255\222\255\215\255\214\255\200\255\202\255\204\255\
    \074\000\075\000\087\000\088\000\075\000\208\255\090\000\086\000\
    \078\000\072\000\100\000\084\000\086\000\093\000\089\000\084\000\
    \207\255\104\000\092\000\093\000\103\000\090\000\092\000\206\255\
    \109\000\109\000\119\000\197\255\109\002\184\002\196\255\094\001\
    \095\001\206\000\003\003\026\003\248\000\096\001";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\067\000\064\000\063\000\063\000\
    \060\000\067\000\060\000\060\000\054\000\052\000\050\000\067\000\
    \044\000\255\255\041\000\040\000\032\000\255\255\028\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\011\000\037\000\
    \038\000\067\000\003\000\002\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \008\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\056\000\057\000\255\255\255\255\
    \255\255\255\255\255\255\061\000\062\000\255\255";
  Lexing.lex_default =
   "\001\000\000\000\000\000\000\000\117\000\255\255\255\255\255\255\
    \255\255\112\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\255\255\255\255\255\255\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\000\000\000\000\000\000\255\255\
    \255\255\000\000\000\000\000\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\255\255\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\000\000\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255\000\000\255\255\255\255\000\000\112\000\
    \112\000\255\255\255\255\255\255\255\255\117\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\005\000\003\000\003\000\000\000\005\000\005\000\000\000\
    \000\000\000\000\005\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \005\000\016\000\009\000\004\000\000\000\005\000\018\000\076\000\
    \025\000\024\000\034\000\036\000\021\000\035\000\020\000\033\000\
    \007\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\030\000\029\000\031\000\028\000\032\000\074\000\
    \037\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\010\000\008\000\008\000\008\000\011\000\
    \008\000\008\000\014\000\008\000\008\000\008\000\008\000\013\000\
    \012\000\008\000\008\000\023\000\015\000\022\000\017\000\071\000\
    \041\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\027\000\019\000\026\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \006\000\006\000\110\000\082\000\079\000\075\000\073\000\081\000\
    \072\000\078\000\077\000\055\000\039\000\038\000\040\000\044\000\
    \051\000\049\000\052\000\050\000\042\000\067\000\043\000\080\000\
    \047\000\048\000\060\000\058\000\059\000\063\000\111\000\061\000\
    \064\000\062\000\065\000\066\000\053\000\068\000\069\000\070\000\
    \104\000\086\000\113\000\083\000\084\000\085\000\087\000\097\000\
    \089\000\090\000\054\000\091\000\092\000\093\000\094\000\095\000\
    \096\000\098\000\099\000\100\000\101\000\102\000\088\000\103\000\
    \114\000\105\000\106\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\107\000\045\000\000\000\
    \046\000\056\000\000\000\057\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\116\000\116\000\
    \002\000\255\255\008\000\000\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \116\000\116\000\000\000\000\000\000\000\000\000\000\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\109\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\000\000\000\000\000\000\000\000\008\000\000\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\110\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\108\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\255\255\111\000\000\000\000\000\
    \008\000\000\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
    \000\000\000\000\000\000\008\000\000\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\000\000\000\000\000\000\000\000\008\000\000\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\000\000\000\000\255\255\255\255\
    \255\255\000\000\000\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\000\000\000\000\000\000\
    \000\000\008\000\000\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \000\000\000\000\000\000\000\000\008\000\000\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\000\000\000\000\000\000\000\000\008\000\
    \000\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\115\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\000\000\000\000\000\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\004\000\255\255\000\000\005\000\255\255\
    \255\255\255\255\005\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\000\000\255\255\005\000\000\000\018\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\030\000\
    \033\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\006\000\006\000\
    \006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
    \007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
    \007\000\007\000\009\000\015\000\016\000\019\000\022\000\015\000\
    \022\000\016\000\016\000\031\000\034\000\035\000\034\000\043\000\
    \047\000\048\000\047\000\048\000\033\000\053\000\033\000\015\000\
    \032\000\032\000\031\000\031\000\031\000\054\000\009\000\058\000\
    \063\000\058\000\064\000\065\000\031\000\067\000\068\000\069\000\
    \080\000\081\000\007\000\082\000\083\000\084\000\086\000\087\000\
    \088\000\089\000\031\000\090\000\091\000\092\000\093\000\094\000\
    \095\000\097\000\098\000\099\000\100\000\101\000\086\000\102\000\
    \007\000\104\000\105\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\106\000\032\000\255\255\
    \032\000\031\000\255\255\031\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\113\000\113\000\
    \000\000\004\000\008\000\255\255\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
    \008\000\008\000\008\000\008\000\008\000\008\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \116\000\116\000\255\255\255\255\255\255\255\255\255\255\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\255\255\255\255\255\255\255\255\010\000\255\255\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \010\000\255\255\117\000\255\255\255\255\255\255\255\255\255\255\
    \009\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\255\255\255\255\255\255\255\255\255\255\
    \111\000\112\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\111\000\112\000\255\255\255\255\
    \011\000\255\255\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\011\000\011\000\011\000\011\000\
    \011\000\011\000\011\000\011\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\255\255\
    \255\255\255\255\255\255\012\000\255\255\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\255\255\255\255\255\255\255\255\013\000\255\255\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\255\255\255\255\111\000\112\000\
    \117\000\255\255\255\255\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\255\255\255\255\255\255\
    \255\255\014\000\255\255\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\014\000\014\000\014\000\
    \014\000\014\000\014\000\014\000\014\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \255\255\255\255\255\255\255\255\108\000\255\255\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \108\000\108\000\108\000\108\000\108\000\108\000\108\000\108\000\
    \109\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\255\255\255\255\255\255\255\255\109\000\
    \255\255\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\109\000\109\000\109\000\109\000\109\000\
    \109\000\109\000\109\000\114\000\114\000\114\000\114\000\114\000\
    \114\000\114\000\114\000\114\000\114\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\114\000\114\000\114\000\114\000\
    \114\000\114\000\115\000\115\000\115\000\115\000\115\000\115\000\
    \115\000\115\000\115\000\115\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\115\000\115\000\115\000\115\000\115\000\
    \115\000\255\255\255\255\255\255\114\000\114\000\114\000\114\000\
    \114\000\114\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\115\000\115\000\115\000\115\000\115\000\
    \115\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 104 "parser/lexer.mll"
                    ( AT )
# 412 "parser/lexer.ml"

  | 1 ->
# 105 "parser/lexer.mll"
                    ( PLUS )
# 417 "parser/lexer.ml"

  | 2 ->
# 106 "parser/lexer.mll"
                    ( MINUS )
# 422 "parser/lexer.ml"

  | 3 ->
# 107 "parser/lexer.mll"
                    ( STAR )
# 427 "parser/lexer.ml"

  | 4 ->
# 108 "parser/lexer.mll"
                    ( STAR_U )
# 432 "parser/lexer.ml"

  | 5 ->
# 109 "parser/lexer.mll"
                    ( STAR_S )
# 437 "parser/lexer.ml"

  | 6 ->
# 110 "parser/lexer.mll"
                    ( SLASH_U )
# 442 "parser/lexer.ml"

  | 7 ->
# 111 "parser/lexer.mll"
                    ( SLASH_S )
# 447 "parser/lexer.ml"

  | 8 ->
# 113 "parser/lexer.mll"
                    ( RSHIFTU )
# 452 "parser/lexer.ml"

  | 9 ->
# 114 "parser/lexer.mll"
                    ( RSHIFTS )
# 457 "parser/lexer.ml"

  | 10 ->
# 115 "parser/lexer.mll"
                    ( LSHIFT )
# 462 "parser/lexer.ml"

  | 11 ->
# 116 "parser/lexer.mll"
                    ( COLON )
# 467 "parser/lexer.ml"

  | 12 ->
# 117 "parser/lexer.mll"
                    ( SEMICOLON )
# 472 "parser/lexer.ml"

  | 13 ->
# 118 "parser/lexer.mll"
                    ( EQUAL )
# 477 "parser/lexer.ml"

  | 14 ->
# 119 "parser/lexer.mll"
                    ( NEQ )
# 482 "parser/lexer.ml"

  | 15 ->
# 120 "parser/lexer.mll"
                    ( LEU )
# 487 "parser/lexer.ml"

  | 16 ->
# 121 "parser/lexer.mll"
                    ( LES )
# 492 "parser/lexer.ml"

  | 17 ->
# 122 "parser/lexer.mll"
                    ( LTU )
# 497 "parser/lexer.ml"

  | 18 ->
# 123 "parser/lexer.mll"
                    ( LTS )
# 502 "parser/lexer.ml"

  | 19 ->
# 124 "parser/lexer.mll"
                    ( GEU )
# 507 "parser/lexer.ml"

  | 20 ->
# 125 "parser/lexer.mll"
                    ( GES )
# 512 "parser/lexer.ml"

  | 21 ->
# 126 "parser/lexer.mll"
                    ( GTU )
# 517 "parser/lexer.ml"

  | 22 ->
# 127 "parser/lexer.mll"
                    ( GTS )
# 522 "parser/lexer.ml"

  | 23 ->
# 128 "parser/lexer.mll"
                    ( LBRACE )
# 527 "parser/lexer.ml"

  | 24 ->
# 129 "parser/lexer.mll"
                    ( RBRACE )
# 532 "parser/lexer.ml"

  | 25 ->
# 130 "parser/lexer.mll"
                    ( LPAR )
# 537 "parser/lexer.ml"

  | 26 ->
# 131 "parser/lexer.mll"
                    ( RPAR )
# 542 "parser/lexer.ml"

  | 27 ->
# 132 "parser/lexer.mll"
                    ( LBRACKET )
# 547 "parser/lexer.ml"

  | 28 ->
# 133 "parser/lexer.mll"
                    ( RBRACKET )
# 552 "parser/lexer.ml"

  | 29 ->
# 134 "parser/lexer.mll"
                    ( RBRACKETS )
# 557 "parser/lexer.ml"

  | 30 ->
# 135 "parser/lexer.mll"
                    ( RBRACKETU )
# 562 "parser/lexer.ml"

  | 31 ->
# 136 "parser/lexer.mll"
                    ( COMMA )
# 567 "parser/lexer.ml"

  | 32 ->
# 137 "parser/lexer.mll"
                    ( DOT )
# 572 "parser/lexer.ml"

  | 33 ->
# 138 "parser/lexer.mll"
                    ( DOTDOT )
# 577 "parser/lexer.ml"

  | 34 ->
# 139 "parser/lexer.mll"
                    ( ARROW )
# 582 "parser/lexer.ml"

  | 35 ->
# 140 "parser/lexer.mll"
                    ( ARROWINV )
# 587 "parser/lexer.ml"

  | 36 ->
# 141 "parser/lexer.mll"
                    ( ASSIGN )
# 592 "parser/lexer.ml"

  | 37 ->
# 142 "parser/lexer.mll"
                    ( INFER )
# 597 "parser/lexer.ml"

  | 38 ->
# 143 "parser/lexer.mll"
                    ( SUPER )
# 602 "parser/lexer.ml"

  | 39 ->
# 144 "parser/lexer.mll"
                    ( ANNOT )
# 607 "parser/lexer.ml"

  | 40 ->
# 146 "parser/lexer.mll"
                    ( OR )
# 612 "parser/lexer.ml"

  | 41 ->
# 148 "parser/lexer.mll"
                    ( AND )
# 617 "parser/lexer.ml"

  | 42 ->
# 149 "parser/lexer.mll"
                    ( XOR )
# 622 "parser/lexer.ml"

  | 43 ->
# 150 "parser/lexer.mll"
                    ( CONCAT )
# 627 "parser/lexer.ml"

  | 44 ->
# 151 "parser/lexer.mll"
                    ( NOT )
# 632 "parser/lexer.ml"

  | 45 ->
# 152 "parser/lexer.mll"
                    ( TEMPTAG )
# 637 "parser/lexer.ml"

  | 46 ->
# 153 "parser/lexer.mll"
                    ( FLAGTAG )
# 642 "parser/lexer.ml"

  | 47 ->
# 154 "parser/lexer.mll"
                    ( WORDSIZE )
# 647 "parser/lexer.ml"

  | 48 ->
# 155 "parser/lexer.mll"
                    ( ENTRYPOINT )
# 652 "parser/lexer.ml"

  | 49 ->
# 156 "parser/lexer.mll"
                    ( ENDIANNESS )
# 657 "parser/lexer.ml"

  | 50 ->
# 157 "parser/lexer.mll"
                    ( READ )
# 662 "parser/lexer.ml"

  | 51 ->
# 158 "parser/lexer.mll"
                    ( NREAD )
# 667 "parser/lexer.ml"

  | 52 ->
# 159 "parser/lexer.mll"
                    ( WRITE )
# 672 "parser/lexer.ml"

  | 53 ->
# 160 "parser/lexer.mll"
                    ( NWRITE )
# 677 "parser/lexer.ml"

  | 54 ->
# 161 "parser/lexer.mll"
                    ( EXEC )
# 682 "parser/lexer.ml"

  | 55 ->
# 162 "parser/lexer.mll"
                    ( NEXEC )
# 687 "parser/lexer.ml"

  | 56 ->
# 163 "parser/lexer.mll"
                    ( SOK )
# 692 "parser/lexer.ml"

  | 57 ->
# 164 "parser/lexer.mll"
                    ( SKO )
# 697 "parser/lexer.ml"

  | 58 ->
# 165 "parser/lexer.mll"
                    ( UNDEF )
# 702 "parser/lexer.ml"

  | 59 ->
let
# 166 "parser/lexer.mll"
                                       st
# 708 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 167 "parser/lexer.mll"
                    ( STRING st )
# 712 "parser/lexer.ml"

  | 60 ->
let
# 168 "parser/lexer.mll"
             s
# 718 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 168 "parser/lexer.mll"
                    ( kwd_or_ident s )
# 722 "parser/lexer.ml"

  | 61 ->
let
# 169 "parser/lexer.mll"
           s
# 728 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 169 "parser/lexer.mll"
                    ( HEXA s )
# 732 "parser/lexer.ml"

  | 62 ->
let
# 170 "parser/lexer.mll"
           s
# 738 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 170 "parser/lexer.mll"
                    ( BIN s )
# 742 "parser/lexer.ml"

  | 63 ->
let
# 171 "parser/lexer.mll"
              s
# 748 "parser/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 171 "parser/lexer.mll"
                    ( INT s )
# 752 "parser/lexer.ml"

  | 64 ->
# 172 "parser/lexer.mll"
                    ( token lexbuf )
# 757 "parser/lexer.ml"

  | 65 ->
# 174 "parser/lexer.mll"
                    ( Lexing.new_line lexbuf; token lexbuf )
# 762 "parser/lexer.ml"

  | 66 ->
# 175 "parser/lexer.mll"
                    ( EOF )
# 767 "parser/lexer.ml"

  | 67 ->
# 177 "parser/lexer.mll"
      (
        let open Lexing in
        let line = (lexeme_start_p lexbuf).pos_lnum in
        let msg =
          Format.asprintf "Unkown lexeme %s at line %d" (lexeme lexbuf) line in
        failwith msg )
# 777 "parser/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

