/*
 *  Copyright (c) 2010,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

#ifndef __UNISIM_UTIL_DEBUG_DWARF_STMT_VM_HH__
#define __UNISIM_UTIL_DEBUG_DWARF_STMT_VM_HH__

#include <unisim/util/debug/dwarf/fwd.hh>

namespace unisim {
namespace util {
namespace debug {
namespace dwarf {

template <class MEMORY_ADDR>
class DWARF_StatementVM
{
public:
	DWARF_StatementVM(const DWARF_Handler<MEMORY_ADDR> *dw_handler);
	~DWARF_StatementVM();

	bool Run(const DWARF_StatementProgram<MEMORY_ADDR> *dw_stmt_prog, std::ostream *os, std::multimap<MEMORY_ADDR, const Statement<MEMORY_ADDR> *> *matrix, const DWARF_CompilationUnit<MEMORY_ADDR> *dw_cu = 0);
private:
	const DWARF_Handler<MEMORY_ADDR> *dw_handler;
	std::ostream& debug_info_stream;
	std::ostream& debug_warning_stream;
	std::ostream& debug_error_stream;
	bool debug;
	// Machine state
	MEMORY_ADDR address;   // The program-counter value corresponding to a machine instruction generated by the compiler.
	unsigned int op_index; // An unsigned integer representing the index of an operation within a VLIW instruction. The index of the first operation is 0. For non-VLIW architectures, this register will always be 0.
	unsigned int file;     // An unsigned integer indicating the identity of the source file corresponding to a machine instruction.
	unsigned int line;     // An unsigned integer indicating a source line number. Lines are numbered beginning at 1. The compiler may emit the value 0 in cases where an instruction cannot be attributed to any source line.
	unsigned int column;   // An unsigned integer indicating a column number within a source line. Columns are numbered beginning at 1. The value 0 is reserved to indicate that a statement begins at the ‘‘left edge’’ of the line.
	bool is_stmt;          // A boolean indicating that the current instruction is the beginning of a statement.
	bool basic_block;      // A boolean indicating that the current instruction is the beginning of a basic block.
	bool end_sequence;     // A boolean indicating that the current address is that of the first byte after the end of a sequence of target machine instructions.
	bool prologue_end;     // A boolean indicating that the current address is one (of possibly many) where execution should be suspended for an entry breakpoint of a function.
	bool prologue_begin;   // A boolean indicating that the current address is one (of possibly many) where execution should be suspended for an exit breakpoint of a function.
	unsigned int isa;      // An unsigned integer whose value encodes the applicable instruction set architecture for the current instruction.
	unsigned int discriminator; // An unsigned integer identifying the block to which the current instruction belongs.

	std::vector<DWARF_Filename> filenames; // filenames (filenames in statement program prologue + those added by extended opcode DW_LNE_define_file)

	bool IsAbsolutePath(const char *filename) const;
	void AddRow(const DWARF_StatementProgram<MEMORY_ADDR> *dw_stmt_prog, std::multimap<MEMORY_ADDR, const Statement<MEMORY_ADDR> *>& matrix, const DWARF_CompilationUnit<MEMORY_ADDR> *dw_cu);
};

} // end of namespace dwarf
} // end of namespace debug
} // end of namespace util
} // end of namespace unisim

#endif
