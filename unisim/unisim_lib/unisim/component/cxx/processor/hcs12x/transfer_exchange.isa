/*
 *  Copyright (c) 2008,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Reda   Nouacer  (reda.nouacer@cea.fr)
 */


// A->B  or B->A 
op t_ab_ba(0x18[8]:0x7[7]:b[1])

t_ab_ba.getCycles = { return 2; }

t_ab_ba.disasm = {
	string mnem;
	
	if (b == 0) { mnem = "TAB"; } else { mnem = "TBA";} 
	sink << mnem;
	
	return mnem;
}

t_ab_ba.execute = {
	uint8_t val;
	
	if (b == 0) {
		val = cpu->getRegA();
		cpu->setRegB(val);
	} else {
		val = cpu->getRegB();
		cpu->setRegA(val);
	}
	
// CRC flags 0->V; setZ; setN
	cpu->ccr->clrV();
	if (val == 0) {cpu->ccr->setZ();} else {cpu->ccr->clrZ();}
	if ((val & 0x80) == 0x80) { cpu->ccr->setN();} else { cpu->ccr->clrN(); }

	return getCycles();
}

// ****************  Common Section to HCS12X ( HLS = 0 ) *************
// *************** HCS12 - EXCHANGE Instructions ************

// XGDX or XGDY or EXG 
op exg_hcs12(0xB7[8]:> <:0b1[1]:lms[3]:0b0[1]:lls[3])  

exg_hcs12.getCycles = { return 1; }

/*
 * lms sourceRegister index
 * lls destinationRegister index  
 * */
exg_hcs12.disasm = {
	string mnem;
	

	uint8_t rrSrc, rrDst;

	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
		default: rrDst = lls;    
	}

	// Exchange register Contents. There is no sign extension
	uint8_t eb = (1 << 8) | (lms << 4) | (0 << 3) | lls;
	
	switch (eb) 
	{
		case 0xC5: mnem = "XGDX";  break;
		case 0xC6: mnem = "XGDY"; break;
		default: mnem = "EXG";
	}
	sink << mnem << " ";
	
	if ((eb != 0xC5) && (eb != 0xC6)) 
	{
		sink << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst); 
	}

	return mnem;
}

exg_hcs12.execute = {
/* Legal "rr" value for EBLB::setter and EBLB::getter functions 
 * 0x00:A; 0x01:B; 
 * 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW
 * 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
 * 0x04:D; 0x05:X; 0x06:Y; 0x07:SP  
 */

	uint8_t srcSize, dstSize; 
	uint8_t rrSrc, rrDst;
	
	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
		default: rrDst = lls;    
	}
		
	srcSize = EBLB::getRegSize(rrSrc);
	dstSize = EBLB::getRegSize(rrDst);
	
	// Exchange register Contents. EXG r1, r2 
	// There is no sign extension
	// Only CCR[7:0] is used for HCS12

	if (srcSize == dstSize) {
		// (r1) <=> (r2)
		if (srcSize == 8) {
			cpu->eblb->exchange<uint8_t>(rrSrc, rrDst);
		} else {
			cpu->eblb->exchange<uint16_t>(rrSrc, rrDst);
		}
	} 
	else if (((srcSize == 8) || (lms == 2)) && (dstSize == 16)) {
		// 0x00:(r1) => r2 
		// if r2 isn't D then && (r2[7:0]) => r1
		uint16_t r1Val = 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc);
		uint8_t r2Val = (uint8_t) cpu->eblb->getter<uint16_t>(rrDst); // only low 8 bits
		cpu->eblb->setter<uint16_t>(rrDst, r1Val);
		if (rrDst != 4 /* reg D*/) {
			cpu->eblb->setter<uint16_t>(rrDst, r2Val);			
		} 
	}
	else if ((srcSize == 16) && (dstSize == 8)) {
		// (r1[7:0]) => (r2)
		// if r2 is A then 0x00:(r2) => r1 else 0xFF:(r2) => r1
		uint8_t r1Val = cpu->eblb->getter<uint16_t>(rrSrc); // only low 8 bits
		uint8_t r2Val = cpu->eblb->getter<uint8_t>(rrDst);
		
		cpu->eblb->setter<uint8_t>(rrDst,r1Val);
		if (rrDst == 0 /*reg A*/) {
			cpu->eblb->setter<uint16_t>(rrSrc, 0x00FF & r2Val);
		} else {
			cpu->eblb->setter<uint16_t>(rrSrc, 0xFF00 | r2Val);
		}
	}

	return getCycles();
}

// ***************************  TRANSFER Instructions

// TFR or TPA or TSX or TSY or TXS or TYS or SEX
op tfr_hcs12(0xB7[8]:> <:0b0[1]:lms[3]:hls[1]:lls[3])  

tfr_hcs12.getCycles = { return 1; }

/*
 * lms sourceRegister index
 * lls destinationRegister index  
 * */
tfr_hcs12.disasm = {
	string mnem;

	uint8_t rrSrc, rrDst;

	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
		default: rrDst = lls;    
	}

	// Transfer Register Content to Another register
	uint8_t eb = (0 << 8) | (lms << 4) | (0 << 3) | lls;
	
	switch (eb) 
	{
		case 0x02: mnem = "TAP"; sink << mnem; break;
		case 0x20: mnem = "TPA"; sink << mnem; break;
		case 0x75: mnem = "TSX"; sink << mnem; break;
		case 0x76: mnem = "TSY"; sink << mnem; break;
		case 0x57: mnem = "TXS"; sink << mnem; break;
		case 0x67: mnem = "TYS"; sink << mnem; break;
		default: mnem = "TFR"; sink << mnem << " " << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst);
	}

	return mnem;
}


tfr_hcs12.execute = {
/* Legal "rr" value for EBLB::setter and EBLB::getter functions 
 * 0x00:A; 0x01:B; 
 * 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW 
 * 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
 * 0x04:D; 0x05:X; 0x06:Y; 0x07:SP  
 */

	uint8_t srcSize, dstSize; 
	uint8_t rrSrc, rrDst;
	uint8_t oldCCRLow = cpu->ccr->getCCRLow();
	
	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR: rrSrc = EBLB::EBLBRegs::CCRL; break; // src is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrSrc = EBLB::EBLBRegs::TMP3; break; // src is 0x32 register
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR: rrDst = EBLB::EBLBRegs::CCRL; break; // dst is 0x21 register
		case EBLB::EBLBMSLSRegs::TMPx: rrDst = EBLB::EBLBRegs::TMP2; break; // dst is 0x31 register
		default: rrDst = lls;    
	}
		
	srcSize = EBLB::getRegSize(rrSrc);
	dstSize = EBLB::getRegSize(rrDst);

	// Transfer Register Content to Another register
	// Only CCR[7:0] is used for HCS12

	/*
	if (sizeof(r1) && sizeof(r2) { (r1) => (r2)}
	else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {sex:r1 => r2}
	else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) => (r2) }
	*/  

	if (srcSize == dstSize) {
		// (r1) => (r2)
		if (srcSize == 8) {
			cpu->eblb->setter<uint8_t>(rrDst, cpu->eblb->getter<uint8_t>(rrSrc));
		} else {
			cpu->eblb->setter<uint16_t>(rrDst, cpu->eblb->getter<uint16_t>(rrSrc));
		}
	} 
	else if (((srcSize == 8) || (lms == 2)) && (dstSize == 16)) {
		// sex:r1 => r2
		if ((cpu->eblb->getter<uint8_t>(rrSrc) & 0x80) == 0x80)  
		{ // if r1 bit 7 = 1 then 0xFF:(r1) => r2
			cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) | 0xFF00);
		} else 
		{ // if r1 bit 7 = 1 then 0x00:(r1) => r2
			cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) & 0x00FF);
		}  
	}
	else if ((srcSize == 16) && (dstSize == 8)) {
		// (r1[7:0]) => (r2)
		uint8_t tmp = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
		cpu->eblb->setter<uint8_t>(rrDst, tmp);
	}
	
	if ((oldCCRLow & 0x40) == 0x00) {
		cpu->ccr->setCCRLow(cpu->ccr->getCCRLow() & 0xBF);
	}

	return getCycles();
}

// ****************  Specific Section to HCS12X ( HLS = 1 ) *************

// ***************  HCS12X - EXCHANGE Instructions ************

// XGDX or XGDY or EXG 
op exg_hcs12x(0xB7[8]:> <:0b1[1]:lms[3]:0b1[1]:lls[3])  

exg_hcs12x.getCycles = { return 1; }

/*
 * lms sourceRegister index
 * lls destinationRegister index  
 * */
exg_hcs12x.disasm = {
	string mnem;

	uint8_t rrSrc, rrDst;

	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR: // src is CCRW register
			if (lls == EBLB::EBLBMSLSRegs::A) {
				rrSrc = EBLB::EBLBRegs::CCRH; //0x22;
			} else if (lls == EBLB::EBLBMSLSRegs::B) {
				rrSrc = EBLB::EBLBRegs::CCRL; //0x21;
			} else {
				rrSrc = EBLB::EBLBRegs::CCRW; //0x23;
			}
			break; 
		case EBLB::EBLBMSLSRegs::TMPx: // src is TMP register
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
			} else {
				rrSrc = EBLB::EBLBRegs::TMP3; //0x32; // TMP3
			}
			break; 
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR: // dst is CCRW register
			if (lms == EBLB::EBLBMSLSRegs::A) {
				rrDst = EBLB::EBLBRegs::CCRH; //0x22;
			} else if (lms == EBLB::EBLBMSLSRegs::B) {
				rrDst = EBLB::EBLBRegs::CCRL; //0x21;
			} else {
				rrDst = EBLB::EBLBRegs::CCRW; //0x23;
			}

			break; 
		case EBLB::EBLBMSLSRegs::TMPx: // dst is TMP2 register
			if (lms == EBLB::EBLBRegs::D ) {
				rrDst = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
			} else {
				rrDst = EBLB::EBLBRegs::TMP2; //0x31; // TMP2
			}
			break; 
		default: rrDst = lls;    
	}
	
 	// Exchange register Contents. There is no sign extension
	
	string srcName = EBLB::getRegName(rrSrc);
	string dstName = EBLB::getRegName(rrDst);
	
	if (lls == EBLB::EBLBMSLSRegs::A ) {
		if (lms == EBLB::EBLBMSLSRegs::CCR ) {
			srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);  
		} 
		else if ((lms != EBLB::EBLBMSLSRegs::B ) && (lms != EBLB::EBLBMSLSRegs::D)) {
			srcName = srcName + "H";
		} 
	} if (lls == EBLB::EBLBMSLSRegs::B) {
		if (lms == EBLB::EBLBMSLSRegs::CCR) {
			srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);  
		} 
		else if ((lms != EBLB::EBLBMSLSRegs::A ) && (lms != EBLB::EBLBMSLSRegs::D)) {
			srcName = srcName + "L";
		} 
	} 

	if (lms == EBLB::EBLBMSLSRegs::A) {
		if (lls == EBLB::EBLBMSLSRegs::CCR /* reg CCR */) {
			dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);  
		} 
		else if ((lls != EBLB::EBLBMSLSRegs::B) && (lls != EBLB::EBLBMSLSRegs::D)) {
			dstName = dstName + "H";
		} 
	} if (lms == EBLB::EBLBMSLSRegs::B) {
		if (lls == EBLB::EBLBMSLSRegs::CCR) {
			dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);  
		} 
		else if ((lls != EBLB::EBLBMSLSRegs::A) && (lls != EBLB::EBLBMSLSRegs::D)) {
			dstName = dstName + "L";
		} 
	} 

	// Exchange Registers Contents
	uint8_t eb = (1 << 8) | (lms << 4) | (1 << 3) | lls;
	
	switch (eb) 
	{
		case 0xC5: mnem = "XGDX"; break;
		case 0xC6: mnem = "XGDY"; break;
		default: mnem = "EXG";
	}
	
	sink << mnem << " ";
	
	if ((eb != 0xC5) && (eb != 0xC6)) 
	{
		sink << srcName << "," << dstName;
	}
	
	return mnem;
	
}

exg_hcs12x.execute = {
/* Legal "rr" value for EBLB::setter and EBLB::getter functions 
 * 0x00:A; 0x01:B; 
 * 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRWord
 * 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
 * 0x04:D; 0x05:X; 0x06:Y; 0x07:SP  
 */

	uint8_t srcSize, dstSize; 
	uint8_t rrSrc, rrDst;
	uint8_t oldCCRLow = cpu->ccr->getCCRLow();
	
	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrSrc = EBLB::EBLBRegs::CCRW;  // src is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx: 
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
			} else {
				rrSrc = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break; 
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrDst = EBLB::EBLBRegs::CCRW; // rrDst is 0x23 register
			break; 
		case EBLB::EBLBMSLSRegs::TMPx: 
			if (lms == EBLB::EBLBMSLSRegs::D) {
				rrDst = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
			} else {
				rrDst = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break; 
		default: rrDst = lls;    
	}
		
	srcSize = EBLB::getRegSize(rrSrc);
	dstSize = EBLB::getRegSize(rrDst);
	
	// Exchange register Contents. There is no sign extension
	/*
	if (sizeof(r1) && sizeof(r2) { (r1) <=> (r2)}
	else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {0x00:(r1) => r2}
	else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) <=> (r2) }
	*/
	
	if ( srcSize == dstSize) 
	{
		// (r1) <=> (r2)
		if (srcSize == 8) 
		{
			cpu->eblb->exchange<uint8_t>(rrSrc,rrDst);
		} 
		else if (srcSize == 16) 
		{
			cpu->eblb->exchange<uint16_t>(rrSrc,rrDst);
		}
	} 
	else if ((srcSize == 8) && (dstSize == 16)) 
	{
		// 0x00:(r1) => r2
		/* if (r2 is D) 0x00:(r1) => D
		 * else 
		 *  if (r1 is A) (r1) => r2H
		 *  else if (r1 is B) (r1) => r2L
		 */
		 if (rrDst == EBLB::EBLBRegs::D /* reg D */)
		 {
		 	cpu->eblb->setter<uint16_t>(rrDst, 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc));
		 }
		 else if (rrSrc == EBLB::EBLBRegs::A)
		 {
		 	uint16_t tmp = cpu->eblb->getter<uint16_t>(rrDst) & 0x00FF;  // get the lower bits
		 	tmp = tmp | (((uint16_t) cpu->eblb->getter<uint8_t>(rrSrc)) << 8);
		 	cpu->eblb->setter<uint16_t>(rrDst, tmp);
		 }
		 else if (rrSrc == EBLB::EBLBRegs::B)
		 {
		 	uint16_t tmp = cpu->eblb->getter<uint16_t>(rrDst) & 0xFF00; // get higher bits
		 	tmp = tmp | ( 0x00FF & cpu->eblb->getter<uint8_t>(rrSrc));
		 	cpu->eblb->setter<uint16_t>(rrDst, tmp);
		 } 
	} 
	else if ((srcSize == 16) && (dstSize == 8)) 
	{
		// (r1[7:0]) <=> (r2)
		/*
		 * if (r1 is D)
		 * 	 if (r2 is A) (B) <=> (A)
		 * 	 else 0xFF => A // r2 is B  
		 * else
		 * 	 if (r2 is A) (r1H) <=> A
		 * 	 else (r1L) <=> B 
		 */		
		 if (rrSrc == EBLB::EBLBRegs::D) {
		 	if (rrDst == EBLB::EBLBRegs::A) {
		 		cpu->eblb->exchange<uint8_t>(EBLB::EBLBRegs::B, EBLB::EBLBRegs::A);
		 	} else if (rrDst == EBLB::EBLBRegs::B) {
		 		cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, 0xFF);
		 	}
		 } else {
		 	if (rrDst == EBLB::EBLBRegs::A) {
		 		uint16_t a16 = ((uint16_t) cpu->eblb->getter<uint16_t>(EBLB::EBLBRegs::A)) << 8;
		 		uint8_t r1h = cpu->eblb->getter<uint16_t>(rrSrc) >> 8;
		 		uint16_t r1l = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
		 		
		 		cpu->eblb->setter<uint16_t>(rrSrc, a16 | r1l);
		 		cpu->eblb->setter<uint8_t>(rrDst, r1h);
		 		
		 	} else if (rrDst == EBLB::EBLBRegs::B) {
		 		uint16_t r1h = cpu->eblb->getter<uint16_t>(rrSrc) & 0xFF00;
		 		uint8_t r1l = cpu->eblb->getter<uint16_t>(rrSrc) & 0x00FF;
		 		uint16_t b16 = 0x00FF & cpu->eblb->getter<uint8_t>(rrDst);
		 		 
		 		cpu->eblb->setter<uint16_t>(rrSrc, r1h | b16);
		 		cpu->eblb->setter<uint16_t>(rrDst, r1l);
		 	}
		 }
	}	
	
	if ((oldCCRLow & 0x40) == 0x00) {
		cpu->ccr->setCCRLow(cpu->ccr->getCCRLow() & 0xBF);
	}

	return getCycles();
}

// *************************** HCS12X - TRANSFER Instructions

// TAP or TFR or TPA or TSX or TSY or TXS or TYS or SEX
op tfr_hcs12x(0xB7[8]:> <:0b0[1]:lms[3]:0b1[1]:lls[3])  

tfr_hcs12x.getCycles = { return 1; }

/*
 * lms sourceRegister index
 * lls destinationRegister index  
 * */
tfr_hcs12x.disasm = {
	string mnem;

	uint8_t rrSrc, rrDst;

	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR: // src is CCRW register
			if (lls == EBLB::EBLBMSLSRegs::A) {
				rrSrc = EBLB::EBLBRegs::CCRH; //0x22;
			} else if (lls == EBLB::EBLBMSLSRegs::B) {
				rrSrc = EBLB::EBLBRegs::CCRL; //0x21;
			} else {
				rrSrc = EBLB::EBLBRegs::CCRW; //0x23;
			}
			break; 
		case EBLB::EBLBMSLSRegs::TMPx: // src is TMP register
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
			} else {
				rrSrc = EBLB::EBLBRegs::TMP3; //0x32; // TMP3
			}
			break; 
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR: // dst is CCRW register
			if (lms == EBLB::EBLBMSLSRegs::A) {
				rrDst = EBLB::EBLBRegs::CCRH; //0x22;
			} else if (lms == EBLB::EBLBMSLSRegs::B) {
				rrDst = EBLB::EBLBRegs::CCRL; //0x21;
			} else {
				rrDst = EBLB::EBLBRegs::CCRW; //0x23;
			}

			break; 
		case EBLB::EBLBMSLSRegs::TMPx: // dst is TMP2 register
			if (lms == EBLB::EBLBRegs::D ) {
				rrDst = EBLB::EBLBRegs::TMP1; //0x30; // TMP1
			} else {
				rrDst = EBLB::EBLBRegs::TMP2; //0x31; // TMP2
			}
			break; 
		default: rrDst = lls;    
	}
	
 	// Transfer register Contents. TFR r1,r2
	
	string srcName = EBLB::getRegName(rrSrc);
	string dstName = EBLB::getRegName(rrDst);
	
	if (lls == EBLB::EBLBMSLSRegs::A ) {
		if (lms == EBLB::EBLBMSLSRegs::CCR ) {
			srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);  
		} 
		else if ((lms != EBLB::EBLBMSLSRegs::B ) && (lms != EBLB::EBLBMSLSRegs::D)) {
			srcName = srcName + "H";
		} 
	} if (lls == EBLB::EBLBMSLSRegs::B) {
		if (lms == EBLB::EBLBMSLSRegs::CCR) {
			srcName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);  
		} 
		else if ((lms != EBLB::EBLBMSLSRegs::A ) && (lms != EBLB::EBLBMSLSRegs::D)) {
			srcName = srcName + "L";
		} 
	} 

	if (lms == EBLB::EBLBMSLSRegs::A) {
		if (lls == EBLB::EBLBMSLSRegs::CCR /* reg CCR */) {
			dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRH);  
		} 
		else if ((lls != EBLB::EBLBMSLSRegs::B) && (lls != EBLB::EBLBMSLSRegs::D)) {
			dstName = dstName + "H";
		} 
	} if (lms == EBLB::EBLBMSLSRegs::B) {
		if (lls == EBLB::EBLBMSLSRegs::CCR) {
			dstName = EBLB::getRegName(EBLB::EBLBRegs::CCRL);  
		} 
		else if ((lls != EBLB::EBLBMSLSRegs::A) && (lls != EBLB::EBLBMSLSRegs::D)) {
			dstName = dstName + "L";
		} 
	} 

	// Transfer Register Content to Another register
	uint8_t eb = (0 << 8) | (lms << 4) | (1 << 3) | lls;
	
	switch (eb) 
	{
		case 0x02: mnem = "TAP"; sink << mnem; break;
		case 0x20: mnem = "TPA"; sink << mnem; break;
		case 0x75: mnem = "TSX"; sink << mnem; break;
		case 0x76: mnem = "TSY"; sink << mnem; break;
		case 0x57: mnem = "TXS"; sink << mnem; break;
		case 0x67: mnem ="TYS"; sink << mnem; break;
		default: mnem = "TFR"; sink << mnem << " " << EBLB::getRegName(rrSrc) << "," << EBLB::getRegName(rrDst); 
	}
	
	return mnem;
}

tfr_hcs12x.execute = {
/* Legal "rr" value for EBLB::setter and EBLB::getter functions 
 * 0x00:A; 0x01:B; 
 * 0x20:CCR; 0x21:CCRlow; 0x22:CCRhigh; 0x23:CCRW 
 * 0x30:TMP1; 0x31:TMP2; 0x32:TMP3;
 * 0x04:D; 0x05:X; 0x06:Y; 0x07:SP  
 */

	uint8_t srcSize, dstSize; 
	uint8_t rrSrc, rrDst;
	
	// Test du num de registre pour choisir TMP1, TMP2, TMP3, CCR, CCRL, CCRH, CCRW
	switch (lms) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrSrc = EBLB::EBLBRegs::CCRW;  // src is 0x23 register
			break;
		case EBLB::EBLBMSLSRegs::TMPx: 
			if (lls == EBLB::EBLBMSLSRegs::D) {
				rrSrc = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
			} else {
				rrSrc = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break; 
		default: rrSrc = lms;  
	}

	switch (lls) {
		case EBLB::EBLBMSLSRegs::CCR:
			rrDst = EBLB::EBLBRegs::CCRW; // rrDst is 0x23 register
			break; 
		case EBLB::EBLBMSLSRegs::TMPx: 
			if (lms == EBLB::EBLBMSLSRegs::D) {
				rrDst = EBLB::EBLBRegs::TMP1; /* src is 0x30 register*/
			} else {
				rrDst = EBLB::EBLBRegs::TMP3; /* src is 0x32 register*/
			}
			break; 
		default: rrDst = lls;    
	}
		
	srcSize = EBLB::getRegSize(rrSrc);
	dstSize = EBLB::getRegSize(rrDst);

	// Transfer Register Content to Another register
	/*
	if (sizeof(r1) && sizeof(r2) { (r1) => r2}
	else if ( (sizeof(r1)==8) && (sizeof(r2)==16) ) {sex:(r1) => r2}
	else if ( (sizeof(r1)==16) && (sizeof(r2)==8) ) { (r1[7:0]) => r2 }
	*/  

	if (srcSize == dstSize) 
	{ 
		/*
		 * if ((r1 is D) && ((r2 is X) || (r2 is Y))) then sex:D => r2
		 * else (r1) => r2 
		 */
		 if ((rrSrc == EBLB::EBLBRegs::D) && ((rrDst == EBLB::EBLBRegs::X) || (rrDst == EBLB::EBLBRegs::Y))) 
		 {
		 	uint16_t tmp = cpu->eblb->getter<uint16_t>(rrSrc);
		 	if ((tmp & 0x8000) == 0x8000) {
		 		cpu->eblb->setter<uint16_t>(rrDst, 0xFFFF);
		 	} else {
		 		cpu->eblb->setter<uint16_t>(rrDst, 0x0000);
		 	}
		 } else {
		 	if (srcSize == 8) {
		 		cpu->eblb->setter<uint8_t>(rrDst, cpu->eblb->getter<uint8_t>(rrSrc));
		 	} else {
		 		cpu->eblb->setter<uint16_t>(rrDst, cpu->eblb->getter<uint16_t>(rrSrc));
		 	}
		 } 
		 
	} else if ((srcSize == 8) && (dstSize == 16))
	{
		/*
		 * if (r2 is D) then sex:(r1) => r2
		 * else 
		 *    if (r1 is A) then (r1) => r2H
		 *    else (r1) => r2L 
		 * */
		 if (rrDst == EBLB::EBLBRegs::D) {
		 	uint8_t tmp = cpu->eblb->getter<uint8_t>(rrSrc);
		 	if ((tmp & 0x80) == 0x80) {
		 		cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) tmp) | 0xFF00);
		 	} else {
		 		cpu->eblb->setter<uint16_t>(rrDst, ((uint16_t) tmp) & 0x00FF);
		 	}
		 } else {
		 	uint8_t r1 = cpu->eblb->getter<uint8_t>(rrSrc);
		 	if (rrSrc == EBLB::EBLBRegs::A) {
		 		uint16_t r2l = cpu->eblb->getter<uint16_t>(rrDst) & 0x00FF;
		 		cpu->eblb->setter<uint16_t>(rrDst, (((uint16_t) r1) << 8) | r2l); 
		 	} else {
		 		uint16_t r2h = cpu->eblb->getter<uint16_t>(rrDst) & 0xFF00;
		 		cpu->eblb->setter<uint16_t>(rrDst, r2h | r1);
		 	}
		 }
	} else if ((srcSize == 16) && (dstSize == 8))
	{
		/*
		 * if (r2 is A) then
		 *   if (r1 is D) then B => A
		 *   else r1H => A
		 * else
		 *   r1L => B
		 */
		 if (rrDst == EBLB::EBLBRegs::A) {
		 	if (rrSrc == EBLB::EBLBRegs::D) {
		 		cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, cpu->eblb->getter<uint8_t>(EBLB::EBLBRegs::B));
		 	} else {
		 		cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::A, (uint8_t) (cpu->eblb->getter<uint8_t>(rrSrc) >> 8));
		 	}
		 } else {
		 	cpu->eblb->setter<uint8_t>(EBLB::EBLBRegs::B, (uint8_t) (cpu->eblb->getter<uint8_t>(rrSrc) & 0x00FF));
		 }
	} 

	return getCycles();
}


