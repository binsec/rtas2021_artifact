//-----------------------------------------------------------------------------

//                           BRANCH INSTRUCTIONS

//------------------------------------------------------------------------------


// BR_COND3 - branch if condition satisfied

op br_cond3(0b110[3]:0b0[1]:sext<32>disp[8]:0b0[1]:cond3[3])

br_cond3.execute={

	if(cpu->EvaluateCond(cond3))
	{
		typename CONFIG::address_t pc = Operation<CONFIG>::GetAddr();
		typename CONFIG::address_t addr= pc+ (disp << 1);
		cpu->SetGPR(REG_PC,addr);
	}

	return true;
}
br_cond3.disasm={

	typename CONFIG::address_t pc = Operation<CONFIG>::GetAddr();
	typename CONFIG::address_t addr= pc+ (disp << 1);
	
	os << "br"<< COND[cond3]<<"\t0x" << std::hex << addr ;
	
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		if(cpu->EvaluateCond(cond3))
		{
			os << " <" << cpu->GetObjectFriendlyName(addr) << ">";
		}	
	}
	if(CONFIG::DISAMBIGUATE_DISASM) os << "\t\t/*cond3*/";
}


// BR_COND4

op br_cond4(0b111[3]:shl<17>disp_20_17[4]:0b0100[4]:shl<16>disp_16[1]:cond4[4]:><:disp_15_0[16])

br_cond4.var disp : {int32_t} = { SignExtend( disp_20_17 | disp_16 | disp_15_0, 21) }

br_cond4.execute={

	if(cpu->EvaluateCond(cond4))
	{
		typename CONFIG::address_t pc=Operation<CONFIG>::GetAddr();
		typename CONFIG::address_t addr = pc+ (disp << 1);
		cpu->SetGPR(REG_PC,addr);
	}

	return true;
}
br_cond4.disasm={

	typename CONFIG::address_t pc=Operation<CONFIG>::GetAddr();
	typename CONFIG::address_t addr = pc+ (disp << 1);
	
	os << "br"<< COND[cond4]<< "\t0x" << std::hex << addr;
	
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		if(cpu->EvaluateCond(cond4))
		{
			os << " <" << cpu->GetObjectFriendlyName(addr) << ">";
		}	
	}
	if(CONFIG::DISAMBIGUATE_DISASM) os << "\t\t/*cond4*/";
}

// RJMP - relative jump

op rjmp(0b110[3]:0b0[1]:disp_7_0[8]:0b1[1]:0b0[1]:shl<8>disp_9_8[2])

rjmp.var disp :{int32_t}={ SignExtend(disp_9_8 | disp_7_0, 10) }

rjmp.var rjmp_addr : {typename CONFIG::address_t}={Operation<CONFIG>::GetAddr()+(disp<<1)}

rjmp.execute={


	cpu->SetGPR(REG_PC,rjmp_addr);

	return true;
}

rjmp.disasm={

	os << "rjmp\t"<< std::hex << disp << "\t\t0x"<< rjmp_addr;
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		os << " <" << cpu->GetFunctionFriendlyName(rjmp_addr) << ">";
	}
}



//------------------------------------------------------------------------------

//                           CALL INSTRUCTIONS

//------------------------------------------------------------------------------


//ACALL - application call

op acall(0b1101[4]:disp8[8]:0b000[3]:0b0[1])

acall.execute={
	
	typename CONFIG::address_t addr = cpu->GetAcba()+ ((uint32_t)disp8 << 2);
	cpu->SetLR(Operation<CONFIG>::GetAddr()+2);
	
       	return cpu->IntLoadWord(REG_PC,addr);
}

acall.disasm={

	os << "acall\t" << std::hex << (int) disp8;
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		typename CONFIG::address_t addr = cpu->GetAcba()+ ((uint32_t)disp8 << 2);
		os << " <" << cpu->GetObjectFriendlyName(addr) << ">";
	}
}

// ICALL - indirect call from subroutineq


op icall(0b010[3]:0b1110[4]:0b10001[5]:rd[4])

icall.execute={
	
	cpu->SetLR(Operation<CONFIG>::GetAddr()+2);

	cpu->SetGPR(REG_PC,cpu->GetGPR(rd));

	return true;
}

icall.disasm={

	os << "icall\t" << REG_NAME[rd];
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		os << " <" << cpu->GetFunctionFriendlyName(cpu->GetGPR(rd)) << ">";
		
	}
}

//MCALL - subroutine call

op mcall(0b111[3]:0b100000001[9]:rp[4]:><:sext<32> disp16[16])

mcall.execute={

	typename CONFIG::address_t addr = (cpu->GetGPR(rp) & 0xFFFFFFFC) + (disp16 << 2);
	cpu->SetLR(Operation<CONFIG>::GetAddr()+4);

	return cpu->IntLoadWord(REG_PC,addr);
}

mcall.disasm={

	os << "mcall\t" << REG_NAME[rp] << "[" << disp16 << "]";
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		typename CONFIG::address_t addr = (cpu->GetGPR(rp) & 0xFFFFFFFC) + (disp16 << 2);
		os << " <" << cpu->GetObjectFriendlyName(addr) << ">";
		
	}
	
}

//RCALL - relative subroutine call

op rcall_a(0b110[3]:0b0[1]:disp_7_0[8]:0b1[1]:0b1[1]:shl<8>disp_9_8[2])

rcall_a.var disp :{int32_t} ={ SignExtend(disp_9_8 | disp_7_0, 10) }

rcall_a.var rcall_target_addr :{typename CONFIG::address_t} ={ Operation<CONFIG>::GetAddr() + (disp << 1) }

rcall_a.execute={

	cpu->SetLR(Operation<CONFIG>::GetAddr()+2);

	cpu->SetGPR( REG_PC, rcall_target_addr);

	return true;
}

rcall_a.disasm={

	os << "rcall\tpc[Ox"<< std::hex << (disp << 1) << "]" << std::dec;

	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		os << " <" << cpu->GetFunctionFriendlyName(rcall_target_addr) << ">";
	}
	if(CONFIG::DISAMBIGUATE_DISASM) os << "\t\t/*disp10*/";
}

op rcall_b(0b111[3]:shl<17>disp_20_17[4]:0b0101[4]:shl<16>disp_16[1]:0b0000[4]:><:disp_15_0[16])

rcall_b.var disp :{int32_t} = {SignExtend(disp_20_17 | disp_16 | disp_15_0, 21) }

rcall_b.var rcall_addr : {typename CONFIG::address_t} = { Operation<CONFIG>::GetAddr() + (disp << 1) }

rcall_b.execute={

	cpu->SetLR(Operation<CONFIG>::GetAddr()+4);
	cpu->SetGPR(REG_PC,rcall_addr);

	return true;
}

rcall_b.disasm={

	os << "rcall\tpc[0x" << std::hex << (disp << 1) << std::dec << "]";
	if(cpu->GetGPR(REG_PC) == Operation<CONFIG>::GetAddr())
	{
		os << " <" << cpu->GetFunctionFriendlyName(rcall_addr) << ">";
	}
	if(CONFIG::DISAMBIGUATE_DISASM) os << "\t\t/*disp21*/";
}

//SCALL - supervisor call                             ## declarer la variable microarchitecture dans cpu.hh 

op scall(0b1101011[7]:0b10011[5]:0b0011[4]) // architecture dependent instruction (see avr32a or avr32b sub-directory)

scall.disasm={

	os << "scall\t";
}

//SSCALL - secure state call         

op sscall(0b1101011[7]:0b10101[5]:0b0011[4])

sscall.execute={


	cpu->SetSS_RAR(Operation<CONFIG>::GetAddr());
	cpu->SetSS_RSR(cpu->GetSR());
	if(CONFIG::ARCH == ARCH_AVR32A)
	{
		cpu->SetGPR(REG_PC,0x80000004);
	}
	else
	{
		cpu->SetGPR(REG_PC,0xA0000004);
	}
	cpu->SetSR_SS(1);
	cpu->SetSR_GM(1);
	if(cpu->GetSR_M()==0) cpu->SetSR_M(0b001);

	return true;
}

sscall.disasm={

	os << "sscall\t";
}

op rete(0b1101011[7]:0b00000[5]:0b0011[4])


// RETE -Return from event handler

//Execution in Application or Supervisor modes will trigger a Privilege Violation exception.

rete.execute={
	switch(cpu->GetSR_M())
	{
		case CONFIG::EXEC_MODE_APPLICATION:
		case CONFIG::EXEC_MODE_SUPERVISOR:
			// Privilege violation
			cpu->SetException(CONFIG::EXC_PRIVILEGE_VIOLATION);
			return false;
		default:
			if(CONFIG::ARCH == ARCH_AVR32A)
			{
				uint32_t sp=cpu->GetSP_sys();
				if(!cpu->LoadSR(sp))return false;
				sp+=4;
				cpu->SetGPR(REG_PC,sp);
				sp+=4;

				switch(cpu->GetSR_M())
				{
					case CONFIG::EXEC_MODE_INT_LEVEL0:
					case CONFIG::EXEC_MODE_INT_LEVEL1:
					case CONFIG::EXEC_MODE_INT_LEVEL2:
					case CONFIG::EXEC_MODE_INT_LEVEL3:
						if(!cpu->IntLoadWord(REG_LR,sp)) return false;
						sp+=4;
						
						if(!cpu->IntLoadWord(REG_R12,sp)) return false;
						sp+=4;
						
						if(!cpu->IntLoadWord(REG_R11,sp)) return false;
						sp+=4;
						
						if(!cpu->IntLoadWord(REG_R10,sp)) return false;
						sp+=4;
						
						if(!cpu->IntLoadWord(REG_R9,sp)) return false;
						sp+=4;
						
						if(!cpu->IntLoadWord(REG_R8,sp)) return false;
						sp+=4;
						
						break;
				}
				cpu->SetSP_sys(sp);
			}
			
			// flags are not affected
			
			cpu->SetSR_L(0);
			
			break;
	}
	
	return true;
}

rete.disasm={

	os << "rete";
}

// RETD - Return from Debug mode

op retd(0b1101011[7]:0b00010[5]:0b0011[4])

retd.execute={

	cpu->SetSRWithExceptionUpdate(cpu->GetRSR_DBG());
	cpu->SetGPR(REG_PC,cpu->GetRAR_DBG());
	
	return true;
}
retd.disasm={

	os << "retd";
}

// RETS – Return from supervisor call

op rets(0b1101011[7]:0b00001[5]:0b0011[4])

rets.execute={

	if(cpu->GetSR_M()==0b000);  // Exception
	else if (cpu->GetSR_M()==0b001)
	{
		if(CONFIG::ARCH == ARCH_AVR32A)
		{
			uint32_t sp = cpu->GetSP_sys();
			if(!cpu->LoadSR(sp))return false;
			sp+=4;
			if(!cpu->IntLoadWord(REG_PC,sp))return false;
			sp+=4;
			cpu->SetSP_sys(sp);
		}
		// others architectures
	}
	else cpu->SetGPR(REG_PC,cpu->GetGPR(REG_LR));
	
	return true;
}
rets.disasm={

	os << "rets";
}

op retss(0b1101011[7]:0b10110[5]:0b0011[4])

retss.execute={

	if(cpu->GetSR_SS()==0); // Issue Privilege Violation Exception
	else
	{
		cpu->SetSRWithExceptionUpdate(cpu->GetSS_RSR());
		cpu->SetGPR(REG_PC,cpu->GetSS_RAR());
	}

	return true;
}
retss.disasm={

	os << "retss";
}

// RET{cond4} – Conditional Return from Subroutine

op ret_cond4(0b010[3]:0b1111[4]:0b0[1]:cond4[4]:rs[4])

ret_cond4.execute={

	if(cpu->EvaluateCond((unsigned int)cond4))
	{
		uint32_t result;	
	
		if((rs!=REG_PC) && (rs!=REG_LR) && (rs!=REG_SP)) { result = cpu->GetGPR(rs); }
		else if (rs==REG_LR) {result=-1;}
		else if (rs==REG_SP) {result=0;}	
		else { result=1;}
		cpu->SetGPR(REG_R12,result);

		cpu->SetSR_V(0);                     // set flags
		cpu->SetSR_N((int32_t)result<0);
		cpu->SetSR_Z(result==0);
		cpu->SetSR_C(0);

		cpu->SetGPR(REG_PC,cpu->GetGPR(REG_LR));
	}

	return true;
}

ret_cond4.disasm={

	os << "ret" << COND[cond4] << "\t";
	if((rs!=REG_PC) && (rs!=REG_LR) && (rs!=REG_SP)) { os << REG_NAME[rs]; }
		else if (rs==REG_LR) {os << "-1";}
		else if (rs==REG_SP) {os << "0";}	
		else { os << "1";}
}

