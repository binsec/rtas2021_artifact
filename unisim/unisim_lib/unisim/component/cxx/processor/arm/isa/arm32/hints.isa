/*
 *  Copyright (c) 2007-2016,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr), Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

       HINTS INSTRUCTIONS

**********************************************/

/*******************************************************************
 * nop instruction
 */

op nop( cond[4]: 0b0011[4]: 0b0010[4]: 0b0000[4]: 0b1111[4]: 0b0000[4]: idx[8] );

nop.disasm = {
  buffer << "nop" << DisasmCondition(cond) << "\t{" << idx << "}";
};

nop.execute = {
  if (unlikely( not CheckCondition(cpu, cond) )) return;
};

/*
 * end of nop instruction
 *******************************************************************/

/*******************************************************************
 * yield instruction
 */

op yield( cond[4]: 0b0011[4]: 0b0010[4]: 0b0000[4]: 0b1111[4]: 0b0000[4]: 0b00000001[8] );

yield.disasm = {
  buffer << "yield" << DisasmCondition(cond);
};

/*
 * end of yield instruction
 *******************************************************************/

/*******************************************************************
 * wfe instruction
 */

op wfe( cond[4]: 0b0011[4]: 0b0010[4]: 0b0000[4]: 0b1111[4]: 0b0000[4]: 0b00000010[8] );

wfe.disasm = {
  buffer << "wfe" << DisasmCondition(cond);
};

/*
 * end of wfe instruction
 *******************************************************************/

/*******************************************************************
 * wfi instruction
 */

op wfi( cond[4]: 0b0011[4]: 0b0010[4]: 0b0000[4]: 0b1111[4]: 0b0000[4]: 0b00000011[8] );

wfi.disasm = {
  buffer << "wfi" << DisasmCondition(cond);
};

wfi.execute = {
  // if (HaveVirtExt() and not IsSecure() and not CurrentModeIsHyp() and HCR.TWI) {
  //   HSRString = Zeros(25);
  //   HSRString<0> = '0';
  //   WriteHSR('000001', HSRString);
  //   TakeHypTrapException();
  // } else
  
  cpu.WaitForInterrupt();
};

/*
 * end of wfi instruction
 *******************************************************************/

/*******************************************************************
 * sev instruction
 */

op sev( cond[4]: 0b0011[4]: 0b0010[4]: 0b0000[4]: 0b1111[4]: 0b0000[4]: 0b00000100[8] );

sev.disasm = {
  buffer << "sev" << DisasmCondition(cond);
};

/*
 * end of sev instruction
 *******************************************************************/

/*******************************************************************
 * dbg instruction
 */

op dbg( cond[4]: 0b0011[4]: 0b0010[4]: 0b0000[4]: 0b1111[4]: 0b0000[4]: 0b1111[4]: idx[4] );

dbg.disasm = {
  buffer << "dbg" << DisasmCondition(cond) << '\t' << DisasmI(idx);
};

/*
 * end of dbg instruction
 *******************************************************************/

/* DMB instruction */

op dmb( 0b1111[4]: 0b01010111[8]: 0b1111[4]: 0b1111[4]: 0b0000[4]: 0b0101[4]: opt[4] );
dmb.var reject : {Reject} = {(opt & 2) == 0};

dmb.disasm = {
  buffer << "dmb\t" << DisasmBarrierOption( opt );
};

dmb.execute = {
};

/* DSB instruction */

op dsb( 0b1111[4]: 0b01010111[8]: 0b1111[4]: 0b1111[4]: 0b0000[4]: 0b0100[4]: opt[4] );
dsb.var reject : {Reject} = {(opt & 2) == 0};

dsb.disasm = {
  buffer << "dsb\t" << DisasmBarrierOption( opt );
};

dsb.execute = {
};

/* ISB instruction */

op isb( 0b1111[4]: 0b01010111[8]: 0b1111[4]: 0b1111[4]: 0b0000[4]: 0b0110[4]: opt[4] );
isb.var reject : {Reject} = {opt != 15};

isb.disasm = {
  buffer << "isb\t" << DisasmBarrierOption( opt );
};

isb.execute = {
};

