/*
 *  Copyright (c) 2007-2016,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr), Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

      STATUS REGISTER ACCESS INSTRUCTIONS

**********************************************/

/*******************************************************************
 * mrs instruction
 */

op mrs( cond[4]: 0b00010[5]: shl <6> sr2[1]: 0b00[2]: sr0[4]: rd[4]: 0b00[2]: shl <4> sr1[2]: 0b00000000[8] );
mrs.var sr : {uint8_t} = {sr2|sr1|sr0};
mrs.var reject : {Reject} = {(rd == 15)};

mrs.disasm = {
  buffer << "mrs" << DisasmCondition(cond) << '\t' << DisasmRegister(rd) << ", " << DisasmSpecReg(sr);
};

mrs.execute = {
  if (unlikely( not CheckCondition(cpu, cond) )) return;
  
  switch (sr) {
  default: cpu.UnpredictableInsnBehaviour(); break;
  case 0b0001111: cpu.SetGPR(rd, cpu.GetCPSR()); break;
  case 0b1001111: cpu.SetGPR(rd, cpu.CurrentMode().GetSPSR()); break;
  
  case 0b0100000: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 8)); break;
  case 0b0100001: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 9)); break;
  case 0b0100010: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 10)); break;
  case 0b0100011: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 11)); break;
  case 0b0100100: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 12)); break;
  case 0b0100101: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 13)); break;
  case 0b0100110: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.USER_MODE, 14)); break;
  
  case 0b0101000: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 8)); break;
  case 0b0101001: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 9)); break;
  case 0b0101010: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 10)); break;
  case 0b0101011: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 11)); break;
  case 0b0101100: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 12)); break;
  case 0b0101101: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 13)); break;
  case 0b0101110: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.FIQ_MODE, 14)); break;
  case 0b0110000: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.IRQ_MODE, 14)); break;
  case 0b0110001: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.IRQ_MODE, 13)); break;
  
  case 0b0110010: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.SUPERVISOR_MODE, 14)); break;
  case 0b0110011: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.SUPERVISOR_MODE, 13)); break;
  
  case 0b0110100: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.ABORT_MODE, 14)); break;
  case 0b0110101: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.ABORT_MODE, 13)); break;
  
  case 0b0110110: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.UNDEFINED_MODE, 14)); break;
  case 0b0110111: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.UNDEFINED_MODE, 13)); break;
  
  case 0b0111100: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.MONITOR_MODE, 14)); break;
  case 0b0111101: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.MONITOR_MODE, 13)); break;
  
  case 0b0111110: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.HYPERVISOR_MODE, 14)); break;
  case 0b0111111: cpu.SetGPR(rd, cpu.GetBankedRegister(cpu.HYPERVISOR_MODE, 13)); break;
  
  case 0b1101110: cpu.SetGPR(rd, cpu.GetMode(cpu.FIQ_MODE).GetSPSR()); break;
  case 0b1110000: cpu.SetGPR(rd, cpu.GetMode(cpu.IRQ_MODE).GetSPSR()); break;
  case 0b1110010: cpu.SetGPR(rd, cpu.GetMode(cpu.SUPERVISOR_MODE).GetSPSR()); break;
  case 0b1110100: cpu.SetGPR(rd, cpu.GetMode(cpu.ABORT_MODE).GetSPSR()); break;
  case 0b1110110: cpu.SetGPR(rd, cpu.GetMode(cpu.UNDEFINED_MODE).GetSPSR()); break;
  case 0b1111100: cpu.SetGPR(rd, cpu.GetMode(cpu.MONITOR_MODE).GetSPSR()); break;
  case 0b1111110: cpu.SetGPR(rd, cpu.GetMode(cpu.HYPERVISOR_MODE).GetSPSR()); break;
  }
};

/*
 * end of mrs instruction
 *******************************************************************/

/*******************************************************************
 * msr instruction
 */

op msr_reg( cond[4]: 0b00010[5]: shl <6> sr2[1]: 0b10[2]: sr0[4]: 0b1111[4]: 0b00[2]: shl <4> sr1[2]: 0b0000[4]: rn[4] );
msr_reg.var sr : {uint8_t} = {sr2|sr1|sr0};

msr_reg.disasm = {
  buffer << "msr" << DisasmCondition(cond) << '\t' << DisasmSpecReg(sr) << ", " << DisasmRegister(rn);
};

op msr_reg_psr( cond[4]: 0b00010[5]: write_spsr[1]: 0b10[2]: mask[4]: 0b1111[4]: 0b00[2]: 0b00[2]: 0b0000[4]: rn[4] );
msr_reg_psr.var psr_mask : {uint32_t} = {(((mask*0x00204081)&0x01010101)*0xff) &
                                         (write_spsr ? -1 : ~0x0700fc20) /* Does not affect execution state bits other than E */};

msr_reg_psr.disasm = {
  buffer << "msr" << DisasmCondition(cond) << '\t' << DisasmPSRMask(write_spsr,mask) << ", " << DisasmRegister(rn);
};

msr_reg_psr.execute = {
  if (unlikely( not CheckCondition(cpu, cond) )) return;
  
  if (write_spsr) {
    SPSRWriteByInstr( cpu, cpu.GetGPR(rn), psr_mask );
  } else {
    CPSRWriteByInstr( cpu, cpu.GetGPR(rn), psr_mask );
  }
};

op msr_imm_psr( cond[4]: 0b00110[5]: write_spsr[1]: 0b10[2]: mask[4]: 0b1111[4]: shl<1> imr[4]: imb[8] );
msr_imm_psr.var imm : {uint32_t} = {unisim::util::arithmetic::RotateRight( uint32_t( imb ), imr )};
msr_imm_psr.var psr_mask : {uint32_t} = {(((mask*0x00204081)&0x01010101)*0xff) &
                                         (write_spsr ? -1 : ~0x0700fc20) /* Does not affect execution state bits other than E */};

msr_imm_psr.disasm = {
  buffer << "msr" << DisasmCondition(cond) << '\t' << DisasmPSRMask(write_spsr,mask) << ", #"
         << std::hex << std::showbase << imm << std::noshowbase << std::dec;
};

msr_imm_psr.execute = {
  if (unlikely( not CheckCondition(cpu, cond) )) return;
  
  typedef typename ARCH::U32 U32;
  if (write_spsr) {
    SPSRWriteByInstr( cpu, U32(imm), psr_mask );
  } else {
    CPSRWriteByInstr( cpu, U32(imm), psr_mask );
  }
};

/*
 * end of msr instruction
 *******************************************************************/
