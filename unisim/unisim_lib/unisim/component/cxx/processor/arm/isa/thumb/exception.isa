/*
 *  Copyright (c) 2007-2016,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr), Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 */
 
/**********************************************

        THUMB EXCEPTION INSTRUCTIONS

**********************************************/

/*******************************************************************
 * swi (software interrupt) instruction; also known as: svc (supervisor call) in armv7
 * NOTE: this instruction is used to make the system calls
 */

op swi( 0b11011111[8]: imm[8] );

swi.disasm = {
  buffer << "swi\t" << DisasmI(imm);
};

swi.execute = {
  if (unlikely( not CheckCondition(cpu, cpu.itcond()) )) return;
  
  cpu.CallSupervisor( imm );
};

/*
 * end of swi (software interrupt) instruction
 *******************************************************************/

/*******************************************************************
 * bkpt (breakpoint) instruction
 */

op bkpt( 0b10111110[8]: imm[8] );

bkpt.disasm = {
  buffer << "bkpt\t0x"
         << std::hex << std::setfill('0') << std::setw(4) << imm
         << std::setw(0) << std::setfill(' ') << std::dec;
};

bkpt.execute = {
  if (unlikely( not CheckCondition(cpu, cpu.itcond()) )) return;
  
  cpu.BKPT( imm );
};

/*
 * end of bkpt (breakpoint) instruction
 *******************************************************************/

{ ARCH::Config::insns6 }:                               \
op cpsi( 0b10110110011[11]: dis[1]: 0[1]: a[1]: i[1]: f[1] );
cpsi.var reject : {Reject} = {(not (a or i or f))};
cpsi.var psr_mask : {uint32_t} = {a*A.getmask<uint32_t>()|i*I.getmask<uint32_t>()|f*F.getmask<uint32_t>()};
cpsi.var psr_bits : {uint32_t} = {dis*(A.getmask<uint32_t>()|I.getmask<uint32_t>()|F.getmask<uint32_t>())};

cpsi.disasm = {
  buffer << "cps" << (dis?"id":"ie") << '\t' << (a?"a":"") << (i?"i":"") << (f?"f":"");
};

cpsi.execute = {
  typedef typename ARCH::U32 U32;
  
  if (unlikely( cpu.Test(cpu.CPSR().Get(M) == U32(cpu.USER_MODE)) ))
    return;
  
  // CPSRWriteByInstr() checks for illegal mode changes
  CPSRWriteByInstr( cpu, U32(psr_bits), psr_mask );
};

