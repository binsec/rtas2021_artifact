/*
 *  Copyright (c) 2009,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 *          Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* List of low-power control operations:
 * - IDLE2        low-power idle
 * - LOPOWER      divide clock by 16
 * - MAXSPEED     restore clock to regular speed
 */

/**********************************************************
 * IDLE2 (low-power idle)
 * op IDLE2(0b000[3]:0b001100[6]:0b001[23])
 */

op IDLE2(0b000[3]:0b001100[6]:0b001[23])

IDLE2.disasm = {
	os << "IDLE2";
	return true;
}

IDLE2.execute = {
	// Check whether the instruction does not break some rules (pg 7-6 and 7-9)
	// Note: this instruction can't be one of the three instructions after a delayed branch
	if(unlikely(cpu.HasPendingBranch()))
	{
		throw MisplacedOpcodeException<CONFIG, DEBUG>(this);
	}

	// Set ST[GIE]
	cpu.SetST_GIE();

	// Enter idle mode 2
	cpu.Idle(2);
}

/* end of IDLE2 (low-power idle)
 **********************************************************/

/**********************************************************
 * LOPOWER (divide clock by 16)
 * op LOPOWER(0b000[3]:0b100001[6]:0b001[23])
 */

op LOPOWER(0b000[3]:0b100001[6]:0b001[23])

LOPOWER.disasm = {
	os << "LOPOWER";
	return true;
}

LOPOWER.execute = {
	/* this instruction has no effect */
}

/* end of LOPOWER (divide clock by 16)
 **********************************************************/

/**********************************************************
 * MAXSPEED (restore clock to regular speed)
 * op MAXSPEED(0b000[3]:0b100001[6]:0[23])
 */

op MAXSPEED(0b000[3]:0b100001[6]:0[23])

MAXSPEED.disasm = {
	os << "MAXSPEED";
	return true;
}

MAXSPEED.execute = {
	/* this instruction has no effect */
}

/* end of MAXSPEED (restore clock to regular speed)
 **********************************************************/

