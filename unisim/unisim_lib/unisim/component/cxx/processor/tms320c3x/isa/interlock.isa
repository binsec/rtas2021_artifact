/*
 *  Copyright (c) 2009,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Daniel Gracia Perez (daniel.gracia-perez@cea.fr)
 *          Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* List of interlocked-operations:
 * - LDFI         load floating-point value, interlocked
 * - LDII         load integer, interlocked
 * - SIGI         signal, interlocked
 * - STFI         store floating-point value, interlocked
 * - STII         store integer, interflocked
 */

/**********************************************************
 * LDFI (load floating-point value, interlocked)
 * op LDFI(0b000[3]:0b001111[6]:g[2]:dst[5]:src[16])
 */

op LDFI_dir  (0b000[3]:0b001111[6]:0b01[2]:dst[5]:direct[16])
op LDFI_indir(0b000[3]:0b001111[6]:0b10[2]:dst[5]:mod[5]:ar[3]:disp[8])

LDFI_dir.execute = {
	// no need to check the operands, they must be valid
	
	// Compute the source operand effective address
	typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);
	
	// Read the source operand from memory
	uint32_t src_value = cpu.IntLoad(ea, true /* interlocked */);
	
	// get destination register
	Register& dst_reg = cpu.GetExtReg(dst);
	
	dst_reg.SetFromSinglePrecisionFPFormat(src_value);
	
	// Generate flags (into ST)
	cpu.GenFlags(
				 dst_reg,
				 M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
				 M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
				 0, 0, dst_reg.IsNeg()
				 );
}

LDFI_indir.execute = {
	// no need to check the operands, they must be valid
	
	// Check that indirect addressing mode is valid and compute the effective address of the source operand
	typename CONFIG::address_t ea;        // The effective address
	bool update_ar;                       // Whether to update ARn
	typename CONFIG::address_t output_ar; // New value of ARn if it is updated
	
	if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}
	
	if(update_ar)
	{
		// Write back ARn
		cpu.SetAR23_0(ar, output_ar);
	}
	
	// get destination register
	Register& dst_reg = cpu.GetExtReg(dst);
	
	// Read the source operand from memory
	uint32_t src_value = cpu.IntLoad(ea, true /* interlocked */);
	
	dst_reg.SetFromSinglePrecisionFPFormat(src_value);
	
	// Generate flags (into ST)
	cpu.GenFlags(dst_reg,
				 M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
				 M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // or mask
				 0, 0, dst_reg.IsNeg()
				 );
}

/* end of LDFI (load floating-point value, interlocked)
 **********************************************************/

/**********************************************************
 * LDII (load integer, interlocked)
 * op LDII(0b000[3]:0b010001[6]:g[2]:dst[5]:src[16])
 */

op LDII_dir  (0b000[3]:0b010001[6]:0b01[2]:dst[5]:direct[16])
op LDII_indir(0b000[3]:0b010001[6]:0b10[2]:dst[5]:mod[5]:ar[3]:disp[8])

LDII_dir.execute = {
	// Check whether the destination register number is valid
	if(unlikely(!cpu.HasReg(dst)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}

	// Compute the effective address
	typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

	// Load the word from memory
	uint32_t result = cpu.IntLoad(ea, true /* interlocked */);
	uint8_t sign = (int32_t) result < 0;

	// Write back result
	cpu.SetReg(dst, result);

	// Check whether destination operand is an extended precision register
	if(cpu.IsExtReg(dst))
	{
		// Generate flags (into ST)
		cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z,  // or mask
			sign
		);
	}
}

LDII_indir.execute = {
	// Check whether the destination register number is valid
	if(unlikely(!cpu.HasReg(dst)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}

	// Check that indirect addressing mode is valid and compute the effective address
	typename CONFIG::address_t ea;        // The effective address
	bool update_ar;                       // Whether to update ARn
	typename CONFIG::address_t output_ar; // New value of ARn if it is updated

	if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}

	if(update_ar)
	{
		// Write back ARn
		cpu.SetAR23_0(ar, output_ar);
	}

	// Load the word from memory
	uint32_t result = cpu.IntLoad(ea, true /* interlocked */);
	uint8_t sign = (int32_t) result < 0;

	// Write back result
	cpu.SetReg(dst, result);

	// Check whether destination operand is an extended precision register
	if(cpu.IsExtReg(dst))
	{
		// Generate flags (into ST)
		cpu.GenFlags(
			result,
			M_ST_UF | M_ST_N | M_ST_Z | M_ST_V,  // reset mask
			M_ST_N | M_ST_Z,  // or mask
			sign
		);
	}
}

/* end of LDII (load integer, interlocked)
 **********************************************************/

/**********************************************************
 * SIGI (signal, interlocked)
 * op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])
 */

op SIGI(0b000[3]:0b101100[6]:0b00[2]:0[21])

SIGI.execute = {
	throw UnimplementedOpcodeException<CONFIG, DEBUG>(this);
}

/* end of SIGI (signal, interlocked)
 **********************************************************/

/**********************************************************
 * STFI (store floating-point value, interlocked)
 * op STFI(0b000[3]:0b101001[6]:g[2]:src[5]:dst[16])
 */

op STFI_dir  (0b000[3]:0b101001[6]:0b01[2]:src[5]:direct[16])
op STFI_indir(0b000[3]:0b101001[6]:0b10[2]:src[5]:mod[5]:ar[3]:disp[8])

STFI_dir.execute = {
	// no need to check the operands, they must be valid
	
	// get source register
	Register& src_reg = cpu.GetExtReg(src);
	
	// Compute the source operand effective address
	typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);
	
	// get a 32bits version of the source register (containing a float)
	uint32_t result = src_reg.GetSinglePrecisionFPFormat();
	
	// store the word into memory
	cpu.IntStore(ea, result, true /* interlocked */);
	
	// no flags to generate
}

STFI_indir.execute = {
	// no need to check the operands, they must be valid
	
	// Check that indirect addressing mode is valid and compute the effective address
	typename CONFIG::address_t ea;        // The effective address
	bool update_ar;                       // Whether to update ARn
	typename CONFIG::address_t output_ar; // New value of ARn if it is updated
	
	if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}
	
	if(update_ar)
	{
		// Write back ARn
		cpu.SetAR23_0(ar, output_ar);
	}
	
	// get source register
	Register& src_reg = cpu.GetExtReg(src);

	// get a 32bits version of the source register (containing a float)
	uint32_t result = src_reg.GetSinglePrecisionFPFormat();
	
	// Store the word into memory
	cpu.IntStore(ea, result, true /* interlocked */);
}

/* end of STFI (store floating-point value, interlocked)
 **********************************************************/

/**********************************************************
 * STII (store integer, interflocked)
 * op STII(0b000[3]:0b101011[6]:g[2]:src[5]:dst[16])
 */

op STII_dir  (0b000[3]:0b101011[6]:0b01[2]:src[5]:direct[16])
op STII_indir(0b000[3]:0b101011[6]:0b10[2]:src[5]:mod[5]:ar[3]:disp[8])

STII_dir.execute = {
	// Check whether the source register number is valid
	if(unlikely(!cpu.HasReg(src)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}

	// Read the source operand
	uint32_t result = cpu.GetReg(src);

	// Compute the effective address
	typename CONFIG::address_t ea = cpu.ComputeDirEA(direct);

	// Store the word into memory
	cpu.IntStore(ea, result, true /* interlocked */);
}

STII_indir.execute = {
	// Check whether the source register number is valid
	if(unlikely(!cpu.HasReg(src)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}

	// Check that indirect addressing mode is valid and compute the effective address
	typename CONFIG::address_t ea;        // The effective address
	bool update_ar;                       // Whether to update ARn
	typename CONFIG::address_t output_ar; // New value of ARn if it is updated

	if(unlikely(!cpu.ComputeIndirEA(ea, update_ar, output_ar, mod, ar, disp)))
	{
		throw BogusOpcodeException<CONFIG, DEBUG>(this);
	}

	if(update_ar)
	{
		// Write back ARn
		cpu.SetAR23_0(ar, output_ar);
	}

	// Read the source operand
	uint32_t result = cpu.GetReg(src);

	// Store the word into memory
	cpu.IntStore(ea, result, true /* interlocked */);
}

/* end of STII (store integer, interflocked)
 **********************************************************/
