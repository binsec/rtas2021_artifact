/*
 *  Copyright (c) 2007-2020,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without 
 *  modification, are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, 
 *     this list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific 
 *     prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
 *  ARE DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY 
 *  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
 *  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; 
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND 
 *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
 *  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */

set codetype scalar;
set endianness big;
set addressclass {uint32_t};
set fields_order descending;

template <{class} {t_Arch_t}>

namespace SSv8

decl {
#include <iosfwd>
#include <inttypes.h>
}

impl {
#include <unisim/component/cxx/processor/sparc/asi.hh>
#include <unisim/component/cxx/processor/sparc/trap.hh>
#include <iostream>
#include <cstdlib>

using namespace std;
}

action {void} execute( {t_Arch_t&} {sparcv8} ) {
  std::cerr << "Unknown instruction:";
  this->disasm( std::cerr, sparcv8.m_pc );
  std::cerr << std::endl;
  exit( -1 );
}

action {void} disasm( {std::ostream&} {os}, {uint32_t} {pc} ) {
  os << "?";
}

include "unisim/component/cxx/processor/sparc/isa/sv8/memory.isa"
include "unisim/component/cxx/processor/sparc/isa/sv8/integer.isa"
include "unisim/component/cxx/processor/sparc/isa/sv8/control.isa"
include "unisim/component/cxx/processor/sparc/isa/sv8/special.isa"
include "unisim/component/cxx/processor/sparc/isa/sv8/floating-point.isa"
