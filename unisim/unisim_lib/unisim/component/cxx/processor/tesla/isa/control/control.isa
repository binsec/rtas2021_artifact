/*
 *  Copyright (c) 2009,
 *  University of Perpignan (UPVD),
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of UPVD nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Sylvain Collange (sylvain.collange@univ-perp.fr)
 */

namespace unisim::component::cxx::processor::tesla::isa::control
set endianness little
set addressclass {typename CONFIG::address_t}
template <{class} {CONFIG}>

decl {
#include <unisim/component/cxx/processor/tesla/cpu.hh>
#include <unisim/component/cxx/processor/tesla/exec.hh>
#include <unisim/component/cxx/processor/tesla/disasm.hh>
#include <unisim/component/cxx/processor/tesla/flags.hh>
//#include <unisim/component/cxx/processor/tesla/operation.hh>

namespace unisim {
namespace component {
namespace cxx {
namespace processor {
namespace tesla {

template<class CONFIG>
class CPU;

template<class CONFIG>
class Instruction;

namespace isa {
namespace control {
using namespace unisim::component::cxx::processor::tesla;
}
}

} // end of namespace tesla 
} // end of namespace processor
} // end of namespace cxx
} // end of namespace component
} // end of namespace unisim

}

impl {
#include <unisim/component/cxx/processor/tesla/instruction.hh>
}

var is_long : { bool }
var is_end : { bool }
var is_join : { bool }
var is_flow : { bool }

constructor action init() {
}

action {void} disasm({ostream&} {os}) {
	if(is_end) {
		os << ".end";
	}
	else if(is_join) {
		os << ".join";
	}
	if(!is_long) {
		os << ".half";
	}
}

// template
op long_instruction(?[30]:marker[2]:\
	?[30]:flow[1]:/*long*/1[1])

long_instruction.init = {
	typedef Operation<CONFIG> inherited;
	inherited::is_long = true;
	inherited::is_end = (marker == 1);
	inherited::is_join = (marker == 2);
	inherited::is_flow = flow;
}

op short_instruction( \
	?[30]:flow[1]:/*long*/0[1])

short_instruction.init = {
	typedef Operation<CONFIG> inherited;
	inherited::is_long = false;
	inherited::is_end = false;
	inherited::is_join = false;
	inherited::is_flow = flow;
}

