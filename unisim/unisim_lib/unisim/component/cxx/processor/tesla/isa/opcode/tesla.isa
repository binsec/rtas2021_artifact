/*
 *  Copyright (c) 2009,
 *  University of Perpignan (UPVD),
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of UPVD nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Sylvain Collange (sylvain.collange@univ-perp.fr)
 */
 
namespace unisim::component::cxx::processor::tesla::isa::opcode
set codetype scalar
set endianness little

set addressclass {typename CONFIG::address_t}
template <{class} {CONFIG}>

// Hugly hack
inheritance {public} {unisim::component::cxx::processor::tesla::Operation<CONFIG>} = {_addr, _code}


decl {
//#include <unisim/component/cxx/processor/tesla/cpu.hh>
#include <unisim/component/cxx/processor/tesla/exec.hh>
#include <unisim/component/cxx/processor/tesla/disasm.hh>
#include <unisim/component/cxx/processor/tesla/flags.hh>
//#include <unisim/component/cxx/processor/tesla/instruction.hh>
#include <unisim/component/cxx/processor/tesla/operation.hh>

namespace unisim {
namespace component {
namespace cxx {
namespace processor {
namespace tesla {

template<class CONFIG>
class CPU;

template<class CONFIG>
class Instruction;

namespace isa {
namespace opcode {
using namespace unisim::component::cxx::processor::tesla;
}
}

} // end of namespace tesla 
} // end of namespace processor
} // end of namespace cxx
} // end of namespace component
} // end of namespace unisim


}


impl {
#include <unisim/component/cxx/processor/tesla/instruction.hh>
#include <unisim/component/cxx/processor/tesla/exec.tcc>
#include <unisim/component/cxx/processor/tesla/flags.tcc>
#include <unisim/component/cxx/processor/tesla/operation.tcc>

using namespace unisim::component::cxx::processor::tesla;

}

action {void} read({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> *} {insn}) {
	if(this->op_type[OpSrc1] != DT_NONE) {
		this->src1->read(cpu, insn);
	}
	if(this->op_type[OpSrc2] != DT_NONE) {
		this->src2->read(cpu, insn);
	}
	if(this->op_type[OpSrc3] != DT_NONE) {
		this->src3->read(cpu, insn);
	}
}

action {void} execute({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> *} {insn}) {
	throw IllegalInstructionException<CONFIG>();
}

action {void} write({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> *} {insn}) {
	if(this->op_type[OpDest] != DT_NONE) {
		this->dest->write(cpu, insn, insn->Mask());
	}
}

action {void} writePred({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> *} {insn}) {
	if(this->op_type[OpDest] == DT_U32) {
		insn->SetPredI32();
	}
	else if(this->op_type[OpDest] == DT_U16) {
		insn->SetPredI16();
	}
	else if(this->op_type[OpDest] == DT_F32) {
		insn->SetPredF32();
	}
}

action {void} disasm({CPU<CONFIG> *} {cpu}, {Instruction<CONFIG> const *} {insn}, {ostream&} {buffer}) {
	buffer << "???";
}

//var op_type : { DataTypeArray }

constructor action init() {
    // Asserting here would prevent disasm of unknown instructions ("???")
	//assert(false);
	this->op_type[OpDest] = DT_U32;
	this->op_type[OpSrc1] = DT_U32;
	this->op_type[OpSrc2] = DT_U32;
	this->op_type[OpSrc3] = DT_U32;
}

action classify({typename CONFIG::operationstats_t *} {stats}) {
}

include "isa/opcode/fp32.isa"
include "isa/opcode/integer.isa"
include "isa/opcode/mov.isa"
include "isa/opcode/branch.isa"
include "isa/opcode/fp64.isa"

