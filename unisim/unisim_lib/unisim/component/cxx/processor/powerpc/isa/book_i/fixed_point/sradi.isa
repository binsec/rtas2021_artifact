/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* Shift Right Algebraic Doubleword Immediate */
op sradi(31[6]:rs[5]:ra[5]:sh1[5]:413[9]:shl<5> sh0[1]:rc[1]);
sradi.var sh : {unsigned} = {sh0|sh1};

sradi.execute = {
	// Read the input operands
	S64 s = S64( cpu->GetGPR(rs) );
	
	// Compute the result
	S64 result = s >> sh, shifted_out( (int64_t(1) << sh) - 1 );

	XER& xer = cpu->GetXER();
	xer.Set<XER::CA>((s < S64(0)) and ((s & shifted_out) != S64(0)));
	
	// Write back the result
	cpu->SetGPR(ra, UINT(result));
	
	if(unlikely(rc))
	{
		// Generate CR0: CR0[SO]=XER[SO] CR0[LT]=(result<0) CR0[GT]=(result>0) CR0[EQ]=(result==0)
		CR& cr = cpu->GetCR();
		cr.Set<CR::CR0::SO>(xer.Get<XER::SO>());
		cr.Set<CR::CR0::LT>(result < S64(0));
		cr.Set<CR::CR0::GT>(result > S64(0));
		cr.Set<CR::CR0::EQ>(result == S64(0));
	}
	
	return true;
};

sradi.disasm = {
	os << "sradi" << (rc ? "." : "") << " " << GPRPrint(ra) << ", " << GPRPrint(rs) << ", " << unsigned(sh);
};

specialize sradi(rc=0);
specialize sradi(rc=1);
