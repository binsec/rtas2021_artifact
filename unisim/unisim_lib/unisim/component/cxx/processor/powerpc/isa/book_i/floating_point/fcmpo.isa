/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
/* Floating Compare Ordered  */
op fcmpo(63[6]:crfD[3]:?[2]:fa[5]:fb[5]:32[10]:?[1]);

fcmpo.execute = {
	if(not CONFIG::HAS_FPU)
	{
		cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
		return false;
	}
	if(unlikely(not cpu->GetMSR().Get<CPU::MSR::FP>()))
	{
		cpu->ThrowException<CPU::FloatingPointUnavailableInterrupt::FloatingPointUnavailable>();
		return false;
	}

	// Read the input operands
	FPSCR& fpscr = cpu->GetFPSCR();
	SoftDouble const& a = cpu->GetFPR(fa);
	SoftDouble const& b = cpu->GetFPR(fb);
	
	// Do the floating point comparison
	unsigned c;
	switch (a.compare(b))
	{
		case SoftDouble::CRNaN: c = 1; break;
		case SoftDouble::CRLess: c = 8; break;
		case SoftDouble::CREqual: c = 2; break;
		case SoftDouble::CRGreater: c = 4; break;
		default:
			throw "Internal error";
	}

	// Generate FPCC
	fpscr.Set<FPSCR::FPCC>(UINT(c));
	
	// Generate VXSNAN and VXVC
	if (unlikely(a.isQNaN() or b.isQNaN()))
	{
		if (unlikely(a.isSNaN() or b.isSNaN()))
		{
			fpscr.SetInvalid(FPSCR::VXSNAN());
			if (not cpu->CheckFloatingPointException())
				return false;
		}
		fpscr.SetException(FPSCR::VXVC());
	}

	if (not cpu->CheckFloatingPointException())
		return false;

	// CR[crfD] <- c
	CR& cr = cpu->GetCR();
	switch(crfD)
	{
	case 0: cr.Set<CR::CR0>(c); break;
	case 1: cr.Set<CR::CR1>(c); break;
	case 2: cr.Set<CR::CR2>(c); break;
	case 3: cr.Set<CR::CR3>(c); break;
	case 4: cr.Set<CR::CR4>(c); break;
	case 5: cr.Set<CR::CR5>(c); break;
	case 6: cr.Set<CR::CR6>(c); break;
	case 7: cr.Set<CR::CR7>(c); break;
	}
	
	return true;
};

fcmpo.disasm = {
	os << "fcmpo " << CRPrint(crfD) << ", " << FPRPrint(fa) << ", " << FPRPrint(fb);
};

