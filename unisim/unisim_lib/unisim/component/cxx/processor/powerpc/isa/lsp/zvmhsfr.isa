/*
 *  Copyright (c) 2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

impl {
#include <unisim/component/cxx/processor/powerpc/isa/lsp/lsp.hh>
}

/* Vector multiply halfwords, {upper/lower. lower/lower, upper/upper,
   exchanged/lower}, signed fractional round (zvmh{ul,ll,uu,xl}sfr):
 * - zvmhulsfr
 * - zvmhllsfr
 * - zvmhuusfr
 * - zvmhxlsfr
 */
op zvmhsfr(4[6]:rd[5]:ra[5]:rb[5]:0b1011[4]:hs[2]:0b11[2]:0b00[2]:0b1[1]) /* hs in {00="ul",01="ll",10="uu",11="xl"} */
zvmhsfr.execute = {
	cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
	return false;
}
zvmhsfr.disasm = {
	os << "zvmh" << LSP_HS_UPPER_LOWER_EXCHANGED(hs) << "sfr " << GPRPrint(rd) << ", " << GPRPrint(ra) << ", " << GPRPrint(rb);
}

specialize zvmhsfr(hs=0)
specialize zvmhsfr(hs=1)
specialize zvmhsfr(hs=2)
specialize zvmhsfr(hs=3)
