/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
/* Move To Condition Register Fields */
op mtcrf(31[6]:rs[5]:?[1]:crm[8]:?[1]:144[10]:?[1]);
mtcrf.var crmask : {uint32_t} = {((((crm&0x80) << 21)|((crm&0x40) << 18)|((crm&0x20) << 15)|((crm&0x10) << 12)|((crm&8) << 9)|((crm&4) << 6)|((crm&2) << 3)|((crm&1) << 0))&0x11111111)*0xf};

mtcrf.execute = {
	// Read the input operands
	U32 s( cpu->GetGPR(rs) ), mask(crmask);
	
	// Apply the bit mask
	CR& cr = cpu->GetCR();
	cr = (U32(cr) & ~mask) | (s & mask);
	
	return true;
};

mtcrf.disasm = {
	if(crm == 0xff)
		os << "mtcr " << GPRPrint(rs);
	else
		os << "mtcrf " << unsigned(crm) << ", " << GPRPrint(rs);
};
