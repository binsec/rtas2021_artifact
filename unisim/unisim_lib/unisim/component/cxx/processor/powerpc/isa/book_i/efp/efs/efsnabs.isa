/*
 *  Copyright (c) 2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr), Franck Vedrine (franck.vedrine@cea.fr)
 */

/*  Floating-Point Single-Precision Negative Absolute Value */
op efsnabs(4[6]:rd[5]:ra[5]:?[5]:709[11]);

/* Note: this is the NXP version where this instruction follows the
 * the classic FP path (exception and flags generation). The standard
 * IBM version would be pure integer with no FP side effect (neither
 * exception generation nor flags affected).
 */
efsnabs.execute = {
	if (!cpu->CheckSPV())
		return false;

	// Read the input operands
	SoftFloat a( SoftFloat::FromRawBits, cpu->GetGPR(ra) ), result( a );

	// Check for Invalid Operation/Input errors
	if (not cpu->EFPProcessInput().set(a).proceed())
		return false;
	
	// Compute the result
	result.setNegative(true);

	// Update the flags
	CPU::SPEFSCR& spefscr = cpu->GetSPEFSCR();
	spefscr.SetOverflow( false );
	spefscr.SetUnderflow( false );
	
	// Write back the result
	cpu->SetGPR(rd, result.queryRawBits());
				
	return true;
};

efsnabs.disasm = {
	os << "efsnabs " << GPRPrint(rd) << ", " << GPRPrint(ra);
};

