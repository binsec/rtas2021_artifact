/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 *          Yves Lhuillier (yves.lhuillier@cea.fr)
 */

/* Branch (Decrement) Conditional [and Link] */
op e_bc(30[6]:8[4]:bo[2]:bi[4]:shl<1> sext <32> bd[15]:lk[1]);

e_bc.execute = {
	BOOL ctr_ok(true), cond_ok(true);
	
	if(bo & 2)
	{
		/* Decrement CTR */
		UINT ctr = UINT(cpu->GetCTR()) - UINT(1);
		cpu->GetCTR() = ctr;
		/* Test whether to branch if CTR is zero or not */
		if(bo & 1)
		{
			ctr_ok = (ctr == UINT(0));
		}
		else
		{
			ctr_ok = (ctr != UINT(0));
		}
	}
	else
	{
		/* Conditional branch */
		U32 cr( cpu->GetCR() );
		if(bo & 1)
		{
			/* Branch if condition is true */
			cond_ok = BOOL((cr << bi) >> 31);
		}
		else
		{
			/* Branch if condition is false */
			cond_ok = not BOOL((cr << bi) >> 31);
		}
	}
	
	if(evenly(ctr_ok and cond_ok))
	{
		ADDRESS target_addr( cpu->GetCIA() + UINT(bd) );
		cpu->Branch(target_addr);
	}
	
	if(lk)
	{
		LR& lr = cpu->GetLR();
		lr = ADDRESS( cpu->GetCIA() + UINT(4) );
	}
	
	return true;
}

e_bc.disasm = {
	if(bo & 2)
	{
		os << "e_bd" << ((bo & 1)?"z":"nz") << (lk?"l ":" ") << HexPrint(this->GetAddr()+bd);
	}
	else
	{
		os << "e_b" << CondPrint(bi & 3,bo & 1) << (lk?"l ":" ");
		unsigned int crn = bi >> 2;
		if (crn)
			os << CRPrint(crn) << ',';
		os << HexPrint(this->GetAddr()+bd);
	}
}
