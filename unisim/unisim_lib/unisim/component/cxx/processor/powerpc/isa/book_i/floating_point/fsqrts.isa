/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* Floating Square Root Single */
op fsqrts(59[6]:fd[5]:?[5]:fb[5]:?[5]:22[5]:rc[1]);

fsqrts.execute = {
	if(not CONFIG::HAS_FPU or not CONFIG::HAS_FLOATING_POINT_SQRT)
	{
		cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
		return false;
	}
	if(unlikely(not cpu->GetMSR().Get<CPU::MSR::FP>()))
	{
		cpu->ThrowException<CPU::FloatingPointUnavailableInterrupt::FloatingPointUnavailable>();
		return false;
	}

	// Read the input operands
	FPSCR& fpscr( cpu->GetFPSCR() );
	SoftDouble result( cpu->GetFPR(fb) );
	
	// Compute the result
	Flags flags( Flags::RoundingMode(fpscr.Get<FPSCR::RN>()) );
	if (unlikely(result.isNaN()))
	{
		if (unlikely(result.isSNaN()))
		{
			fpscr.SetInvalid(FPSCR::VXSNAN());

			if (unlikely(not cpu->CheckFloatingPointException()))
				return false;

			// Compute the result (QNaN)
			result.setQuiet();
		}
	
		result.convertAssign( SoftFloat(result, flags), flags );
		
		// Generate FPRF
		fpscr.Set<FPSCR::FPRF>( FPSCR::FPRF::QNAN() );
	}
	else if (unlikely(result.isNegative()))
	{
		// -infinity <= b < 0
		fpscr.SetInvalid(FPSCR::VXSQRT());
		
		if (unlikely(not cpu->CheckFloatingPointException()))
			return false;
		
		// Compute the result
		result.fromRawBitsAssign(U64(0x7ff8000000000000ULL)); // Positive QNaN
		
		// Generate FPRF
		fpscr.Set<FPSCR::FPRF>(FPSCR::FPRF::QNAN());
		// -infinity <= b < +0
	}
	else if (unlikely(result.isZero()))
	{
		// Generate FPRF
                fpscr.Set<FPSCR::FPRF>(unlikely(result.isNegative()) ? FPSCR::FPRF::NEGATIVE_ZERO() : FPSCR::FPRF::POSITIVE_ZERO());
	}
	else if (unlikely(result.isInfty()))
	{
		// Generate FPRF
		fpscr.Set<FPSCR::FPRF>(FPSCR::FPRF::POSITIVE_INFINITY());
	}
	else
	{
		// 0 < b < +infinity
		result.sqrtAssign( flags );
		result.convertAssign( SoftFloat(result,flags), flags );

		// Generate FPRF, TODO: FR, FI/XX, OX, UX, FX, FEX
		{
			UINT fpscr_value( fpscr );
			GenFPSCR_FPRF<FPSCR, SoftDouble>(fpscr_value, result);
			fpscr = fpscr_value;
		}
	}

	if (unlikely(not cpu->CheckFloatingPointException()))
		return false;
		
	if (not cpu->CheckFloatingPointException())
		return false;

	// Write back the result
	cpu->SetFPR(fd, result);
	
	// Copy FX, FEX, VX, OX to CR1
	if (unlikely(rc)) { cpu->GetCR().Set<CR::CR1>( fpscr.Get<FPSCR::_0_3>() ); }
	
	return true;
};

fsqrts.disasm = {
	os << "fsqrts" << (rc ? "." : "") << " " << FPRPrint(fd) << ", " << FPRPrint(fb);
};

specialize fsqrts(rc=0);
specialize fsqrts(rc=1);
