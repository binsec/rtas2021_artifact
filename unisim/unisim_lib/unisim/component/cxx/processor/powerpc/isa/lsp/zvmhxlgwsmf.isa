/*
 *  Copyright (c) 2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

impl {
#include <unisim/component/cxx/processor/powerpc/isa/lsp/lsp.hh>
}

/* Vector multiply halfwords, exchanged/lower guarded-word, signed modulo fractional [with round]
   [and {accumulate, accumulate negative, accumulate negative/positive}]
   (zvmhxlgwsmf[r][{aa,an,anp}]):
 * - zvmhxlgwsmf
 * - zvmhxlgwsmfr
 * - zvmhxlgwsmfaa
 * - zvmhxlgwsmfraa
 * - zvmhxlgwsmfan
 * - zvmhxlgwsmfran
 * - zvmhxlgwsmfanp
 * - zvmhxlgwsmfranp
 */
op zvmhxlgwsmf(4[6]:rd[5]:ra[5]:rb[5]:0b1001[4]:0b1100[4]:acc[2]:r[1]) /* acc in {00="",01="aa",10="an",11="anp"}, r in {0="",1="r"} */
zvmhxlgwsmf.execute = {
	cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
	return false;
}
zvmhxlgwsmf.disasm = {
	os << "zvmhxlgwsmf" << (r ? "r" : "") << LSP_ACC(acc) << " " << GPRPrint(rd) << ", " << GPRPrint(ra) << ", " << GPRPrint(rb);
}

specialize zvmhxlgwsmf(acc=0,r=0)
specialize zvmhxlgwsmf(acc=0,r=1)
specialize zvmhxlgwsmf(acc=1,r=0)
specialize zvmhxlgwsmf(acc=1,r=1)
specialize zvmhxlgwsmf(acc=2,r=0)
specialize zvmhxlgwsmf(acc=2,r=1)
specialize zvmhxlgwsmf(acc=3,r=0)
specialize zvmhxlgwsmf(acc=3,r=1)
