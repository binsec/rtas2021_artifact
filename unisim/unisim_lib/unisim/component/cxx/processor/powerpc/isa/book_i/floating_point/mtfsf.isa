/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
/* Move To FPSCR Fields */
op mtfsf(63[6]:l[1]:fm[8]:w[1]:fb[5]:711[10]:rc[1]);
mtfsf.var fsmask : {uint32_t} = {(((fm&0x80) << 21)|((fm&0x40) << 18)|((fm&0x20) << 15)|((fm&0x10) << 12)|((fm&8) << 9)|((fm&4) << 6)|((fm&2) << 3)|((fm&1) << 0))*0xf};

mtfsf.execute = {
	if(not CONFIG::HAS_FPU)
	{
		cpu->ThrowException<CPU::ProgramInterrupt::UnimplementedInstruction>();
		return false;
	}
	if(unlikely(not cpu->GetMSR().Get<CPU::MSR::FP>()))
	{
		cpu->ThrowException<CPU::FloatingPointUnavailableInterrupt::FloatingPointUnavailable>();
		return false;
	}
	
	// Read the input operands
	FPSCR& fpscr = cpu->GetFPSCR();
	UINT rb( cpu->GetFPR(fb).queryRawBits() );
	UINT mask(l ? UINT(uint64_t(-1)) : UINT(uint64_t(fsmask) << (w ? 32 : 0)));
	
	// Compute the result
	UINT new_fpscr = ((UINT(fpscr) & ~mask) | (rb & mask));
	
	// Update VX, FEX
	GenFPSCR_VX<FPSCR>(new_fpscr);
	GenFPSCR_FEX<FPSCR>(new_fpscr);
	
	fpscr = new_fpscr;
        
	// Copy FX, FEX, VX, OX to CR1
	if (unlikely(rc)) { cpu->GetCR().Set<CR::CR1>( fpscr.Get<FPSCR::_0_3>() ); }
	
	return true;
};

mtfsf.disasm = {
	os << "mtfsf" << (rc ? "." : "") << " " << unsigned(fm) << ", " << FPRPrint(fb);
};

specialize mtfsf(rc=0);
specialize mtfsf(rc=1);
