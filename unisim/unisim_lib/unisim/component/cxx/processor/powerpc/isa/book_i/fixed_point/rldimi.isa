/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */

/* Rotate Left Doubleword Immediate then Mask Insert */
op rldimi(30[6]:rs[5]:ra[5]:sh1[5]:mb1[5]:shl<5>mb0[1]:3[3]:shl<5>sh0[1]:rc[1]);
rldimi.var sh : {uint8_t} = {sh0|sh1}, mb : {uint8_t} = {mb0|mb1};

rldimi.execute = {
	// Read the input operands
	U64 s( cpu->GetGPR(rs) );
	U64 const m( Mask64(mb,sh^63) ),  a( cpu->GetGPR(ra) );
	
	// Compute the result
	U64 result( (RotateLeft(s, sh) & m) | (a & ~m) );
	
	// Write back the result
	cpu->SetGPR(ra, result);
	
	if(unlikely(rc))
	{
		CR& cr = cpu->GetCR();
		cr.Set<CR::CR0::SO>(cpu->GetXER().Get<XER::SO>());
		cr.Set<CR::CR0::LT>(SINT(result) < SINT(0));
		cr.Set<CR::CR0::GT>(SINT(result) > SINT(0));
		cr.Set<CR::CR0::EQ>(result == UINT(0));
	}
	
	return true;
};

rldimi.disasm = {
	os << "rldimi" << (rc ? "." : "") << " " << GPRPrint(ra) << ", " << GPRPrint(rs) << ", " << unsigned(sh) << ", " << unsigned(mb);
};

specialize rldimi(rc=0);
specialize rldimi(rc=1);
