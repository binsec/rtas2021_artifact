/*
 *  Copyright (c) 2007-2018,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Gilles Mouchard (gilles.mouchard@cea.fr)
 */
 
/* Move to Condition Register from XER */
op mcrxr(31[6]:crfD[3]:?[12]:512[10]:?[1]);

mcrxr.execute = {
	XER& xer = cpu->GetXER();
	
	// Generate CR[crfD]: CR[crfD]=XER[0-3]
	CR& cr = cpu->GetCR();
	switch(crfD)
	{
		case 0: cr.Set<CR::CR0>(xer.Get<XER::_0_3>()); break;
		case 1: cr.Set<CR::CR1>(xer.Get<XER::_0_3>()); break;
		case 2: cr.Set<CR::CR2>(xer.Get<XER::_0_3>()); break;
		case 3: cr.Set<CR::CR3>(xer.Get<XER::_0_3>()); break;
		case 4: cr.Set<CR::CR4>(xer.Get<XER::_0_3>()); break;
		case 5: cr.Set<CR::CR5>(xer.Get<XER::_0_3>()); break;
		case 6: cr.Set<CR::CR6>(xer.Get<XER::_0_3>()); break;
		case 7: cr.Set<CR::CR7>(xer.Get<XER::_0_3>()); break;
	}
	// Reset XER[0-3]
	xer.Set<XER::_0_3>(0);
	
	return true;
};

mcrxr.disasm = {
	os << "mcrxr " << CRPrint(crfD);
};

specialize mcrxr(crfD=0);
specialize mcrxr(crfD=1);
specialize mcrxr(crfD=2);
specialize mcrxr(crfD=3);
specialize mcrxr(crfD=4);
specialize mcrxr(crfD=5);
specialize mcrxr(crfD=6);
specialize mcrxr(crfD=7);
