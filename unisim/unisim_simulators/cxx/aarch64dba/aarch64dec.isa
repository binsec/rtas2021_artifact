/*
 *  Copyright (c) 2017,
 *  Commissariat a l'Energie Atomique (CEA)
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification,
 *  are permitted provided that the following conditions are met:
 *
 *   - Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *   - Neither the name of CEA nor the names of its contributors may be used to
 *     endorse or promote products derived from this software without specific prior
 *     written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 *  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED.
 *  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 *  OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 *  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Authors: Yves Lhuillier (yves.lhuillier@cea.fr)
 */
 
/**********************************************

             ARM64 TOP ISA DESCRIPTION

**********************************************/

namespace unisim::component::cxx::processor::arm::isa::arm64
set endianness little
set addressclass {uint64_t}
template <{typename} {ARCH}>

decl {
#include <iosfwd>
#include <stdint.h>
} // end of decl

impl {
#include <unisim/component/cxx/processor/arm/isa/arm64/decode.hh>
#include <unisim/component/cxx/processor/arm/isa/arm64/disasm.hh>
#include <unisim/util/arithmetic/arithmetic.hh>
#include <iostream>

using unisim::util::arithmetic::RotateRight;
using unisim::util::arithmetic::BitScanReverse;

#include <unisim/component/cxx/processor/arm/isa/arm64/execute.hh>
#include <unisim/component/cxx/processor/arm/execute.hh>

}

action {void} execute({ARCH &} {cpu}) { cpu.UndefinedInstruction(this); }

action {void} disasm({ARCH &} {cpu}, {std::ostream&} {sink}) {
  sink << "; Unknown AARCH64 instruction";
}

impl {
} // end of impl

include "unisim/component/cxx/processor/arm/isa/arm64/base.isa"
//include "unisim/component/cxx/processor/arm/isa/arm64/simd_fp.isa"
